#!/bin/bash
# üñ•Ô∏è –£–º–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
# –ê–≤—Ç–æ—Ä: g1if
# –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: https://github.com/g1if/system-admin-portfolio

set -euo pipefail

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
LOG_FILE="../logs/system-monitor.log"
mkdir -p "$(dirname "$LOG_FILE")"

log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE"
}

print_header() {
    echo -e "${CYAN}"
    echo "üñ•Ô∏è  ==========================================="
    echo "   –°–ò–°–¢–ï–ú–ù–´–ô –ú–û–ù–ò–¢–û–† v2.0"
    echo "   $(date)"
    echo "   –ê–≤—Ç–æ—Ä: g1if"
    echo "==========================================="
    echo -e "${NC}"
}

print_section() {
    echo -e "${BLUE}üìä $1${NC}"
}

print_status() {
    local status=$1
    local message=$2
    case $status in
        "OK") echo -e "  ${GREEN}‚úÖ $message${NC}" ;;
        "WARN") echo -e "  ${YELLOW}‚ö†Ô∏è  $message${NC}" ;;
        "ERROR") echo -e "  ${RED}‚ùå $message${NC}" ;;
    esac
}

# –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
detect_system() {
    print_section "–°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø"
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–∞
    if [ -f /etc/os-release ]; then
        source /etc/os-release
        OS_NAME="$NAME"
        OS_VERSION="$VERSION_ID"
    else
        OS_NAME=$(uname -s)
        OS_VERSION=$(uname -r)
    fi
    
    echo "  –û–°: $OS_NAME $OS_VERSION"
    echo "  –•–æ—Å—Ç–Ω–µ–π–º: $(hostname)"
    echo "  –Ø–¥—Ä–æ: $(uname -r)"
    echo "  –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: $(uname -m)"
    
    # Uptime
    UPTIME=$(uptime -p 2>/dev/null || echo "–ù–µ –¥–æ—Å—Ç—É–ø–Ω–æ")
    echo "  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: $UPTIME"
}

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤
check_resources() {
    print_section "–ú–û–ù–ò–¢–û–†–ò–ù–ì –†–ï–°–£–†–°–û–í"
    
    # CPU
    CPU_USAGE=$(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d'%' -f1)
    CPU_CORES=$(nproc)
    echo "  –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: $CPU_CORES —è–¥–µ—Ä"
    
    if (( $(echo "$CPU_USAGE > 80" | bc -l 2>/dev/null || echo "0") )); then
        print_status "WARN" "–ó–∞–≥—Ä—É–∑–∫–∞ CPU: ${CPU_USAGE}%"
    else
        print_status "OK" "–ó–∞–≥—Ä—É–∑–∫–∞ CPU: ${CPU_USAGE}%"
    fi
    
    # Memory
    MEM_INFO=$(free -h | grep Mem)
    MEM_TOTAL=$(echo $MEM_INFO | awk '{print $2}')
    MEM_USED=$(echo $MEM_INFO | awk '{print $3}')
    MEM_PERCENT=$(free | grep Mem | awk '{printf "%.1f", $3/$2 * 100}')
    
    echo "  –ü–∞–º—è—Ç—å: $MEM_USED/$MEM_TOTAL"
    if (( $(echo "$MEM_PERCENT > 80" | bc -l 2>/dev/null || echo "0") )); then
        print_status "WARN" "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${MEM_PERCENT}%"
    else
        print_status "OK" "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${MEM_PERCENT}%"
    fi
    
    # Disk
    DF_OUTPUT=$(df -h / | tail -1)
    DISK_USED=$(echo $DF_OUTPUT | awk '{print $3}')
    DISK_TOTAL=$(echo $DF_OUTPUT | awk '{print $2}')
    DISK_PERCENT=$(echo $DF_OUTPUT | awk '{print $5}' | cut -d'%' -f1)
    
    echo "  –î–∏—Å–∫ (/): $DISK_USED/$DISK_TOTAL"
    if [ "$DISK_PERCENT" -gt 90 ]; then
        print_status "ERROR" "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞: ${DISK_PERCENT}%"
    elif [ "$DISK_PERCENT" -gt 80 ]; then
        print_status "WARN" "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞: ${DISK_PERCENT}%"
    else
        print_status "OK" "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞: ${DISK_PERCENT}%"
    fi
}

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ç–∏
check_network() {
    print_section "–°–ï–¢–ï–í–û–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì"
    
    # –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
    INTERFACES=$(ip link show | grep -E "^[0-9]+:" | grep -v "LOOPBACK" | awk -F: '{print $2}' | tr -d ' ')
    
    for IFACE in $INTERFACES; do
        IP_ADDR=$(ip addr show $IFACE 2>/dev/null | grep "inet " | awk '{print $2}' | head -1)
        if [ -n "$IP_ADDR" ]; then
            echo "  $IFACE: $IP_ADDR"
        fi
    done
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
    if ping -c 1 -W 3 8.8.8.8 &>/dev/null; then
        print_status "OK" "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: –î–æ—Å—Ç—É–ø–Ω–æ"
    else
        print_status "ERROR" "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: –ù–µ –¥–æ—Å—Ç—É–ø–Ω–æ"
    fi
}

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–∏—Å–æ–≤
check_services() {
    print_section "–°–ò–°–¢–ï–ú–ù–´–ï –°–ï–†–í–ò–°–´"
    
    SERVICES=("ssh" "nginx" "apache2" "mysql" "postgresql")
    
    for SERVICE in "${SERVICES[@]}"; do
        if systemctl is-active --quiet $SERVICE 2>/dev/null; then
            print_status "OK" "–°–µ—Ä–≤–∏—Å $SERVICE: –ó–∞–ø—É—â–µ–Ω"
        elif command -v $SERVICE &>/dev/null; then
            print_status "WARN" "–°–µ—Ä–≤–∏—Å $SERVICE: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        fi
    done
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    print_header
    detect_system
    check_resources
    check_network
    check_services
    
    echo ""
    echo -e "${GREEN}‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞${NC}"
    log "System check completed"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
case "${1:-}" in
    "watch")
        watch -n 10 "bash system-monitor.sh"
        ;;
    "log")
        tail -f "$LOG_FILE"
        ;;
    "help")
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [watch|log|help]"
        echo "  watch - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ (–∫–∞–∂–¥—ã–µ 10 —Å–µ–∫)"
        echo "  log   - –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
        echo "  help  - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
        ;;
    *)
        main
        ;;
esac
