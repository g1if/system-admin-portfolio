#!/bin/bash
# üíæ –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏—Å–∫–æ–≤ –∏ —Ñ–∞–π–ª–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
# –ê–≤—Ç–æ—Ä: g1if
# –í–µ—Ä—Å–∏—è: 2.0
# –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: https://github.com/g1if/system-admin-portfolio

set -e

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
LOG_DIR="$PROJECT_ROOT/logs"
CONFIG_DIR="$PROJECT_ROOT/configs"
REPORTS_DIR="$PROJECT_ROOT/reports"
LOG_FILE="$LOG_DIR/disk-manager.log"
CONFIG_FILE="$CONFIG_DIR/disk-manager.conf"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
mkdir -p "$LOG_DIR" "$CONFIG_DIR" "$REPORTS_DIR" 2>/dev/null || true

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
PURPLE='\033[0;95m'
NC='\033[0m' # No Color

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
log() {
    local level=${2:-"INFO"}
    echo "$(date '+%Y-%m-%d %H:%M:%S') - [$level] $1" >> "$LOG_FILE" 2>/dev/null || true
}

print_header() {
    echo -e "${MAGENTA}"
    echo "üíæ ==========================================="
    echo "   –ú–ï–ù–ï–î–ñ–ï–† –î–ò–°–ö–û–í –ò –§–ê–ô–õ–û–í–´–• –°–ò–°–¢–ï–ú v2.0"
    echo "   $(date)"
    echo "   –ê–≤—Ç–æ—Ä: g1if"
    echo "==========================================="
    echo -e "${NC}"
}

print_section() {
    echo -e "${BLUE}üíø $1${NC}"
}

print_status() {
    local status=$1
    local message=$2
    case $status in
        "OK") echo -e "  ${GREEN}‚úÖ $message${NC}" ;;
        "WARN") echo -e "  ${YELLOW}‚ö†Ô∏è  $message${NC}" ;;
        "ERROR") echo -e "  ${RED}‚ùå $message${NC}" ;;
        "INFO") echo -e "  ${BLUE}‚ÑπÔ∏è  $message${NC}" ;;
        "CRITICAL") echo -e "  ${RED}üö® $message${NC}" ;;
    esac
    log "$message" "$status"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    local missing=()
    local optional_missing=()
    
    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
    for cmd in df du find; do
        if ! command -v "$cmd" &> /dev/null; then
            missing+=("$cmd")
        fi
    done
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
    if ! command -v lsblk &> /dev/null; then
        optional_missing+=("lsblk")
    fi
    
    if ! command -v smartctl &> /dev/null; then
        optional_missing+=("smartmontools")
    fi
    
    if ! command -v iostat &> /dev/null; then
        optional_missing+=("sysstat")
    fi
    
    if ! command -v ncdu &> /dev/null; then
        optional_missing+=("ncdu")
    fi
    
    if [ ${#missing[@]} -gt 0 ]; then
        print_status "ERROR" "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã: ${missing[*]}"
        echo "üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt install ${missing[*]}"
        return 1
    fi
    
    if [ ${#optional_missing[@]} -gt 0 ]; then
        print_status "WARN" "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã: ${optional_missing[*]}"
        echo "üí° –î–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt install ${optional_missing[*]}"
    fi
    
    return 0
}

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_config() {
    if [ -f "$CONFIG_FILE" ]; then
        source "$CONFIG_FILE"
        print_status "INFO" "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: $CONFIG_FILE"
    else
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        WARNING_THRESHOLD=80
        CRITICAL_THRESHOLD=90
        INODE_WARNING_THRESHOLD=80
        INODE_CRITICAL_THRESHOLD=90
        LARGE_FILE_THRESHOLD_MB=100
        HOME_LARGE_FILE_THRESHOLD_MB=50
        TEMP_FILE_AGE_DAYS=7
        LOG_FILE_AGE_DAYS=30
        ENABLE_SMART_MONITORING=true
        ENABLE_IO_MONITORING=true
        EXCLUDE_PATTERNS=("*.tmp" "*.log" "cache/*" "node_modules/*" ".git/*")
        
        print_status "WARN" "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
create_config() {
    cat > "$CONFIG_FILE" << 'CONFIG_EOF'
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∏—Å–∫–æ–≤ v2.0

# –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∏—Å–∫–∞ (%)
WARNING_THRESHOLD=80
CRITICAL_THRESHOLD=90

# –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è inodes (%)
INODE_WARNING_THRESHOLD=80
INODE_CRITICAL_THRESHOLD=90

# –ü–æ—Ä–æ–≥–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ (–ú–ë)
LARGE_FILE_THRESHOLD_MB=100
HOME_LARGE_FILE_THRESHOLD_MB=50

# –í–æ–∑—Ä–∞—Å—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ (–¥–Ω–∏)
TEMP_FILE_AGE_DAYS=7
LOG_FILE_AGE_DAYS=30

# –í–∫–ª—é—á–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
ENABLE_SMART_MONITORING=true
ENABLE_IO_MONITORING=true

# –ò—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ñ–∞–π–ª–æ–≤
EXCLUDE_PATTERNS=("*.tmp" "*.log" "cache/*" "node_modules/*" ".git/*" "*.iso" "*.docker/*")
CONFIG_EOF
    
    print_status "OK" "–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: $CONFIG_FILE"
}

# –ß–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º—ã–π —Ä–∞–∑–º–µ—Ä
human_size() {
    local bytes=$1
    if command -v numfmt >/dev/null 2>&1; then
        numfmt --to=iec --suffix=B "$bytes"
    elif command -v bc >/dev/null 2>&1; then
        if [ "$bytes" -gt 1099511627776 ]; then
            echo "$(echo "scale=2; $bytes/1099511627776" | bc) TB"
        elif [ "$bytes" -gt 1073741824 ]; then
            echo "$(echo "scale=2; $bytes/1073741824" | bc) GB"
        elif [ "$bytes" -gt 1048576 ]; then
            echo "$(echo "scale=2; $bytes/1048576" | bc) MB"
        elif [ "$bytes" -gt 1024 ]; then
            echo "$(echo "scale=2; $bytes/1024" | bc) KB"
        else
            echo "$bytes bytes"
        fi
    else
        # –ü—Ä–æ—Å—Ç–æ–π –≤—ã–≤–æ–¥
        if [ "$bytes" -gt 1099511627776 ]; then
            echo "$((bytes / 1099511627776)) TB"
        elif [ "$bytes" -gt 1073741824 ]; then
            echo "$((bytes / 1073741824)) GB"
        elif [ "$bytes" -gt 1048576 ]; then
            echo "$((bytes / 1048576)) MB"
        elif [ "$bytes" -gt 1024 ]; then
            echo "$((bytes / 1024)) KB"
        else
            echo "$bytes bytes"
        fi
    fi
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–∫–∞—Ö
get_disk_info() {
    print_section "–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –î–ò–°–ö–ê–•"
    
    echo "  üìä –û–±—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–æ–≤:"
    local has_critical=0
    local has_warning=0
    
    df -h | grep -E '^/dev/' | while read -r line; do
        local device=$(echo "$line" | awk '{print $1}')
        local size=$(echo "$line" | awk '{print $2}')
        local used=$(echo "$line" | awk '{print $3}')
        local avail=$(echo "$line" | awk '{print $4}')
        local use_percent=$(echo "$line" | awk '{print $5}' | tr -d '%')
        local mount=$(echo "$line" | awk '{print $6}')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        local status="OK"
        if [ "$use_percent" -ge "$CRITICAL_THRESHOLD" ]; then
            status="CRITICAL"
            has_critical=1
        elif [ "$use_percent" -ge "$WARNING_THRESHOLD" ]; then
            status="WARN"
            has_warning=1
        fi
        
        print_status "$status" "$device: $used/$size ($use_percent%) –Ω–∞ $mount"
    done
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª–æ—á–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
    echo ""
    echo "  üîß –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª–æ—á–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö:"
    if command -v lsblk >/dev/null 2>&1; then
        lsblk -o NAME,SIZE,TYPE,MOUNTPOINT,FSTYPE,LABEL | head -15 | while read -r line; do
            echo "    üìü $line"
        done
    else
        echo "    ‚ÑπÔ∏è  –ö–æ–º–∞–Ω–¥–∞ lsblk –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    fi
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ LVM (–µ—Å–ª–∏ –µ—Å—Ç—å)
    echo ""
    echo "  üíΩ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ LVM:"
    if command -v pvs >/dev/null 2>&1 && sudo pvs &>/dev/null; then
        echo "    üìä Physical Volumes:"
        sudo pvs 2>/dev/null | head -5 | while read -r line; do
            echo "      üíæ $line"
        done || echo "      ‚ÑπÔ∏è  LVM –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤"
    else
        echo "    ‚ÑπÔ∏è  LVM –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    fi
    
    return $((has_critical + has_warning))
}

# –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
analyze_filesystems_detailed() {
    print_section "–î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –§–ê–ô–õ–û–í–´–• –°–ò–°–¢–ï–ú"
    
    echo "  üìã –¢–∏–ø—ã —Ñ–∞–π–ª–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º:"
    mount | grep -E '^/dev/' | awk '{print $5}' | sort | uniq -c | sort -nr | while read -r count fs_type; do
        echo "    üíæ $fs_type: $count —Ç–æ—á–µ–∫ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
    done
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ read-only —Ñ–∞–π–ª–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã
    echo ""
    echo "  üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º –Ω–∞ read-only:"
    local ro_count=0
    while IFS= read -r mount_line; do
        if [[ "$mount_line" == *"(ro,"* ]]; then
            ro_count=$((ro_count + 1))
            local device=$(echo "$mount_line" | awk '{print $1}')
            local mount_point=$(echo "$mount_line" | awk '{print $3}')
            print_status "WARN" "Read-only —Ñ–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞: $device –Ω–∞ $mount_point"
        fi
    done < <(mount | grep -E '^/dev/')
    
    if [ "$ro_count" -eq 0 ]; then
        print_status "OK" "–ù–µ—Ç read-only —Ñ–∞–π–ª–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    echo ""
    echo "  ‚öôÔ∏è  –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º:"
    for mount_point in "/" "/home" "/var" "/tmp"; do
        if mount | grep -q " on $mount_point "; then
            local options=$(mount | grep " on $mount_point " | awk -F'[()]' '{print $2}')
            echo "    üìÇ $mount_point: $options"
        fi
    done
}

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ inodes
check_inodes_detailed() {
    print_section "–†–ê–°–®–ò–†–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó INODES"
    
    echo "  üîç –î–µ—Ç–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ inodes:"
    local has_critical_inodes=0
    local has_warning_inodes=0
    
    df -i | grep -E '^/dev/' | while read -r line; do
        local device=$(echo "$line" | awk '{print $1}')
        local itotal=$(echo "$line" | awk '{print $2}')
        local iused=$(echo "$line" | awk '{print $3}')
        local ipercent=$(echo "$line" | awk '{print $5}' | tr -d '%')
        local mount=$(echo "$line" | awk '{print $6}')
        
        if [[ "$ipercent" =~ ^[0-9]+$ ]]; then
            local status="OK"
            if [ "$ipercent" -ge "$INODE_CRITICAL_THRESHOLD" ]; then
                status="CRITICAL"
                has_critical_inodes=1
            elif [ "$ipercent" -ge "$INODE_WARNING_THRESHOLD" ]; then
                status="WARN"
                has_warning_inodes=1
            fi
            
            local iused_pretty=$(printf "%'d" "$iused" 2>/dev/null || echo "$iused")
            local itotal_pretty=$(printf "%'d" "$itotal" 2>/dev/null || echo "$itotal")
            
            print_status "$status" "$device: $iused_pretty/$itotal_pretty inodes ($ipercent%) –Ω–∞ $mount"
        fi
    done
    
    # –ü–æ–∏—Å–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ñ–∞–π–ª–æ–≤
    echo ""
    echo "  üìÅ –ü–æ–∏—Å–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ñ–∞–π–ª–æ–≤:"
    for directory in "/var" "/home" "/tmp"; do
        if [ -d "$directory" ]; then
            local file_count=$(find "$directory" -type f 2>/dev/null | wc -l 2>/dev/null || echo "0")
            local dir_count=$(find "$directory" -type d 2>/dev/null | wc -l 2>/dev/null || echo "0")
            
            if [ "$file_count" -gt 10000 ]; then
                print_status "INFO" "$directory: $file_count —Ñ–∞–π–ª–æ–≤, $dir_count –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"
            fi
        fi
    done
    
    return $((has_critical_inodes + has_warning_inodes))
}

# –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
find_large_files_advanced() {
    local top_count=${1:-10}
    
    print_section "–ü–û–ò–°–ö –ë–û–õ–¨–®–ò–• –§–ê–ô–õ–û–í (–¢–û–ü-$top_count)"
    
    echo "  üîé –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –±–æ–ª—å—à–µ ${LARGE_FILE_THRESHOLD_MB}M –≤ —Å–∏—Å—Ç–µ–º–µ..."
    
    # –°—Ç—Ä–æ–∏–º –∫–æ–º–∞–Ω–¥—É find —Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏
    local find_cmd=("find" "/" "-type" "f" "-size" "+${LARGE_FILE_THRESHOLD_MB}M" "!" "-path" "*/proc/*" "!" "-path" "*/sys/*")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    for pattern in "${EXCLUDE_PATTERNS[@]}"; do
        find_cmd+=("!" "-name" "$pattern")
    done
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
    local large_files=$("${find_cmd[@]}" 2>/dev/null | xargs du -h 2>/dev/null | sort -rh | head -n "$top_count" 2>/dev/null || true)
    
    if [ -n "$large_files" ]; then
        echo "$large_files" | while read -r size file; do
            echo "    üìÅ $size - $file"
        done
    else
        echo "    ‚ÑπÔ∏è  –ë–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"
    fi
    
    # –ê–Ω–∞–ª–∏–∑ –¥–æ–º–∞—à–Ω–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    echo ""
    echo "  üè† –ê–Ω–∞–ª–∏–∑ –¥–æ–º–∞—à–Ω–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π (—Ñ–∞–π–ª—ã > ${HOME_LARGE_FILE_THRESHOLD_MB}M):"
    if [ -d "/home" ]; then
        local home_files=$(find "/home" -type f -size "+${HOME_LARGE_FILE_THRESHOLD_MB}M" 2>/dev/null | xargs du -h 2>/dev/null | sort -rh | head -n 5 2>/dev/null || true)
        
        if [ -n "$home_files" ]; then
            echo "$home_files" | while read -r size file; do
                echo "    üè† $size - $file"
            done
        else
            echo "    ‚ÑπÔ∏è  –ë–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã –≤ /home –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        fi
    fi
    
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ncdu –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
    if command -v ncdu >/dev/null 2>&1; then
        echo ""
        echo "  üìä –î–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ncdu /"
    fi
}

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ SMART
check_smart_detailed() {
    if [ "$ENABLE_SMART_MONITORING" != "true" ]; then
        return 0
    fi
    
    print_section "–†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê SMART"
    
    if ! command -v smartctl >/dev/null 2>&1; then
        print_status "WARN" "smartctl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        echo "    üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt install smartmontools"
        return 0
    fi
    
    local has_errors=0
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –¥–∏—Å–∫–∏
    for device in /dev/sd? /dev/nvme?n1 /dev/mmcblk?; do
        if [ -b "$device" ]; then
            echo "  üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ $device..."
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É SMART
            if smartctl -i "$device" 2>/dev/null | grep -q "SMART support is: Available"; then
                # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è
                local health_status=$(smartctl -H "$device" 2>/dev/null | grep "SMART overall-health" || true)
                
                if [ -n "$health_status" ]; then
                    if echo "$health_status" | grep -q "PASSED"; then
                        print_status "OK" "$device: SMART —Å—Ç–∞—Ç—É—Å –≤ –Ω–æ—Ä–º–µ"
                        
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–µ
                        local model=$(smartctl -i "$device" 2>/dev/null | grep "Device Model" | cut -d: -f2 | sed 's/^ *//' || echo "N/A")
                        local serial=$(smartctl -i "$device" 2>/dev/null | grep "Serial Number" | cut -d: -f2 | sed 's/^ *//' || echo "N/A")
                        local capacity=$(smartctl -i "$device" 2>/dev/null | grep "User Capacity" | cut -d: -f2 | sed 's/^ *//' || echo "N/A")
                        
                        echo "      üíæ –ú–æ–¥–µ–ª—å: $model"
                        echo "      üî¢ –°–µ—Ä–∏–π–Ω—ã–π: $serial"
                        echo "      üíΩ –ï–º–∫–æ—Å—Ç—å: $capacity"
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤
                        local temp=$(smartctl -A "$device" 2>/dev/null | grep "Temperature_Celsius" | awk '{print $10}' || echo "N/A")
                        if [ "$temp" != "N/A" ]; then
                            echo "      üå°Ô∏è  –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${temp}¬∞C"
                        fi
                        
                    else
                        print_status "CRITICAL" "$device: –ü–†–û–ë–õ–ï–ú–´ –°–û SMART!"
                        has_errors=1
                    fi
                else
                    print_status "WARN" "$device: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å SMART —Å—Ç–∞—Ç—É—Å"
                fi
            else
                echo "    ‚ÑπÔ∏è  $device: SMART –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"
            fi
            echo ""
        fi
    done
    
    if [ $has_errors -eq 0 ]; then
        print_status "OK" "SMART –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –±–µ–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫"
    else
        print_status "ERROR" "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–∏—Å–∫–∞–º–∏!"
    fi
    
    return $has_errors
}

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ I/O —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
monitor_io_detailed() {
    if [ "$ENABLE_IO_MONITORING" != "true" ]; then
        return 0
    fi
    
    print_section "–î–ï–¢–ê–õ–¨–ù–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì I/O"
    
    echo "  üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–∏—Å–∫–æ–≤ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã)..."
    echo -e "  ${CYAN}–î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C${NC}"
    echo ""
    
    if command -v iostat >/dev/null 2>&1; then
        iostat -dxm 2
    elif command -v vmstat >/dev/null 2>&1; then
        echo "    üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º vmstat (iostat –Ω–µ –Ω–∞–π–¥–µ–Ω):"
        vmstat 2
    else
        print_status "WARN" "iostat/vmstat –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
        echo "    üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt install sysstat"
    fi
}

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
clean_temp_files_advanced() {
    print_section "–†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –í–†–ï–ú–ï–ù–ù–´–• –§–ê–ô–õ–û–í"
    
    local temp_dirs=(
        "/tmp"
        "/var/tmp" 
        "$HOME/.cache"
        "/var/cache/apt/archives"
        "/var/log"
    )
    
    local total_freed=0
    local total_files=0
    
    for dir in "${temp_dirs[@]}"; do
        if [ -d "$dir" ]; then
            echo "  üßπ –û—á–∏—Å—Ç–∫–∞ $dir..."
            
            # –ü–æ–¥—Å—á–µ—Ç —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
            local files_before=$(find "$dir" -type f -atime "+$TEMP_FILE_AGE_DAYS" 2>/dev/null | wc -l || echo 0)
            local size_before=$(du -s "$dir" 2>/dev/null | cut -f1 || echo 0)
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤
            find "$dir" -type f -atime "+$TEMP_FILE_AGE_DAYS" -delete 2>/dev/null || true
            
            # –û—á–∏—Å—Ç–∫–∞ –ø—É—Å—Ç—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π (–∫—Ä–æ–º–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö)
            if [[ "$dir" != "/tmp" && "$dir" != "/var/tmp" ]]; then
                find "$dir" -type d -empty -delete 2>/dev/null || true
            fi
            
            local size_after=$(du -s "$dir" 2>/dev/null | cut -f1 || echo 0)
            local freed=$((size_before - size_after))
            total_freed=$((total_freed + freed))
            total_files=$((total_files + files_before))
            
            if [ "$freed" -gt 0 ]; then
                echo "    üìä –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: $files_before, –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ: $(human_size $((freed * 1024)))"
            else
                echo "    ‚ÑπÔ∏è  –ù–µ—á–µ–≥–æ –æ—á–∏—â–∞—Ç—å"
            fi
        fi
    done
    
    # –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤
    echo ""
    echo "  üìã –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤:"
    if [ -d "/var/log" ]; then
        local log_files=$(find "/var/log" -name "*.log.*" -type f -mtime "+$LOG_FILE_AGE_DAYS" 2>/dev/null | wc -l || echo 0)
        find "/var/log" -name "*.log.*" -type f -mtime "+$LOG_FILE_AGE_DAYS" -delete 2>/dev/null || true
        echo "    üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤: $log_files"
    fi
    
    if [ "$total_freed" -gt 0 ]; then
        print_status "OK" "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ: $(human_size $((total_freed * 1024)))"
        echo "    üìÅ –í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: $total_files"
    else
        print_status "INFO" "–ù–µ—á–µ–≥–æ –æ—á–∏—â–∞—Ç—å"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫ –¥–∏—Å–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–∞—Ö
check_disk_errors_detailed() {
    print_section "–ü–†–û–í–ï–†–ö–ê –û–®–ò–ë–û–ö –î–ò–°–ö–ê –í –õ–û–ì–ê–•"
    
    echo "  üîç –ü–æ–∏—Å–∫ –æ—à–∏–±–æ–∫ –¥–∏—Å–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–∞—Ö..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ dmesg –Ω–∞ –æ—à–∏–±–∫–∏ –¥–∏—Å–∫–∞
    local disk_errors=$(dmesg 2>/dev/null | grep -i -E "error.*disk|disk.*error|I/O error|SATA link down" | head -10 || true)
    
    if [ -n "$disk_errors" ]; then
        print_status "ERROR" "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –¥–∏—Å–∫–∞ –≤ dmesg:"
        echo "$disk_errors" | while read -r error; do
            echo "    ‚ùå $error"
        done
    else
        print_status "OK" "–û—à–∏–±–∫–∏ –¥–∏—Å–∫–∞ –≤ dmesg –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤
    echo ""
    echo "  üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤:"
    local syslog_errors=$(grep -i -E "disk error|I/O error|filesystem error" /var/log/syslog /var/log/messages 2>/dev/null | head -5 || true)
    
    if [ -n "$syslog_errors" ]; then
        print_status "WARN" "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–∞—Ö:"
        echo "$syslog_errors" | while read -r error; do
            echo "    ‚ö†Ô∏è  $error"
        done
    else
        print_status "OK" "–û—à–∏–±–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–∞—Ö –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
generate_report() {
    local report_file="$REPORTS_DIR/disk-report-$(date +%Y%m%d_%H%M%S).txt"
    
    print_section "–°–û–ó–î–ê–ù–ò–ï –û–¢–ß–ï–¢–ê"
    
    {
        echo "–û—Ç—á–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–∏—Å–∫–æ–≤"
        echo "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: $(date)"
        echo "–°–∏—Å—Ç–µ–º–∞: $(uname -a)"
        echo ""
        echo "=== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –î–ò–°–ö–ê–• ==="
        df -h
        echo ""
        echo "=== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û INODES ==="
        df -i
        echo ""
        echo "=== –ë–õ–û–ß–ù–´–ï –£–°–¢–†–û–ô–°–¢–í–ê ==="
        lsblk 2>/dev/null || echo "lsblk –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω"
        echo ""
        echo "=== SMART –°–¢–ê–¢–£–° ==="
        for device in /dev/sd?; do
            if [ -b "$device" ]; then
                echo "--- $device ---"
                smartctl -H "$device" 2>/dev/null || echo "SMART –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω"
                echo ""
            fi
        done
    } > "$report_file"
    
    print_status "OK" "–û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: $report_file"
    echo "$report_file"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
full_analysis() {
    if ! check_dependencies; then
        exit 1
    fi
    
    print_header
    log "–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–∏—Å–∫–æ–≤"
    
    local disk_status=0
    local inode_status=0
    local smart_status=0
    
    get_disk_info; disk_status=$?
    analyze_filesystems_detailed
    check_inodes_detailed; inode_status=$?
    find_large_files_advanced 8
    check_smart_detailed; smart_status=$?
    check_disk_errors_detailed
    
    local report_file=$(generate_report)
    
    echo ""
    if [ $((disk_status + inode_status + smart_status)) -eq 0 ]; then
        print_status "OK" "–ê–Ω–∞–ª–∏–∑ –¥–∏—Å–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ"
    else
        print_status "WARN" "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç—á–µ—Ç"
    fi
    
    echo ""
    echo -e "${CYAN}üìù –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç: $report_file${NC}"
    echo -e "${CYAN}üìã –õ–æ–≥–∏: $LOG_FILE${NC}"
}

# –ö–æ–º–∞–Ω–¥—ã
cmd_monitor() {
    print_header
    monitor_io_detailed
}

cmd_clean() {
    print_header
    clean_temp_files_advanced
}

cmd_large_files() {
    local count=${2:-15}
    print_header
    find_large_files_advanced "$count"
}

cmd_info() {
    print_header
    get_disk_info
    check_inodes_detailed
    analyze_filesystems_detailed
}

cmd_smart() {
    print_header
    check_smart_detailed
}

cmd_report() {
    print_header
    generate_report
}

cmd_config() {
    print_header
    create_config
}

cmd_help() {
    print_header
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–ö–û–ú–ê–ù–î–ê] [–ü–ê–†–ê–ú–ï–¢–†–´]"
    echo ""
    echo "–ö–æ–º–∞–Ω–¥—ã:"
    echo "  monitor          - –¥–µ—Ç–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ I/O –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
    echo "  clean            - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"
    echo "  large-files [N]  - –ø–æ–∏—Å–∫ N —Å–∞–º—ã—Ö –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 15)"
    echo "  info             - –∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–∞—Ö"
    echo "  smart            - –¥–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ SMART —Å—Ç–∞—Ç—É—Å–∞"
    echo "  report           - —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"
    echo "  config           - —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"
    echo "  help             - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
    echo ""
    echo "–ë–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∏—Å–∫–æ–≤ –∏ —Ñ–∞–π–ª–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0                      # –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑"
    echo "  $0 monitor              # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
    echo "  $0 clean                # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"
    echo "  $0 large-files 20       # 20 —Å–∞–º—ã—Ö –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤"
    echo "  $0 smart                # –ü—Ä–æ–≤–µ—Ä–∫–∞ SMART —Å—Ç–∞—Ç—É—Å–∞"
    echo "  $0 report               # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞"
    echo "  $0 config               # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
case "${1:-}" in
    "monitor") cmd_monitor ;;
    "clean") cmd_clean ;;
    "large-files") cmd_large_files "$@" ;;
    "info") cmd_info ;;
    "smart") cmd_smart ;;
    "report") cmd_report ;;
    "config") cmd_config ;;
    "help"|"--help"|"-h") cmd_help ;;
    *) full_analysis ;;
esac
