#!/bin/bash
# üíæ –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏—Å–∫–æ–≤ –∏ —Ñ–∞–π–ª–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º
# –ê–≤—Ç–æ—Ä: g1if
# –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: https://github.com/g1if/system-admin-portfolio

set -e

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
LOG_DIR="$PROJECT_ROOT/logs"
LOG_FILE="$LOG_DIR/disk-manager.log"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
mkdir -p "$LOG_DIR" 2>/dev/null || true

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m' # No Color

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE" 2>/dev/null || true
}

print_header() {
    echo -e "${MAGENTA}"
    echo "üíæ ==========================================="
    echo "   –ú–ï–ù–ï–î–ñ–ï–† –î–ò–°–ö–û–í –ò –§–ê–ô–õ–û–í–´–• –°–ò–°–¢–ï–ú v1.0"
    echo "   $(date)"
    echo "   –ê–≤—Ç–æ—Ä: g1if"
    echo "==========================================="
    echo -e "${NC}"
}

print_section() {
    echo -e "${BLUE}üíø $1${NC}"
}

print_status() {
    local status=$1
    local message=$2
    case $status in
        "OK") echo -e "  ${GREEN}‚úÖ $message${NC}" ;;
        "WARN") echo -e "  ${YELLOW}‚ö†Ô∏è  $message${NC}" ;;
        "ERROR") echo -e "  ${RED}‚ùå $message${NC}" ;;
        "INFO") echo -e "  ${BLUE}‚ÑπÔ∏è  $message${NC}" ;;
    esac
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–∫–∞—Ö
get_disk_info() {
    print_section "–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –î–ò–°–ö–ê–•"
    
    echo "  üìä –û–±—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–æ–≤:"
    df -h | grep -E '^/dev/' | while read -r line; do
        local device=$(echo "$line" | awk '{print $1}')
        local size=$(echo "$line" | awk '{print $2}')
        local used=$(echo "$line" | awk '{print $3}')
        local avail=$(echo "$line" | awk '{print $4}')
        local use_percent=$(echo "$line" | awk '{print $5}')
        local mount=$(echo "$line" | awk '{print $6}')
        
        # –¶–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        local percent_num=$(echo "$use_percent" | tr -d '%')
        if [ "$percent_num" -gt 90 ]; then
            echo -e "    ${RED}üö® $device: $used/$size ($use_percent) –Ω–∞ $mount${NC}"
        elif [ "$percent_num" -gt 80 ]; then
            echo -e "    ${YELLOW}‚ö†Ô∏è  $device: $used/$size ($use_percent) –Ω–∞ $mount${NC}"
        else
            echo -e "    ${GREEN}‚úÖ $device: $used/$size ($use_percent) –Ω–∞ $mount${NC}"
        fi
    done
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª–æ—á–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
    echo ""
    echo "  üîß –ë–ª–æ—á–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:"
    if command -v lsblk >/dev/null 2>&1; then
        lsblk | head -10 | while read -r line; do
            echo "    üìü $line"
        done
    else
        echo "    ‚ÑπÔ∏è  –ö–æ–º–∞–Ω–¥–∞ lsblk –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    fi
}

# –ê–Ω–∞–ª–∏–∑ inodes
check_inodes() {
    print_section "–ê–ù–ê–õ–ò–ó INODES"
    
    echo "  üîç –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ inodes:"
    df -i | grep -E '^/dev/' | while read -r line; do
        local device=$(echo "$line" | awk '{print $1}')
        local total_inodes=$(echo "$line" | awk '{print $2}')
        local used_inodes=$(echo "$line" | awk '{print $3}')
        local free_inodes=$(echo "$line" | awk '{print $4}')
        local use_percent=$(echo "$line" | awk '{print $5}')
        local mount=$(echo "$line" | awk '{print $6}')
        
        local percent_num=$(echo "$use_percent" | tr -d '%')
        if [ "$percent_num" -gt 90 ]; then
            echo -e "    ${RED}üö® $device: $used_inodes/$total_inodes inodes ($use_percent) –Ω–∞ $mount${NC}"
        elif [ "$percent_num" -gt 80 ]; then
            echo -e "    ${YELLOW}‚ö†Ô∏è  $device: $used_inodes/$total_inodes inodes ($use_percent) –Ω–∞ $mount${NC}"
        else
            echo -e "    ${GREEN}‚úÖ $device: $used_inodes/$total_inodes inodes ($use_percent) –Ω–∞ $mount${NC}"
        fi
    done
}

# –ü–æ–∏—Å–∫ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
find_large_files() {
    local top_count=${1:-10}
    
    print_section "–ü–û–ò–°–ö –ë–û–õ–¨–®–ò–• –§–ê–ô–õ–û–í (–¢–û–ü-$top_count)"
    
    echo "  üîé –ü–æ–∏—Å–∫ —Å–∞–º—ã—Ö –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ..."
    
    # –ü–æ–∏—Å–∫ –≤ –∫–æ—Ä–Ω–µ–≤–æ–π —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
    local large_files=$(find / -type f -size +100M 2>/dev/null | xargs du -h 2>/dev/null | sort -rh | head -n "$top_count" 2>/dev/null || true)
    
    if [ -n "$large_files" ]; then
        echo "$large_files" | while read -r size file; do
            echo "    üìÅ $size - $file"
        done
    else
        echo "    ‚ÑπÔ∏è  –ë–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"
    fi
    
    # –ü–æ–∏—Å–∫ –≤ –¥–æ–º–∞—à–Ω–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    echo ""
    echo "  üè† –ë–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã –≤ –¥–æ–º–∞—à–Ω–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö:"
    local home_files=$(find /home -type f -size +50M 2>/dev/null | xargs du -h 2>/dev/null | sort -rh | head -n 5 2>/dev/null || true)
    
    if [ -n "$home_files" ]; then
        echo "$home_files" | while read -r size file; do
            echo "    üè† $size - $file"
        done
    else
        echo "    ‚ÑπÔ∏è  –ë–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã –≤ /home –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    fi
}

# –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –æ—à–∏–±–æ–∫ –¥–∏—Å–∫–∞
check_disk_errors() {
    print_section "–ü–†–û–í–ï–†–ö–ê –û–®–ò–ë–û–ö –î–ò–°–ö–ê"
    
    echo "  üîç –ü–æ–∏—Å–∫ –æ—à–∏–±–æ–∫ –¥–∏—Å–∫–∞ –≤ –ª–æ–≥–∞—Ö..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ dmesg –Ω–∞ –æ—à–∏–±–∫–∏ –¥–∏—Å–∫–∞
    local disk_errors=$(dmesg 2>/dev/null | grep -i "error.*disk\|disk.*error\|I/O error" | head -5 || true)
    
    if [ -n "$disk_errors" ]; then
        print_status "ERROR" "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –¥–∏—Å–∫–∞:"
        echo "$disk_errors" | while read -r error; do
            echo "    ‚ùå $error"
        done
    else
        print_status "OK" "–û—à–∏–±–∫–∏ –¥–∏—Å–∫–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ SMART —Å—Ç–∞—Ç—É—Å–∞
    echo ""
    echo "  üí° –ü—Ä–æ–≤–µ—Ä–∫–∞ SMART —Å—Ç–∞—Ç—É—Å–∞ –¥–∏—Å–∫–æ–≤..."
    if command -v smartctl >/dev/null 2>&1; then
        for device in /dev/sd?; do
            if [ -b "$device" ]; then
                local smart_status=$(smartctl -H "$device" 2>/dev/null | grep "SMART overall-health" || true)
                if [ -n "$smart_status" ]; then
                    if echo "$smart_status" | grep -q "PASSED"; then
                        echo "    ‚úÖ $device: SMART —Å—Ç–∞—Ç—É—Å –≤ –Ω–æ—Ä–º–µ"
                    else
                        echo -e "    ${RED}‚ùå $device: –ü—Ä–æ–±–ª–µ–º—ã —Å–æ SMART${NC}"
                    fi
                fi
            fi
        done
    else
        echo "    ‚ÑπÔ∏è  smartctl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        echo "    üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt install smartmontools"
    fi
}

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
monitor_io() {
    print_section "–ú–û–ù–ò–¢–û–†–ò–ù–ì I/O –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò"
    
    echo "  üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–∏—Å–∫–æ–≤ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã)..."
    echo -e "  ${CYAN}–î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C${NC}"
    
    if command -v iostat >/dev/null 2>&1; then
        iostat -dx 2
    elif command -v vmstat >/dev/null 2>&1; then
        vmstat 2
    else
        echo "    ‚ÑπÔ∏è  iostat/vmstat –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
        echo "    üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt install sysstat"
    fi
}

# –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
clean_temp_files() {
    print_section "–û–ß–ò–°–¢–ö–ê –í–†–ï–ú–ï–ù–ù–´–• –§–ê–ô–õ–û–í"
    
    local temp_dirs=(
        "/tmp"
        "/var/tmp"
        "$HOME/.cache"
        "/var/cache"
    )
    
    local total_freed=0
    
    for dir in "${temp_dirs[@]}"; do
        if [ -d "$dir" ]; then
            echo "  üßπ –û—á–∏—Å—Ç–∫–∞ $dir..."
            local size_before=$(du -s "$dir" 2>/dev/null | cut -f1 || echo 0)
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
            find "$dir" -type f -atime +7 -delete 2>/dev/null || true
            
            local size_after=$(du -s "$dir" 2>/dev/null | cut -f1 || echo 0)
            local freed=$((size_before - size_after))
            total_freed=$((total_freed + freed))
            
            echo "    üìä –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ: ${freed}K"
        fi
    done
    
    if [ "$total_freed" -gt 0 ]; then
        print_status "OK" "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ: ${total_freed}K"
    else
        print_status "INFO" "–ù–µ—á–µ–≥–æ –æ—á–∏—â–∞—Ç—å"
    fi
}

# –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º
analyze_filesystems() {
    print_section "–ê–ù–ê–õ–ò–ó –§–ê–ô–õ–û–í–´–• –°–ò–°–¢–ï–ú"
    
    echo "  üìã –¢–∏–ø—ã —Ñ–∞–π–ª–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º:"
    mount | grep -E '^/dev/' | awk '{print $5}' | sort | uniq -c | while read -r count fs_type; do
        echo "    üíæ $fs_type: $count —Ç–æ—á–µ–∫ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
    done
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ read-only —Ñ–∞–π–ª–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã
    echo ""
    echo "  üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º –Ω–∞ read-only:"
    local ro_systems=$(mount | grep "(ro," | wc -l)
    if [ "$ro_systems" -gt 0 ]; then
        print_status "WARN" "–ù–∞–π–¥–µ–Ω–æ read-only —Ñ–∞–π–ª–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º: $ro_systems"
        mount | grep "(ro," | while read -r line; do
            echo "    üîì $line"
        done
    else
        print_status "OK" "–ù–µ—Ç read-only —Ñ–∞–π–ª–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    print_header
    log "–ó–∞–ø—É—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∏—Å–∫–æ–≤"
    
    get_disk_info
    check_inodes
    find_large_files 8
    check_disk_errors
    analyze_filesystems
    
    echo ""
    echo -e "${GREEN}‚úÖ –ê–Ω–∞–ª–∏–∑ –¥–∏—Å–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω${NC}"
    log "–ê–Ω–∞–ª–∏–∑ –¥–∏—Å–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω"
    echo ""
    echo -e "${CYAN}üìù –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –≤ –ª–æ–≥–∞—Ö: $LOG_FILE${NC}"
}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
cmd_monitor() {
    print_header
    monitor_io
}

cmd_clean() {
    print_header
    clean_temp_files
}

cmd_large_files() {
    local count=${2:-15}
    print_header
    find_large_files "$count"
}

cmd_info() {
    print_header
    get_disk_info
    check_inodes
    analyze_filesystems
}

cmd_help() {
    echo -e "${CYAN}üíæ –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏—Å–∫–æ–≤ –∏ —Ñ–∞–π–ª–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º - –°–ø—Ä–∞–≤–∫–∞${NC}"
    echo ""
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–ö–û–ú–ê–ù–î–ê] [–ü–ê–†–ê–ú–ï–¢–†–´]"
    echo ""
    echo "–ö–æ–º–∞–Ω–¥—ã:"
    echo "  monitor          - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ I/O –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
    echo "  clean            - –æ—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"
    echo "  large-files [N]  - –ø–æ–∏—Å–∫ N —Å–∞–º—ã—Ö –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 15)"
    echo "  info             - –∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–∞—Ö"
    echo "  help             - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
    echo ""
    echo "–ë–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∏—Å–∫–æ–≤ –∏ —Ñ–∞–π–ª–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0                      # –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑"
    echo "  $0 monitor              # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
    echo "  $0 clean                # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"
    echo "  $0 large-files 20       # 20 —Å–∞–º—ã—Ö –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤"
    echo "  $0 info                 # –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
case "${1:-}" in
    "monitor") cmd_monitor ;;
    "clean") cmd_clean ;;
    "large-files") cmd_large_files "$@" ;;
    "info") cmd_info ;;
    "help") cmd_help ;;
    *) main ;;
esac
