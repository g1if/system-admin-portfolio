#!/bin/bash
# üîß –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Docker
# –ê–≤—Ç–æ—Ä: g1if
# –í–µ—Ä—Å–∏—è: 2.0
# –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: https://github.com/g1if/system-admin-portfolio

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
LOG_DIR="$PROJECT_ROOT/logs"
CONFIG_DIR="$PROJECT_ROOT/configs"
LOG_FILE="$LOG_DIR/docker-install.log"

mkdir -p "$LOG_DIR" "$CONFIG_DIR"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m'

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
log() {
    local level=$1
    local message=$2
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] [$level] $message" >> "$LOG_FILE"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
    log "SUCCESS" "$1"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
    log "ERROR" "$1"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
    log "WARNING" "$1"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
    log "INFO" "$1"
}

print_header() {
    echo -e "${CYAN}"
    echo "üê≥ ==========================================="
    echo "   –ü–†–û–î–í–ò–ù–£–¢–ê–Ø –£–°–¢–ê–ù–û–í–ö–ê DOCKER v2.0"
    echo "   $(date)"
    echo "   –ê–≤—Ç–æ—Ä: g1if"
    echo "==========================================="
    echo -e "${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    local missing=()
    
    for cmd in curl gpg apt-get systemctl; do
        if ! command -v "$cmd" &> /dev/null; then
            missing+=("$cmd")
        fi
    done
    
    if [ ${#missing[@]} -gt 0 ]; then
        print_error "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã: ${missing[*]}"
        return 1
    fi
    
    return 0
}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–∞
detect_distro() {
    if [ -f /etc/os-release ]; then
        source /etc/os-release
        DISTRO=$ID
        VERSION=$VERSION_ID
        CODENAME=$VERSION_CODENAME
    else
        print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤"
        exit 1
    fi
    
    print_info "–û–±–Ω–∞—Ä—É–∂–µ–Ω –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤: $DISTRO $VERSION ($CODENAME)"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–∞
check_distro_support() {
    case $DISTRO in
        ubuntu|debian)
            print_success "–î–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"
            ;;
        centos|rhel|fedora)
            print_warning "–î–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤ —Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏. –°–º. –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é Docker."
            exit 1
            ;;
        *)
            print_error "–î–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤ $DISTRO –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π"
            exit 1
            ;;
    esac
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
check_architecture() {
    local arch=$(uname -m)
    case $arch in
        x86_64)
            print_success "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ x86_64 –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"
            ;;
        aarch64|arm64)
            print_success "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ ARM64 –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"
            ;;
        *)
            print_error "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ $arch –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"
            exit 1
            ;;
    esac
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker
check_docker() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker..."
    
    if command -v docker >/dev/null 2>&1; then
        DOCKER_VERSION=$(docker --version | cut -d' ' -f3 | sed 's/,//')
        print_success "Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $DOCKER_VERSION"
        
        if docker info >/dev/null 2>&1; then
            print_success "Docker –¥–µ–º–æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç"
            return 0
        else
            print_warning "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ –¥–µ–º–æ–Ω –Ω–µ –∑–∞–ø—É—â–µ–Ω"
            return 1
        fi
    else
        print_info "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π Docker
check_old_docker() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π Docker..."
    
    local old_packages=("docker" "docker-engine" "docker.io" "containerd" "runc")
    local found_old=0
    
    for pkg in "${old_packages[@]}"; do
        if dpkg -l | grep -q "^ii.*$pkg"; then
            print_warning "–ù–∞–π–¥–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è: $pkg"
            found_old=1
        fi
    done
    
    if [ $found_old -eq 1 ]; then
        print_warning "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π"
        read -p "–£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ Docker? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            remove_old_docker
        fi
    fi
}

# –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π Docker
remove_old_docker() {
    print_info "–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π Docker..."
    
    sudo apt-get remove -y docker docker-engine docker.io containerd runc || true
    sudo apt-get purge -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin || true
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    sudo rm -rf /var/lib/docker
    sudo rm -rf /var/lib/containerd
    
    print_success "–°—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ Docker —É–¥–∞–ª–µ–Ω—ã"
}

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
update_system() {
    print_info "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã..."
    
    sudo apt-get update
    sudo apt-get upgrade -y
    
    print_success "–°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_dependencies() {
    print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    sudo apt-get install -y \
        apt-transport-https \
        ca-certificates \
        curl \
        gnupg \
        lsb-release \
        software-properties-common
    
    print_success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ GPG –∫–ª—é—á–∞ Docker
add_docker_gpg() {
    print_info "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ GPG –∫–ª—é—á–∞ Docker..."
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∫–ª—é—á–µ–π
    sudo install -m 0755 -d /etc/apt/keyrings
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á
    curl -fsSL https://download.docker.com/linux/$DISTRO/gpg | \
        sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞
    sudo chmod a+r /etc/apt/keyrings/docker.gpg
    
    print_success "GPG –∫–ª—é—á Docker –¥–æ–±–∞–≤–ª–µ–Ω"
}

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è Docker
add_docker_repo() {
    print_info "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è Docker..."
    
    local arch=$(dpkg --print-architecture)
    local repo_url="deb [arch=$arch signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/$DISTRO $CODENAME stable"
    
    echo "$repo_url" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–∫–µ—Ç—ã —Å –Ω–æ–≤—ã–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º
    sudo apt-get update
    
    print_success "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π Docker –¥–æ–±–∞–≤–ª–µ–Ω"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker
install_docker_packages() {
    print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker..."
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –ø–∞–∫–µ—Ç–æ–≤
    sudo apt-get install -y \
        docker-ce \
        docker-ce-cli \
        containerd.io \
        docker-buildx-plugin \
        docker-compose-plugin
    
    print_success "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Docker –¥–µ–º–æ–Ω–∞
configure_docker_daemon() {
    print_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Docker –¥–µ–º–æ–Ω–∞..."
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–µ–º–æ–Ω–∞
    sudo mkdir -p /etc/docker
    
    cat << EOF | sudo tee /etc/docker/daemon.json > /dev/null
{
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "10m",
    "max-file": "3"
  },
  "storage-driver": "overlay2",
  "live-restore": true,
  "metrics-addr": "127.0.0.1:9323"
}
EOF
    
    print_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Docker –¥–µ–º–æ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞"
}

# –ó–∞–ø—É—Å–∫ –∏ –≤–∫–ª—é—á–µ–Ω–∏–µ Docker
start_docker_service() {
    print_info "–ó–∞–ø—É—Å–∫ Docker —Å–ª—É–∂–±—ã..."
    
    sudo systemctl enable docker
    sudo systemctl start docker
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–ª—É–∂–±—ã
    sleep 3
    
    if sudo systemctl is-active --quiet docker; then
        print_success "Docker —Å–ª—É–∂–±–∞ –∑–∞–ø—É—â–µ–Ω–∞ –∏ –≤–∫–ª—é—á–µ–Ω–∞"
    else
        print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Docker —Å–ª—É–∂–±—É"
        exit 1
    fi
}

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É docker
add_user_to_docker_group() {
    print_info "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É docker..."
    
    if ! groups $USER | grep -q '\bdocker\b'; then
        sudo usermod -aG docker $USER
        print_success "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $USER –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É docker"
    else
        print_info "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –≥—Ä—É–ø–ø–µ docker"
    fi
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose (–æ—Ç–¥–µ–ª—å–Ω–∞—è —É—Ç–∏–ª–∏—Ç–∞)
install_docker_compose() {
    print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose..."
    
    local compose_version="v2.24.5"
    local arch=$(uname -m)
    
    case $arch in
        x86_64) arch="x86_64" ;;
        aarch64|arm64) arch="aarch64" ;;
        *) arch="x86_64" ;;
    esac
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –±–∏–Ω–∞—Ä–Ω–∏–∫
    sudo curl -L "https://github.com/docker/compose/releases/download/$compose_version/docker-compose-linux-$arch" \
        -o /usr/local/bin/docker-compose
    
    # –î–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    sudo chmod +x /usr/local/bin/docker-compose
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏–º–ª–∏–Ω–∫ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    sudo ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
    
    print_success "Docker Compose $compose_version —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
verify_installation() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é Docker
    if docker --version > /dev/null 2>&1; then
        local version=$(docker --version | cut -d' ' -f3 | sed 's/,//')
        print_success "Docker –≤–µ—Ä—Å–∏—è: $version"
    else
        print_error "Docker –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –¥–µ–º–æ–Ω–∞
    if docker info > /dev/null 2>&1; then
        print_success "Docker –¥–µ–º–æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    else
        print_error "–ü—Ä–æ–±–ª–µ–º–∞ —Å Docker –¥–µ–º–æ–Ω–æ–º"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker Compose
    if docker-compose --version > /dev/null 2>&1; then
        local compose_version=$(docker-compose --version | cut -d' ' -f3 | sed 's/,//')
        print_success "Docker Compose –≤–µ—Ä—Å–∏—è: $compose_version"
    else
        print_warning "Docker Compose –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    fi
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    print_info "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
    if sudo docker run --rm hello-world | grep -q "Hello from Docker"; then
        print_success "–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ"
    else
        print_warning "–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ –∞–ª–∏–∞—Å–æ–≤ –∏ –ø–æ–ª–µ–∑–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
create_aliases() {
    print_info "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–µ–∑–Ω—ã—Ö –∞–ª–∏–∞—Å–æ–≤..."
    
    local aliases_file="$HOME/.docker_aliases"
    
    cat > "$aliases_file" << 'EOF'
# Docker Aliases
alias dps='docker ps'
alias dpsa='docker ps -a'
alias di='docker images'
alias drm='docker rm'
alias drmi='docker rmi'
alias dstop='docker stop'
alias dstart='docker start'
alias drestart='docker restart'
alias dlogs='docker logs'
alias dexec='docker exec -it'
alias dcomp='docker-compose'
alias dcompose='docker-compose'

# Docker Cleanup
alias dclean='docker system prune -f'
alias dcleani='docker images -q | xargs docker rmi -f 2>/dev/null || true'
alias dcleanc='docker ps -aq | xargs docker rm -f 2>/dev/null || true'

# Docker Stats
alias dstats='docker stats --no-stream'
alias dtop='docker stats'

# Docker Network
alias dnet='docker network ls'
alias dvol='docker volume ls'

EOF
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ .bashrc –µ—Å–ª–∏ –µ—â–µ –Ω–µ—Ç
    if ! grep -q "docker_aliases" "$HOME/.bashrc"; then
        echo "source $HOME/.docker_aliases" >> "$HOME/.bashrc"
    fi
    
    print_success "–ê–ª–∏–∞—Å—ã —Å–æ–∑–¥–∞–Ω—ã: $aliases_file"
}

# –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
show_post_install_info() {
    print_header
    echo -e "${GREEN}üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!${NC}"
    echo ""
    echo -e "${YELLOW}üìã –í–∞–∂–Ω—ã–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:${NC}"
    echo "  1. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: ${CYAN}newgrp docker${NC}"
    echo "  2. –ò–ª–∏ –ø–µ—Ä–µ–∑–∞–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≥—Ä—É–ø–ø—ã"
    echo ""
    echo -e "${YELLOW}üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏:${NC}"
    echo "  ${CYAN}docker --version${NC}"
    echo "  ${CYAN}docker ps${NC}"
    echo "  ${CYAN}docker-compose --version${NC}"
    echo ""
    echo -e "${YELLOW}üê≥ –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:${NC}"
    echo "  ${CYAN}source ~/.docker_aliases${NC} - –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–ª–∏–∞—Å—ã"
    echo "  ${CYAN}dps${NC} - —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    echo "  ${CYAN}dcomp up -d${NC} - –∑–∞–ø—É—Å–∫ docker-compose"
    echo ""
    echo -e "${YELLOW}üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:${NC}"
    echo "  https://docs.docker.com/"
    echo "  https://docs.docker.com/compose/"
    echo ""
    echo -e "${CYAN}üìù –õ–æ–≥–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: $LOG_FILE${NC}"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
install_docker() {
    print_header
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
    if [ "$EUID" -eq 0 ]; then
        print_error "–ù–µ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å sudo. –°–∫—Ä–∏–ø—Ç —Å–∞–º –∑–∞–ø—Ä–æ—Å–∏—Ç –ø—Ä–∞–≤–∞ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ."
        exit 1
    fi
    
    log "INFO" "–ù–∞—á–∞–ª–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if ! check_dependencies; then
        exit 1
    fi
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–∞
    detect_distro
    check_distro_support
    check_architecture
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    if check_docker; then
        print_warning "Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É."
        verify_installation
        show_post_install_info
        return 0
    fi
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    echo ""
    print_warning "–ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –Ω–∞ —Å–∏—Å—Ç–µ–º—É $DISTRO $VERSION"
    read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞"
        exit 0
    fi
    
    # –ü—Ä–æ—Ü–µ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    check_old_docker
    update_system
    install_dependencies
    add_docker_gpg
    add_docker_repo
    install_docker_packages
    configure_docker_daemon
    start_docker_service
    add_user_to_docker_group
    install_docker_compose
    verify_installation
    create_aliases
    
    log "INFO" "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
    show_post_install_info
}

# –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è Docker
uninstall_docker() {
    print_header
    print_warning "–≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è —É–¥–∞–ª–∏—Ç Docker –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!"
    
    read -p "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å Docker? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_info "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
        exit 0
    fi
    
    print_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker —Å–ª—É–∂–±—ã..."
    sudo systemctl stop docker || true
    sudo systemctl disable docker || true
    
    print_info "–£–¥–∞–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤ Docker..."
    sudo apt-get purge -y \
        docker-ce \
        docker-ce-cli \
        containerd.io \
        docker-buildx-plugin \
        docker-compose-plugin \
        docker-ce-rootless-extras
    
    print_info "–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –∏ –¥–∞–Ω–Ω—ã—Ö..."
    sudo rm -rf /var/lib/docker
    sudo rm -rf /var/lib/containerd
    sudo rm -rf /etc/docker
    sudo rm -rf /etc/apt/sources.list.d/docker.list
    sudo rm -rf /etc/apt/keyrings/docker.gpg
    sudo rm -f /usr/local/bin/docker-compose
    sudo rm -f /usr/bin/docker-compose
    
    print_info "–û—á–∏—Å—Ç–∫–∞ –ø–∞–∫–µ—Ç–æ–≤..."
    sudo apt-get autoremove -y
    sudo apt-get autoclean
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≥—Ä—É–ø–ø—ã docker
    print_info "–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≥—Ä—É–ø–ø—ã docker..."
    sudo gpasswd -d $USER docker || true
    
    print_success "Docker –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã"
    log "INFO" "Docker —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã"
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã
check_system() {
    print_header
    detect_distro
    check_architecture
    check_docker
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–º–æ—â–∏
show_help() {
    print_header
    echo -e "${CYAN}–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–ö–û–ú–ê–ù–î–ê]${NC}"
    echo ""
    echo "–ö–æ–º–∞–Ω–¥—ã:"
    echo "  install     - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
    echo "  uninstall   - –ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ Docker"
    echo "  check       - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker"
    echo "  help        - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0 install     # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker"
    echo "  $0 check       # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã"
    echo "  $0 uninstall   # –£–¥–∞–ª–µ–Ω–∏–µ Docker"
    echo ""
    echo -e "${YELLOW}–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ù–µ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å sudo${NC}"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
case "${1:-}" in
    "install")
        install_docker
        ;;
    "uninstall")
        uninstall_docker
        ;;
    "check")
        check_system
        ;;
    "help"|"--help"|"-h")
        show_help
        ;;
    *)
        install_docker
        ;;
esac
