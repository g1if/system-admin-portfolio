#!/bin/bash
# üîí –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞—É–¥–∏—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
# –ê–≤—Ç–æ—Ä: g1if
# –í–µ—Ä—Å–∏—è: 2.0

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
LOG_DIR="$PROJECT_ROOT/logs"
CONFIG_DIR="$PROJECT_ROOT/configs"
REPORTS_DIR="$PROJECT_ROOT/reports"
CACHE_DIR="$PROJECT_ROOT/cache"

mkdir -p "$LOG_DIR" "$CONFIG_DIR" "$REPORTS_DIR" "$CACHE_DIR"

# –¶–≤–µ—Ç–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
PURPLE='\033[0;35m'
ORANGE='\033[0;33m'
NC='\033[0m'

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CONFIG_FILE="$CONFIG_DIR/security-audit.conf"
MAIN_LOG="$LOG_DIR/security-audit.log"
CACHE_FILE="$CACHE_DIR/security-cache.db"
SCORE_FILE="$CACHE_DIR/security-score.txt"
VULNERABILITY_DB="$CONFIG_DIR/vulnerability-patterns.conf"

# –§—É–Ω–∫—Ü–∏–∏ –≤—ã–≤–æ–¥–∞
print_header() {
    echo -e "${CYAN}"
    echo "üîí ==========================================="
    echo "   –ü–†–û–î–í–ò–ù–£–¢–´–ô –ê–£–î–ò–¢ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò v2.0"
    echo "   $(date)"
    echo "   –ê–≤—Ç–æ—Ä: g1if"
    echo "==========================================="
    echo -e "${NC}"
}

print_section() {
    echo -e "${BLUE}üîç $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_info() {
    echo -e "${PURPLE}‚ÑπÔ∏è  $1${NC}"
}

print_critical() {
    echo -e "${RED}üö® $1${NC}"
}

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
log_message() {
    local level=$1
    local message=$2
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] [$level] $message" >> "$MAIN_LOG"
}

# –°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
SECURITY_SCORE=100
CRITICAL_ISSUES=0
HIGH_ISSUES=0
MEDIUM_ISSUES=0
LOW_ISSUES=0

deduct_score() {
    local points=$1
    local level=$2
    local message=$3
    
    SECURITY_SCORE=$((SECURITY_SCORE - points))
    
    case $level in
        "CRITICAL")
            CRITICAL_ISSUES=$((CRITICAL_ISSUES + 1))
            print_critical "$message (-$points)"
            ;;
        "HIGH")
            HIGH_ISSUES=$((HIGH_ISSUES + 1))
            print_error "$message (-$points)"
            ;;
        "MEDIUM")
            MEDIUM_ISSUES=$((MEDIUM_ISSUES + 1))
            print_warning "$message (-$points)"
            ;;
        "LOW")
            LOW_ISSUES=$((LOW_ISSUES + 1))
            print_info "$message (-$points)"
            ;;
    esac
}

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
create_config() {
    cat > "$CONFIG_FILE" << 'EOF'
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞—É–¥–∏—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ v2.0

# –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
ENABLE_DEEP_SCAN=true
ENABLE_NETWORK_SCAN=true
ENABLE_FILE_INTEGRITY_CHECK=false
ENABLE_MALWARE_SCAN=false
SAVE_DETAILED_REPORTS=true
REPORT_RETENTION_DAYS=30

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
SCAN_USER_ACCOUNTS=true
SCAN_SERVICES=true
SCAN_NETWORK=true
SCAN_FILESYSTEM=true
SCAN_KERNEL=true
SCAN_LOGS=true

# –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
PASSWORD_MAX_DAYS=90
MIN_PASSWORD_LENGTH=8
SSH_PORT=22
ALLOW_ROOT_LOGIN=false
ALLOW_PASSWORD_AUTH=false

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
CHECK_SUID_FILES=true
CHECK_WRITABLE_DIRS=true
CHECK_HIDDEN_PROCESSES=true
CHECK_CRON_JOBS=true
CHECK_SERVICE_PERMISSIONS=true

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∏
CHECK_OPEN_PORTS=true
CHECK_LISTENING_SERVICES=true
CHECK_FIREWALL_STATUS=true
CHECK_NETWORK_HARDENING=true

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
ENABLE_CACHING=true
CACHE_TTL=3600
MAX_LOG_SIZE=10485760

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
CHECK_DOCKER_SECURITY=false
CHECK_WEB_SERVERS=true
CHECK_DATABASE_SECURITY=true
CHECK_SSL_CONFIGURATION=true

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–æ–≤
GENERATE_HTML_REPORT=false
SHOW_RECOMMENDATIONS=true
CALCULATE_SECURITY_SCORE=true
EXPORT_RESULTS=true
EOF

    # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
    cat > "$VULNERABILITY_DB" << 'EOF'
# –ü–∞—Ç—Ç–µ—Ä–Ω—ã —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

# –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏
CRITICAL_PATTERNS=(
    "password.*null"
    "root.*ALL.*NOPASSWD"
    "PermitRootLogin.*yes"
    "PasswordAuthentication.*yes"
    "Protocol.*1"
)

# –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
SUSPICIOUS_PATHS=(
    "/tmp/.*\.sh"
    "/var/tmp/.*\.elf"
    "/dev/shm/.*"
    ".*\.miner"
    ".*cryptocurrency.*"
)

# –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
SUSPICIOUS_PROCESSES=(
    "minerd"
    "cpuminer"
    "xmrig"
    "sqlmap"
    "john"
    "hydra"
    "nmap"
)

# –£—è–∑–≤–∏–º—ã–µ –≤–µ—Ä—Å–∏–∏ –ü–û
VULNERABLE_VERSIONS=(
    "openssh.*7\.[0-5]"
    "nginx.*1\.[0-9]\.[0-9]"
    "apache.*2\.[0-3]"
    "mysql.*5\.[0-6]"
    "php.*5\.[0-9]"
)

# –ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —è–¥—Ä–∞
INSECURE_KERNEL_SETTINGS=(
    "net.ipv4.ip_forward=1"
    "kernel.dmesg_restrict=0"
    "kernel.kptr_restrict=0"
    "net.ipv4.conf.all.accept_redirects=1"
)
EOF

    print_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã:"
    print_success "  $CONFIG_FILE"
    print_success "  $VULNERABILITY_DB"
}

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_config() {
    if [ -f "$CONFIG_FILE" ]; then
        source "$CONFIG_FILE"
        print_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞"
    else
        print_warning "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."
        ENABLE_DEEP_SCAN=true
        SCAN_USER_ACCOUNTS=true
        SCAN_SERVICES=true
        SCAN_NETWORK=true
        PASSWORD_MAX_DAYS=90
        MIN_PASSWORD_LENGTH=8
        ALLOW_ROOT_LOGIN=false
        ALLOW_PASSWORD_AUTH=false
        ENABLE_CACHING=true
        CACHE_TTL=3600
    fi

    if [ -f "$VULNERABILITY_DB" ]; then
        source "$VULNERABILITY_DB"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    local missing=()
    local optional_missing=()
    
    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
    for cmd in grep awk sed head tail ps; do
        if ! command -v "$cmd" &> /dev/null; then
            missing+=("$cmd")
        fi
    done
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    if ! command -v netstat &> /dev/null && ! command -v ss &> /dev/null; then
        optional_missing+=("net-tools")
    fi
    
    if ! command -v lsof &> /dev/null; then
        optional_missing+=("lsof")
    fi
    
    if [ "$ENABLE_MALWARE_SCAN" = "true" ] && ! command -v clamscan &> /dev/null; then
        optional_missing+=("clamav")
    fi
    
    if [ ${#missing[@]} -gt 0 ]; then
        print_error "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã: ${missing[*]}"
        echo "üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt install ${missing[*]}"
        return 1
    fi
    
    if [ ${#optional_missing[@]} -gt 0 ]; then
        print_warning "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã: ${optional_missing[*]}"
        echo "üí° –î–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt install ${optional_missing[*]}"
    fi
    
    return 0
}

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
cache_set() {
    local key=$1
    local value=$2
    local ttl=${3:-$CACHE_TTL}
    local expire=$(( $(date +%s) + ttl ))
    
    if [ "$ENABLE_CACHING" = "true" ]; then
        echo "$key|$value|$expire" >> "$CACHE_FILE"
    fi
}

cache_get() {
    local key=$1
    local current_time=$(date +%s)
    local temp_file=$(mktemp)
    
    if [ ! -f "$CACHE_FILE" ] || [ "$ENABLE_CACHING" != "true" ]; then
        return 1
    fi
    
    local found=0
    while IFS='|' read -r cache_key value expire; do
        if [ "$current_time" -lt "$expire" ]; then
            if [ "$cache_key" = "$key" ]; then
                echo "$value"
                found=1
            fi
            echo "$cache_key|$value|$expire" >> "$temp_file"
        fi
    done < "$CACHE_FILE"
    
    if [ -f "$temp_file" ]; then
        mv "$temp_file" "$CACHE_FILE"
    fi
    
    [ "$found" -eq 1 ] && return 0 || return 1
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º—ã
check_system_updates() {
    print_section "–ü–†–û–í–ï–†–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–ô –°–ò–°–¢–ï–ú–´"
    
    local updates_available=0
    local security_updates=0
    
    if command -v apt-get &> /dev/null; then
        echo "  üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π APT..."
        if ! sudo apt update > /dev/null 2>&1; then
            deduct_score 5 "MEDIUM" "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤ APT"
            return
        fi
        
        updates_available=$(apt list --upgradable 2>/dev/null | grep -c upgradable)
        if [ "$updates_available" -gt 1 ]; then
            updates_available=$((updates_available - 1))
            security_updates=$(apt list --upgradable 2>/dev/null | grep -i security | wc -l)
            
            deduct_score $((updates_available * 2)) "HIGH" "–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: $updates_available (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: $security_updates)"
            
            if [ "$security_updates" -gt 0 ]; then
                echo "  üìã –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:"
                apt list --upgradable 2>/dev/null | grep -i security | head -5 | while read -r pkg; do
                    echo "    üö® $pkg"
                done
            fi
        else
            print_success "–°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
        fi
    else
        print_warning "–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–∫–µ—Ç–æ–≤ APT –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—å–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–∏
check_password_policy() {
    if [ "$SCAN_USER_ACCOUNTS" != "true" ]; then
        return
    fi
    
    print_section "–†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–ê–†–û–õ–¨–ù–û–ô –ü–û–õ–ò–¢–ò–ö–ò"
    
    local issues_found=0
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ /etc/login.defs
    if [ -f /etc/login.defs ]; then
        local pass_max_days=$(grep "^PASS_MAX_DAYS" /etc/login.defs | awk '{print $2}' | head -1)
        local pass_min_days=$(grep "^PASS_MIN_DAYS" /etc/login.defs | awk '{print $2}' | head -1)
        local pass_warn_age=$(grep "^PASS_WARN_AGE" /etc/login.defs | awk '{print $2}' | head -1)
        local pass_min_len=$(grep "^PASS_MIN_LEN" /etc/login.defs | awk '{print $2}' | head -1)
        
        echo "  üìã –¢–µ–∫—É—â–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ –ø–∞—Ä–æ–ª–µ–π:"
        echo "    üîê –ú–∞–∫—Å. –¥–Ω–µ–π –ø–∞—Ä–æ–ª—è: ${pass_max_days:-–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ}"
        echo "    üîê –ú–∏–Ω. –¥–Ω–µ–π –ø–∞—Ä–æ–ª—è: ${pass_min_days:-–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ}"
        echo "    üîê –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∑–∞ –¥–Ω–µ–π: ${pass_warn_age:-–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ}"
        echo "    üîê –ú–∏–Ω. –¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è: ${pass_min_len:-–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ}"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–∞—Ä–æ–ª—è
        if [ -n "$pass_max_days" ] && [ "$pass_max_days" -gt "$PASSWORD_MAX_DAYS" ]; then
            deduct_score 10 "HIGH" "–°–ª–∏—à–∫–æ–º –¥–æ–ª–≥–∏–π —Å—Ä–æ–∫ –∂–∏–∑–Ω–∏ –ø–∞—Ä–æ–ª—è ($pass_max_days > $PASSWORD_MAX_DAYS)"
            issues_found=$((issues_found + 1))
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã –ø–∞—Ä–æ–ª—è
        if [ -z "$pass_min_len" ] || [ "$pass_min_len" -lt "$MIN_PASSWORD_LENGTH" ]; then
            deduct_score 5 "MEDIUM" "–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è"
            issues_found=$((issues_found + 1))
        fi
    else
        deduct_score 15 "HIGH" "–§–∞–π–ª login.defs –Ω–µ –Ω–∞–π–¥–µ–Ω"
        issues_found=$((issues_found + 1))
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞—Ä–æ–ª—è–º–∏
    echo ""
    echo "  üë• –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:"
    
    if [ -f /etc/shadow ] && [ -r /etc/shadow ]; then
        local empty_password_users=$(awk -F: '($2 == "" || $2 == "!" || $2 == "*") {print $1}' /etc/shadow 2>/dev/null | wc -l)
        local expired_password_users=$(awk -F: '($2 != "" && $2 != "!" && $2 != "*") {print $1}' /etc/shadow 2>/dev/null | while read user; do
            chage -l "$user" 2>/dev/null | grep -q "Password expired" && echo "$user"
        done | wc -l)
        
        if [ "$empty_password_users" -gt 0 ]; then
            deduct_score 20 "CRITICAL" "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø—É—Å—Ç—ã–º–∏ –ø–∞—Ä–æ–ª—è–º–∏: $empty_password_users"
            issues_found=$((issues_found + 1))
        fi
        
        if [ "$expired_password_users" -gt 0 ]; then
            deduct_score 10 "HIGH" "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–æ–ª—è–º–∏: $expired_password_users"
            issues_found=$((issues_found + 1))
        fi
        
        print_success "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø—É—Å—Ç—ã–º–∏ –ø–∞—Ä–æ–ª—è–º–∏: $empty_password_users"
        print_success "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–æ–ª—è–º–∏: $expired_password_users"
    else
        deduct_score 10 "MEDIUM" "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å /etc/shadow"
        issues_found=$((issues_found + 1))
    fi
    
    if [ "$issues_found" -eq 0 ]; then
        print_success "–ü–∞—Ä–æ–ª—å–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º"
    fi
}

# –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ SSH –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
check_ssh_security() {
    print_section "–£–ì–õ–£–ë–õ–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê SSH –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò"
    
    local sshd_config_locations=(
        "/etc/ssh/sshd_config"
        "/etc/sshd_config"
        "/usr/local/etc/ssh/sshd_config"
    )
    
    local sshd_config_found=""
    local ssh_issues=0
    
    for config in "${sshd_config_locations[@]}"; do
        if [ -f "$config" ]; then
            sshd_config_found="$config"
            break
        fi
    done
    
    if [ -n "$sshd_config_found" ]; then
        echo "  üìÅ –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: $sshd_config_found"
        
        # –ß—Ç–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ SSH
        local permit_root=$(grep -i "^PermitRootLogin" "$sshd_config_found" | tail -1 | awk '{print $2}' | tr -d ' ' | tr -d '#')
        local password_auth=$(grep -i "^PasswordAuthentication" "$sshd_config_found" | tail -1 | awk '{print $2}' | tr -d ' ' | tr -d '#')
        local protocol=$(grep -i "^Protocol" "$sshd_config_found" | tail -1 | awk '{print $2}' | tr -d ' ' | tr -d '#')
        local port=$(grep -i "^Port" "$sshd_config_found" | tail -1 | awk '{print $2}' | tr -d ' ' | tr -d '#')
        local max_auth_tries=$(grep -i "^MaxAuthTries" "$sshd_config_found" | tail -1 | awk '{print $2}' | tr -d ' ' | tr -d '#')
        
        echo "  ‚öôÔ∏è  –ü–∞—Ä–∞–º–µ—Ç—Ä—ã SSH:"
        echo "    üîë Root –¥–æ—Å—Ç—É–ø: ${permit_root:-yes}"
        echo "    üîë –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–∞—Ä–æ–ª–µ–º: ${password_auth:-yes}"
        echo "    üåê –ü—Ä–æ—Ç–æ–∫–æ–ª: ${protocol:-2}"
        echo "    üö™ –ü–æ—Ä—Ç: ${port:-22}"
        echo "    üîê –ú–∞–∫—Å. –ø–æ–ø—ã—Ç–æ–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${max_auth_tries:-6}"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if [ "${permit_root:-yes}" = "yes" ] && [ "$ALLOW_ROOT_LOGIN" = "false" ]; then
            deduct_score 15 "CRITICAL" "Root –¥–æ—Å—Ç—É–ø –ø–æ SSH —Ä–∞–∑—Ä–µ—à–µ–Ω"
            ssh_issues=$((ssh_issues + 1))
        fi
        
        if [ "${password_auth:-yes}" = "yes" ] && [ "$ALLOW_PASSWORD_AUTH" = "false" ]; then
            deduct_score 10 "HIGH" "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–∞—Ä–æ–ª–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∞"
            ssh_issues=$((ssh_issues + 1))
        fi
        
        if [ "${protocol:-2}" != "2" ]; then
            deduct_score 20 "CRITICAL" "–£—Å—Ç–∞—Ä–µ–≤—à–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ SSH: $protocol"
            ssh_issues=$((ssh_issues + 1))
        fi
        
        if [ "${port:-22}" = "22" ]; then
            deduct_score 5 "MEDIUM" "SSH —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º –ø–æ—Ä—Ç—É 22"
            ssh_issues=$((ssh_issues + 1))
        fi
        
        if [ "${max_auth_tries:-6}" -gt 3 ]; then
            deduct_score 3 "LOW" "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: $max_auth_tries"
            ssh_issues=$((ssh_issues + 1))
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ SSH
        if command -v sshd &> /dev/null; then
            local sshd_version=$(sshd -V 2>&1 | head -1 | grep -o '[0-9]\.[0-9]' | head -1)
            echo "    üì¶ –í–µ—Ä—Å–∏—è SSH: ${sshd_version:-–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ}"
            
            if [ -n "$sshd_version" ] && [ "${sshd_version%%.*}" -lt "7" ]; then
                deduct_score 10 "HIGH" "–£—Å—Ç–∞—Ä–µ–≤—à–∞—è –≤–µ—Ä—Å–∏—è SSH: $sshd_version"
                ssh_issues=$((ssh_issues + 1))
            fi
        fi
        
    else
        deduct_score 5 "MEDIUM" "SSH —Å–µ—Ä–≤–µ—Ä –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        ssh_issues=$((ssh_issues + 1))
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö SSH —Å–µ—Å—Å–∏–π
    echo ""
    echo "  üîç –ê–∫—Ç–∏–≤–Ω—ã–µ SSH —Å–µ—Å—Å–∏–∏:"
    local active_sessions=$(who | grep -c pts)
    local failed_attempts=$(grep -c "Failed password" /var/log/auth.log 2>/dev/null || echo "0")
    
    echo "    üíª –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏: $active_sessions"
    echo "    üö´ –ù–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫: $failed_attempts"
    
    if [ "$failed_attempts" -gt 100 ]; then
        deduct_score 10 "HIGH" "–ú–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞: $failed_attempts"
        ssh_issues=$((ssh_issues + 1))
    fi
    
    if [ "$ssh_issues" -eq 0 ]; then
        print_success "SSH –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–∞"
    fi
}

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤
check_open_ports() {
    if [ "$SCAN_NETWORK" != "true" ]; then
        return
    fi
    
    print_section "–†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ï–¢–ï–í–´–• –ü–û–†–¢–û–í"
    
    local open_ports=0
    local suspicious_ports=0
    
    # –°–ø–∏—Å–æ–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤
    local dangerous_ports=("23" "135" "137" "138" "139" "445" "1433" "1434" "3306" "5432" "5900" "3389")
    
    if command -v ss &> /dev/null; then
        echo "  üåê –°–ª—É—à–∞—é—â–∏–µ –ø–æ—Ä—Ç—ã (ss):"
        ss -tulpn 2>/dev/null | grep LISTEN | while read -r line; do
            local port=$(echo "$line" | awk '{print $5}' | rev | cut -d: -f1 | rev)
            local protocol=$(echo "$line" | awk '{print $1}')
            local service=$(echo "$line" | awk '{print $7}' | cut -d'"' -f2)
            
            if [ -n "$port" ] && [ "$port" != "Address" ]; then
                open_ports=$((open_ports + 1))
                local port_status="    üìç $protocol –ø–æ—Ä—Ç $port: ${service:-unknown}"
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ—Ä—Ç—ã
                if [[ " ${dangerous_ports[@]} " =~ " ${port} " ]]; then
                    port_status="$port_status ‚ö†Ô∏è"
                    suspicious_ports=$((suspicious_ports + 1))
                    deduct_score 5 "MEDIUM" "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∫—Ä—ã—Ç—ã–π –ø–æ—Ä—Ç: $port ($service)"
                fi
                
                echo "$port_status"
            fi
        done
    elif command -v netstat &> /dev/null; then
        echo "  üåê –°–ª—É—à–∞—é—â–∏–µ –ø–æ—Ä—Ç—ã (netstat):"
        netstat -tulpn 2>/dev/null | grep LISTEN | while read -r line; do
            local port=$(echo "$line" | awk '{print $4}' | rev | cut -d: -f1 | rev)
            local protocol=$(echo "$line" | awk '{print $1}')
            local service=$(echo "$line" | awk '{print $7}')
            
            if [ -n "$port" ] && [ "$port" != "Address" ]; then
                open_ports=$((open_ports + 1))
                local port_status="    üìç $protocol –ø–æ—Ä—Ç $port: ${service:-unknown}"
                
                if [[ " ${dangerous_ports[@]} " =~ " ${port} " ]]; then
                    port_status="$port_status ‚ö†Ô∏è"
                    suspicious_ports=$((suspicious_ports + 1))
                    deduct_score 5 "MEDIUM" "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∫—Ä—ã—Ç—ã–π –ø–æ—Ä—Ç: $port ($service)"
                fi
                
                echo "$port_status"
            fi
        done
    else
        deduct_score 5 "MEDIUM" "–ö–æ–º–∞–Ω–¥—ã ss/netstat –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    fi
    
    echo ""
    echo "  üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Ä—Ç–æ–≤:"
    echo "    üü¢ –í—Å–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤: $open_ports"
    echo "    üü° –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤: $suspicious_ports"
    
    if [ "$open_ports" -gt 50 ]; then
        deduct_score 5 "MEDIUM" "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤: $open_ports"
    fi
}

# –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ SUID/GUID —Ñ–∞–π–ª–æ–≤
check_suid_files() {
    if [ "$CHECK_SUID_FILES" != "true" ]; then
        return
    fi
    
    print_section "–ü–†–û–í–ï–†–ö–ê SUID/GUID –§–ê–ô–õ–û–í"
    
    echo "  üîç –ü–æ–∏—Å–∫ SUID/GUID —Ñ–∞–π–ª–æ–≤ (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è)..."
    
    local suid_files=$(find / -type f -perm -4000 2>/dev/null | grep -v "^/proc" | grep -v "^/sys" | grep -v "^/dev" | grep -v "^/run" | wc -l)
    local guid_files=$(find / -type f -perm -2000 2>/dev/null | grep -v "^/proc" | grep -v "^/sys" | grep -v "^/dev" | grep -v "^/run" | wc -l)
    
    echo "  üìä –ù–∞–π–¥–µ–Ω–æ SUID —Ñ–∞–π–ª–æ–≤: $suid_files"
    echo "  üìä –ù–∞–π–¥–µ–Ω–æ GUID —Ñ–∞–π–ª–æ–≤: $guid_files"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—ã—á–Ω—ã—Ö SUID —Ñ–∞–π–ª–æ–≤
    local unusual_suid=$(find / -type f -perm -4000 2>/dev/null | \
        grep -v "^/bin" | \
        grep -v "^/sbin" | \
        grep -v "^/usr/bin" | \
        grep -v "^/usr/sbin" | \
        grep -v "^/usr/local/bin" | \
        wc -l)
    
    if [ "$unusual_suid" -gt 0 ]; then
        deduct_score 15 "HIGH" "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–æ–±—ã—á–Ω—ã–µ SUID —Ñ–∞–π–ª—ã: $unusual_suid"
        echo "  üö® –ù–µ–æ–±—ã—á–Ω—ã–µ SUID —Ñ–∞–π–ª—ã:"
        find / -type f -perm -4000 2>/dev/null | \
            grep -v "^/bin" | \
            grep -v "^/sbin" | \
            grep -v "^/usr/bin" | \
            grep -v "^/usr/sbin" | \
            grep -v "^/usr/local/bin" | \
            head -10 | while read -r file; do
                echo "    ‚ùó $file"
            done
    fi
    
    if [ "$suid_files" -gt 100 ]; then
        deduct_score 10 "MEDIUM" "–ú–Ω–æ–≥–æ SUID —Ñ–∞–π–ª–æ–≤: $suid_files"
    elif [ "$suid_files" -eq 0 ]; then
        print_success "SUID —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    else
        print_success "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ SUID —Ñ–∞–π–ª–æ–≤ –≤ –Ω–æ—Ä–º–µ"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞
check_firewall() {
    if [ "$CHECK_FIREWALL_STATUS" != "true" ]; then
        return
    fi
    
    print_section "–ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´ –§–ê–ô–†–í–û–õ–ê"
    
    local firewall_active=0
    local firewall_rules=0
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ UFW
    if command -v ufw &> /dev/null; then
        local ufw_status=$(ufw status 2>/dev/null | head -1)
        if echo "$ufw_status" | grep -q "active"; then
            firewall_active=1
            firewall_rules=$(ufw status numbered 2>/dev/null | grep -c "^\[" || echo 0)
            print_success "UFW –≤–∫–ª—é—á–µ–Ω ($firewall_rules –ø—Ä–∞–≤–∏–ª)"
        else
            deduct_score 15 "HIGH" "UFW –æ—Ç–∫–ª—é—á–µ–Ω"
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ iptables
    if command -v iptables &> /dev/null; then
        local iptables_rules=$(iptables -L 2>/dev/null | grep -c "^ACCEPT\|^DROP\|^REJECT" || echo 0)
        if iptables -L INPUT 2>/dev/null | grep -q "policy DROP"; then
            if [ "$firewall_active" -eq 0 ]; then
                firewall_active=1
            fi
            firewall_rules=$((firewall_rules + iptables_rules))
            print_success "IPTables –Ω–∞—Å—Ç—Ä–æ–µ–Ω ($iptables_rules –ø—Ä–∞–≤–∏–ª)"
        else
            if [ "$firewall_active" -eq 0 ]; then
                deduct_score 20 "CRITICAL" "–§–∞–π—Ä–≤–æ–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (IPTables –ø–æ–ª–∏—Ç–∏–∫–∞ –Ω–µ DROP)"
            fi
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ firewalld
    if command -v firewall-cmd &> /dev/null; then
        if firewall-cmd --state 2>/dev/null | grep -q "running"; then
            firewall_active=1
            print_success "Firewalld –∞–∫—Ç–∏–≤–µ–Ω"
        else
            if [ "$firewall_active" -eq 0 ]; then
                deduct_score 15 "HIGH" "Firewalld –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω"
            fi
        fi
    fi
    
    if [ "$firewall_active" -eq 0 ]; then
        deduct_score 25 "CRITICAL" "–ê–∫—Ç–∏–≤–Ω—ã–π —Ñ–∞–π—Ä–≤–æ–ª –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω"
    fi
    
    echo "  üìä –°—Ç–∞—Ç—É—Å —Ñ–∞–π—Ä–≤–æ–ª–∞:"
    echo "    üõ°Ô∏è  –ê–∫—Ç–∏–≤–Ω—ã–π —Ñ–∞–π—Ä–≤–æ–ª: $( [ "$firewall_active" -eq 1 ] && echo "–î–∞" || echo "–ù–µ—Ç" )"
    echo "    üìã –í—Å–µ–≥–æ –ø—Ä–∞–≤–∏–ª: $firewall_rules"
}

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —è–¥—Ä–∞
check_kernel_security() {
    if [ "$SCAN_KERNEL" != "true" ]; then
        return
    fi
    
    print_section "–ü–†–û–í–ï–†–ö–ê –ù–ê–°–¢–†–û–ï–ö –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –Ø–î–†–ê"
    
    local kernel_checks=(
        "net.ipv4.ip_forward:0:MEDIUM:10"
        "kernel.dmesg_restrict:1:HIGH:15"
        "kernel.kptr_restrict:2:HIGH:15"
        "net.ipv4.conf.all.accept_redirects:0:MEDIUM:10"
        "net.ipv4.conf.all.send_redirects:0:MEDIUM:10"
        "net.ipv4.icmp_echo_ignore_broadcasts:1:MEDIUM:5"
        "net.ipv4.icmp_ignore_bogus_error_responses:1:MEDIUM:5"
        "net.ipv4.conf.all.rp_filter:1:MEDIUM:10"
        "net.ipv4.tcp_syncookies:1:HIGH:15"
        "kernel.yama.ptrace_scope:1:HIGH:15"
    )
    
    local secure_count=0
    local total_checks=${#kernel_checks[@]}
    
    echo "  ‚öôÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —è–¥—Ä–∞:"
    
    for check in "${kernel_checks[@]}"; do
        IFS=':' read -r key expected level points <<< "$check"
        local actual
        
        if actual=$(sysctl -n "$key" 2>/dev/null); then
            if [ "$actual" = "$expected" ]; then
                echo "    ‚úÖ $key = $actual"
                secure_count=$((secure_count + 1))
            else
                echo "    ‚ùå $key = $actual (–æ–∂–∏–¥–∞–µ—Ç—Å—è: $expected)"
                deduct_score "$points" "$level" "–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —è–¥—Ä–∞: $key = $actual"
            fi
        else
            echo "    ‚ùì $key: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
            deduct_score 5 "LOW" "–ü–∞—Ä–∞–º–µ—Ç—Ä —è–¥—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: $key"
        fi
    done
    
    local security_percent=$((secure_count * 100 / total_checks))
    echo ""
    echo "  üìä –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —è–¥—Ä–∞: $security_percent% ($secure_count/$total_checks)"
    
    if [ "$security_percent" -ge 80 ]; then
        print_success "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è–¥—Ä–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã"
    elif [ "$security_percent" -ge 60 ]; then
        print_warning "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —è–¥—Ä–∞ —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è"
    else
        print_error "–ú–Ω–æ–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —è–¥—Ä–∞ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
check_suspicious_processes() {
    if [ "$CHECK_HIDDEN_PROCESSES" != "true" ]; then
        return
    fi
    
    print_section "–ü–û–ò–°–ö –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–• –ü–†–û–¶–ï–°–°–û–í"
    
    local suspicious_found=0
    
    echo "  üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å..."
    
    for pattern in "${SUSPICIOUS_PROCESSES[@]}"; do
        local count=$(ps aux | grep -c "$pattern" | grep -v grep || true)
        if [ "$count" -gt 0 ]; then
            deduct_score 20 "CRITICAL" "–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å: $pattern"
            suspicious_found=$((suspicious_found + 1))
            echo "    üö® –ù–∞–π–¥–µ–Ω: $pattern"
        fi
    done
    
    # –ü–æ–∏—Å–∫ —Å–∫—Ä—ã—Ç—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    local hidden_processes=$(ps -eo pid,comm | grep -v "\[\|]$" | awk '{print $1}' | while read pid; do
        if [ ! -d "/proc/$pid" ]; then
            echo "$pid"
        fi
    done | wc -l)
    
    if [ "$hidden_processes" -gt 0 ]; then
        deduct_score 25 "CRITICAL" "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–∫—Ä—ã—Ç—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã: $hidden_processes"
        suspicious_found=$((suspicious_found + 1))
    fi
    
    if [ "$suspicious_found" -eq 0 ]; then
        print_success "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã"
    else
        echo "  üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: $suspicious_found"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ cron –∑–∞–¥–∞—á
check_cron_jobs() {
    if [ "$CHECK_CRON_JOBS" != "true" ]; then
        return
    fi
    
    print_section "–ü–†–û–í–ï–†–ö–ê CRON –ó–ê–î–ê–ß"
    
    local suspicious_cron=0
    
    echo "  ‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö cron –∑–∞–¥–∞—á..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ crontab
    if [ -f /etc/crontab ]; then
        local cron_jobs=$(grep -v "^#" /etc/crontab | grep -v "^$" | wc -l)
        echo "    üìã –°–∏—Å—Ç–µ–º–Ω—ã—Ö cron –∑–∞–¥–∞—á: $cron_jobs"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ cron –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    local cron_dirs=("/etc/cron.hourly" "/etc/cron.daily" "/etc/cron.weekly" "/etc/cron.monthly" "/etc/cron.d")
    for dir in "${cron_dirs[@]}"; do
        if [ -d "$dir" ]; then
            local files_count=$(find "$dir" -type f | wc -l)
            echo "    üìÅ $dir: $files_count —Ñ–∞–π–ª–æ–≤"
        fi
    done
    
    # –ü–æ–∏—Å–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö cron –∑–∞–¥–∞—á
    echo "  üîç –ü–æ–∏—Å–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö cron –∑–∞–¥–∞—á..."
    find /etc/cron* -type f 2>/dev/null | while read -r file; do
        if grep -q -E "(wget.*http|curl.*http|\.sh.*http)" "$file" 2>/dev/null; then
            deduct_score 15 "HIGH" "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è cron –∑–∞–¥–∞—á–∞: $file"
            suspicious_cron=$((suspicious_cron + 1))
            echo "    üö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π cron: $file"
        fi
    done
    
    if [ "$suspicious_cron" -eq 0 ]; then
        print_success "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ cron –∑–∞–¥–∞—á–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã"
    fi
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
generate_security_report() {
    local report_file="$REPORTS_DIR/security-audit-$(date +%Y%m%d_%H%M%S).txt"
    
    print_section "–ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò"
    
    print_header > "$report_file"
    echo "üìÖ –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: $(date)" >> "$report_file"
    echo "üíª –°–∏—Å—Ç–µ–º–∞: $(hostname) ($(uname -a))" >> "$report_file"
    echo "" >> "$report_file"
    
    # –°–≤–æ–¥–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    echo "üõ°Ô∏è  –°–í–û–î–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò" >> "$report_file"
    echo "======================" >> "$report_file"
    echo "–û–±—â–∏–π –±–∞–ª–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: $SECURITY_SCORE/100" >> "$report_file"
    echo "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º: $CRITICAL_ISSUES" >> "$report_file"
    echo "–í—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º: $HIGH_ISSUES" >> "$report_file"
    echo "–°—Ä–µ–¥–Ω–∏—Ö –ø—Ä–æ–±–ª–µ–º: $MEDIUM_ISSUES" >> "$report_file"
    echo "–ù–∏–∑–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º: $LOW_ISSUES" >> "$report_file"
    echo "" >> "$report_file"
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    check_system_updates >> "$report_file" 2>&1
    echo "" >> "$report_file"
    check_password_policy >> "$report_file" 2>&1
    echo "" >> "$report_file"
    check_ssh_security >> "$report_file" 2>&1
    echo "" >> "$report_file"
    check_open_ports >> "$report_file" 2>&1
    echo "" >> "$report_file"
    check_suid_files >> "$report_file" 2>&1
    echo "" >> "$report_file"
    check_firewall >> "$report_file" 2>&1
    echo "" >> "$report_file"
    check_kernel_security >> "$report_file" 2>&1
    echo "" >> "$report_file"
    check_suspicious_processes >> "$report_file" 2>&1
    echo "" >> "$report_file"
    check_cron_jobs >> "$report_file" 2>&1
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if [ "$SHOW_RECOMMENDATIONS" = "true" ]; then
        echo "üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò" >> "$report_file"
        echo "==============================" >> "$report_file"
        generate_recommendations >> "$report_file"
    fi
    
    print_success "–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: $report_file"
    echo "$SECURITY_SCORE" > "$SCORE_FILE"
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
generate_recommendations() {
    echo "  üîê –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:"
    echo "    ‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ —Å–∏—Å—Ç–µ–º—É –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
    echo "    ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–æ–∂–Ω—ã–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–∞—Ä–æ–ª–∏"
    echo "    ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –≥–¥–µ –≤–æ–∑–º–æ–∂–Ω–æ"
    echo "    ‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –¥–µ–ª–∞–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏"
    echo "    ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
    echo ""
    
    if [ "$SECURITY_SCORE" -lt 70 ]; then
        echo "  üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:" 
        echo "    ‚Ä¢ –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —É—Å—Ç—Ä–∞–Ω–∏—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏"
        echo "    ‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∞–π—Ä–≤–æ–ª"
        echo "    ‚Ä¢ –û—Ç–∫–ª—é—á–∏—Ç–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã"
        echo "    ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏—Å—Ç–µ–º—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–≥–æ –ü–û"
    fi
    
    if [ "$SECURITY_SCORE" -ge 85 ]; then
        echo "  ‚úÖ –°–∏—Å—Ç–µ–º–∞ –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    load_config
    
    case "${1:-}" in
        "quick")
            print_header
            check_system_updates
            check_ssh_security
            check_firewall
            check_open_ports
            ;;
        "deep")
            print_header
            check_system_updates
            check_password_policy
            check_ssh_security
            check_open_ports
            check_suid_files
            check_firewall
            check_kernel_security
            check_suspicious_processes
            check_cron_jobs
            ;;
        "report")
            print_header
            generate_security_report
            ;;
        "config")
            create_config
            ;;
        "score")
            if [ -f "$SCORE_FILE" ]; then
                local last_score=$(cat "$SCORE_FILE")
                echo "–ü–æ—Å–ª–µ–¥–Ω–∏–π –±–∞–ª–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: $last_score/100"
            else
                echo "–ë–∞–ª–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞—É–¥–∏—Ç —Å–Ω–∞—á–∞–ª–∞."
            fi
            ;;
        "help"|"--help"|"-h"|"")
            print_header
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–ö–û–ú–ê–ù–î–ê]"
            echo ""
            echo "–ö–æ–º–∞–Ω–¥—ã:"
            echo "  quick    - –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"
            echo "  deep     - –ì–ª—É–±–æ–∫–∏–π –∞—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
            echo "  report   - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"
            echo "  config   - –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"
            echo "  score    - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–∞–ª–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
            echo "  help     - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
            echo ""
            echo "–ü—Ä–∏–º–µ—Ä—ã:"
            echo "  $0 quick"
            echo "  $0 deep"
            echo "  $0 report"
            echo "  $0 score"
            ;;
        *)
            print_header
            check_system_updates
            check_password_policy
            check_ssh_security
            check_open_ports
            check_suid_files
            check_firewall
            check_kernel_security
            generate_security_report
            ;;
    esac
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
log_message "INFO" "–ó–∞–ø—É—Å–∫ –∞—É–¥–∏—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
main "$@"
log_message "INFO" "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞—É–¥–∏—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ë–∞–ª–ª: $SECURITY_SCORE"
