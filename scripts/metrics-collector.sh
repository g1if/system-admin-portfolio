#!/bin/bash
# üìà –°–±–æ—Ä—â–∏–∫ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
# –ê–≤—Ç–æ—Ä: g1if

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
LOG_DIR="$PROJECT_ROOT/logs"
CONFIG_DIR="$PROJECT_ROOT/configs"
METRICS_DIR="$PROJECT_ROOT/metrics"

mkdir -p "$LOG_DIR" "$CONFIG_DIR" "$METRICS_DIR"

# –¶–≤–µ—Ç–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
PURPLE='\033[0;35m'
NC='\033[0m'

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
THRESHOLD_CPU=80
THRESHOLD_MEM=80
THRESHOLD_DISK=85

# –§—É–Ω–∫—Ü–∏–∏ –≤—ã–≤–æ–¥–∞
print_header() {
    echo -e "${CYAN}"
    echo "üìà ==========================================="
    echo "   –°–ë–û–†–©–ò–ö –°–ò–°–¢–ï–ú–ù–´–• –ú–ï–¢–†–ò–ö v1.2"
    echo "   $(date)"
    echo "   –ê–≤—Ç–æ—Ä: g1if"
    echo "==========================================="
    echo -e "${NC}"
}

print_section() {
    echo -e "${BLUE}üìä $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

show_help() {
    print_header
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–ö–û–ú–ê–ù–î–ê]"
    echo ""
    echo "–ö–æ–º–∞–Ω–¥—ã:"
    echo "  overview   - –ö—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä –º–µ—Ç—Ä–∏–∫"
    echo "  detailed   - –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç"
    echo "  monitor    - –†–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–∫–∞–∫ top)"
    echo "  export     - –≠–∫—Å–ø–æ—Ä—Ç –º–µ—Ç—Ä–∏–∫ –≤ CSV"
    echo "  help       - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0 overview"
    echo "  $0 detailed"
    echo "  $0 monitor"
}

# –§—É–Ω–∫—Ü–∏–∏ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫
get_cpu_usage() {
    # –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ CPU
    local cpu_usage=$(top -bn1 | grep "Cpu(s)" | sed "s/.*, *\([0-9.]*\)%* id.*/\1/" | awk '{print 100 - $1}')
    echo "${cpu_usage%.*}"  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
}

get_memory_usage() {
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º free –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–º—è—Ç–∏
    local memory_info=$(free 2>/dev/null | grep Mem)
    if [ -z "$memory_info" ]; then
        echo "0"
        return
    fi
    
    local total_mem=$(echo $memory_info | awk '{print $2}')
    local available_mem=$(echo $memory_info | awk '{print $7}')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ total_mem –Ω–µ –ø—É—Å—Ç–æ–π –∏ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
    if [ -z "$total_mem" ] || ! [[ "$total_mem" =~ ^[0-9]+$ ]] || [ "$total_mem" -eq 0 ]; then
        echo "0"
        return
    fi
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
    if [ -n "$available_mem" ] && [[ "$available_mem" =~ ^[0-9]+$ ]]; then
        local used_mem=$((total_mem - available_mem))
        local usage_percent=$((used_mem * 100 / total_mem))
        echo "$usage_percent"
    else
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ä–∞—Å—á–µ—Ç –µ—Å–ª–∏ available –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        local used_mem=$(echo $memory_info | awk '{print $3}')
        local usage_percent=$((used_mem * 100 / total_mem))
        echo "$usage_percent"
    fi
}

get_disk_usage() {
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º df –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
    local disk_usage=$(df / | awk 'NR==2 {print $5}' | sed 's/%//')
    echo "$disk_usage"
}

get_network_usage() {
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ç–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    local interface=$(ip route | grep default | awk '{print $5}' | head -1)
    if [ -z "$interface" ]; then
        echo "0 0"
        return
    fi
    
    # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    local rx_bytes=$(cat /sys/class/net/$interface/statistics/rx_bytes 2>/dev/null || echo "0")
    local tx_bytes=$(cat /sys/class/net/$interface/statistics/tx_bytes 2>/dev/null || echo "0")
    
    echo "$rx_bytes $tx_bytes"
}

get_temperature() {
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É —Å —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤
    if [ -f "/sys/class/thermal/thermal_zone0/temp" ]; then
        local temp=$(cat /sys/class/thermal/thermal_zone0/temp)
        temp=$((temp / 1000))
        echo "$temp"
    elif command -v sensors >/dev/null 2>&1; then
        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Ü–µ–ª—É—é —á–∞—Å—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        local temp=$(sensors | grep -oP 'Core 0:\s+\+\K\d+\.\d' | head -1 | cut -d. -f1)
        echo "$temp"
    else
        echo "N/A"
    fi
}

get_uptime() {
    # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
    local uptime_seconds=$(awk '{print $1}' /proc/uptime)
    local days=$(( ${uptime_seconds%.*} / 86400 ))
    local hours=$(( (${uptime_seconds%.*} % 86400) / 3600 ))
    
    if [ $days -gt 0 ]; then
        echo "${days}d ${hours}h"
    else
        echo "${hours}h"
    fi
}

get_load_average() {
    # –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    cat /proc/loadavg | awk '{print $1, $2, $3}'
}

# –§—É–Ω–∫—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤
overview_report() {
    print_section "–û–ë–ó–û–† –°–ò–°–¢–ï–ú–ù–´–• –ú–ï–¢–†–ò–ö"
    
    local cpu_usage=$(get_cpu_usage)
    local mem_usage=$(get_memory_usage)
    local disk_usage=$(get_disk_usage)
    local temp=$(get_temperature)
    local uptime=$(get_uptime)
    local load_avg=$(get_load_average)
    
    echo "  üñ•Ô∏è  –°–∏—Å—Ç–µ–º–∞:"
    echo "    ‚è±Ô∏è  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: $uptime"
    echo "    üìä –ù–∞–≥—Ä—É–∑–∫–∞: $load_avg"
    echo ""
    
    echo "  üìà –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:"
    echo "    üíª CPU: ${cpu_usage}%"
    if [ "$cpu_usage" -gt "$THRESHOLD_CPU" ] 2>/dev/null; then
        print_warning "    ‚ö†Ô∏è  –í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU!"
    fi
    
    echo "    üß† –ü–∞–º—è—Ç—å: ${mem_usage}%"
    if [ "$mem_usage" -gt "$THRESHOLD_MEM" ] 2>/dev/null; then
        print_warning "    ‚ö†Ô∏è  –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏!"
    fi
    
    echo "    üíæ –î–∏—Å–∫: ${disk_usage}%"
    if [ "$disk_usage" -gt "$THRESHOLD_DISK" ] 2>/dev/null; then
        print_warning "    ‚ö†Ô∏è  –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞!"
    fi
    
    if [ "$temp" != "N/A" ]; then
        echo "    üå°Ô∏è  –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${temp}¬∞C"
    fi
    
    # –°–µ—Ç–µ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    local network_usage=($(get_network_usage))
    local rx_mb=$(( ${network_usage[0]} / 1024 / 1024 ))
    local tx_mb=$(( ${network_usage[1]} / 1024 / 1024 ))
    
    echo ""
    echo "  üåê –°–µ—Ç–µ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:"
    echo "    üì• –í—Ö–æ–¥—è—â–∏–π: ${rx_mb} MB"
    echo "    üì§ –ò—Å—Ö–æ–¥—è—â–∏–π: ${tx_mb} MB"
}

detailed_report() {
    print_section "–ü–û–î–†–û–ë–ù–´–ô –û–¢–ß–ï–¢ –û –ú–ï–¢–†–ò–ö–ê–•"
    
    # CPU –ø–æ–¥—Ä–æ–±–Ω–æ
    echo "  üíª –ü–†–û–¶–ï–°–°–û–†:"
    if command -v lscpu >/dev/null 2>&1; then
        local cpu_model=$(lscpu | grep "Model name" | cut -d: -f2 | sed 's/^ *//')
        local cpu_cores=$(lscpu | grep "^CPU(s):" | awk '{print $2}')
        echo "    –ú–æ–¥–µ–ª—å: $cpu_model"
        echo "    –Ø–¥–µ—Ä: $cpu_cores"
    else
        echo "    –Ø–¥–µ—Ä: $(nproc)"
    fi
    local cpu_usage=$(get_cpu_usage)
    echo "    –ó–∞–≥—Ä—É–∑–∫–∞: ${cpu_usage}%"
    
    # –ü–∞–º—è—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ
    echo ""
    echo "  üß† –ü–ê–ú–Ø–¢–¨:"
    free -h | head -2 | while read line; do
        echo "    $line"
    done
    
    # –î–∏—Å–∫–∏ –ø–æ–¥—Ä–æ–±–Ω–æ
    echo ""
    echo "  üíæ –î–ò–°–ö–ò:"
    df -h | head -10 | while read line; do
        echo "    $line"
    done
    
    # –°–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ
    echo ""
    echo "  üì° –°–ï–¢–¨:"
    ip -br addr show | head -10 | while read line; do
        echo "    $line"
    done
    
    # –ü—Ä–æ—Ü–µ—Å—Å—ã
    echo ""
    echo "  üîÑ –ü–†–û–¶–ï–°–°–´ (—Ç–æ–ø-5 –ø–æ CPU):"
    ps aux --sort=-%cpu | head -6 | while read line; do
        echo "    $line"
    done
}

monitor_mode() {
    print_section "–†–ï–ñ–ò–ú –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê"
    echo "  –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"
    echo "  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã..."
    echo ""
    
    local counter=0
    while true; do
        counter=$((counter + 1))
        clear
        print_header
        echo "  üîÑ –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: $counter"
        echo "  ==================================="
        overview_report
        echo ""
        echo "  ‚åõ –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã..."
        sleep 2
    done
}

export_metrics() {
    local timestamp=$(date +%Y-%m-%d_%H-%M-%S)
    local csv_file="$METRICS_DIR/metrics_$timestamp.csv"
    
    local cpu_usage=$(get_cpu_usage)
    local mem_usage=$(get_memory_usage)
    local disk_usage=$(get_disk_usage)
    local temp=$(get_temperature)
    local network_usage=($(get_network_usage))
    
    # –°–æ–∑–¥–∞–µ–º CSV —Ñ–∞–π–ª —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
    echo "timestamp,cpu_usage,memory_usage,disk_usage,temperature,rx_bytes,tx_bytes" > "$csv_file"
    echo "$(date +%Y-%m-%d\ %H:%M:%S),$cpu_usage,$mem_usage,$disk_usage,$temp,${network_usage[0]},${network_usage[1]}" >> "$csv_file"
    
    print_success "–ú–µ—Ç—Ä–∏–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤: $csv_file"
    echo "  üìä –î–∞–Ω–Ω—ã–µ: CPU=${cpu_usage}%, RAM=${mem_usage}%, Disk=${disk_usage}%"
}

main() {
    case "${1:-}" in
        "overview")
            print_header
            overview_report
            ;;
        "detailed")
            print_header
            detailed_report
            ;;
        "monitor")
            print_header
            monitor_mode
            ;;
        "export")
            print_header
            export_metrics
            ;;
        "help"|"--help"|"-h"|"")
            show_help
            ;;
        *)
            print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $1"
            show_help
            exit 1
            ;;
    esac
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —É—Ç–∏–ª–∏—Ç
check_dependencies() {
    local deps=("free" "df" "ip")
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" >/dev/null 2>&1; then
            print_warning "–£—Ç–∏–ª–∏—Ç–∞ $dep –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ."
        fi
    done
}

check_dependencies
main "$@"
