#!/bin/bash
# üåê –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–µ—Ç–∏ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º, –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é
# –ê–≤—Ç–æ—Ä: g1if
# –í–µ—Ä—Å–∏—è: 2.0
# –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: https://github.com/g1if/system-admin-portfolio

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
LOG_DIR="$PROJECT_ROOT/logs"
CONFIG_DIR="$PROJECT_ROOT/configs"
REPORTS_DIR="$PROJECT_ROOT/reports"
CACHE_DIR="$PROJECT_ROOT/cache"

mkdir -p "$LOG_DIR" "$CONFIG_DIR" "$REPORTS_DIR" "$CACHE_DIR"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
PURPLE='\033[0;35m'
ORANGE='\033[0;33m'
NC='\033[0m'

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CONFIG_FILE="$CONFIG_DIR/network-analyzer.conf"
MAIN_LOG="$LOG_DIR/network-analyzer.log"
CACHE_FILE="$CACHE_DIR/network-cache.db"
REPORT_FILE="$REPORTS_DIR/network-report-$(date +%Y%m%d_%H%M%S).txt"

# –§—É–Ω–∫—Ü–∏–∏ –≤—ã–≤–æ–¥–∞
print_header() {
    echo -e "${CYAN}"
    echo "üåê ==========================================="
    echo "   –ü–†–û–î–í–ò–ù–£–¢–´–ô –ê–ù–ê–õ–ò–ó–ê–¢–û–† –°–ï–¢–ò v2.0"
    echo "   $(date)"
    echo "   –ê–≤—Ç–æ—Ä: g1if"
    echo "==========================================="
    echo -e "${NC}"
}

print_section() {
    echo -e "${BLUE}üì° $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_info() {
    echo -e "${PURPLE}‚ÑπÔ∏è  $1${NC}"
}

print_debug() {
    echo -e "${ORANGE}üêõ $1${NC}"
}

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
log_message() {
    local level=$1
    local message=$2
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] [$level] $message" >> "$MAIN_LOG"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
create_config() {
    cat > "$CONFIG_FILE" << 'EOF'
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ç–µ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ v2.0

# –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
SCAN_INTERVAL=5
ENABLE_AUTO_DISCOVERY=true
SAVE_REPORTS=true
REPORT_RETENTION_DAYS=7

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ä—Ç–æ–≤
PORT_SCAN_ENABLED=true
PORT_SCAN_METHOD="nc"  # nc, telnet, nmap
SCAN_TIMEOUT=2
DEFAULT_PORTS="21,22,23,25,53,80,110,143,443,465,587,993,995,3389,5432,6379,27017"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
MONITOR_INTERVAL=3
MONITOR_PACKET_LOSS=true
MONITOR_BANDWIDTH=true
MONITOR_LATENCY=true

# –¶–µ–ª–µ–≤—ã–µ —Ö–æ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
TEST_HOSTS=(
    "8.8.8.8"           # Google DNS
    "1.1.1.1"           # Cloudflare DNS
    "google.com"
    "github.com"
    "localhost"
)

# –°–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –ø—É—Å—Ç–æ)
MONITOR_INTERFACES=""

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
CHECK_FIREWALL=true
CHECK_OPEN_PORTS=true
DETECT_SCANS=true

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
ENABLE_CACHING=true
CACHE_TTL=300
MAX_LOG_SIZE=10485760

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
ENABLE_SPEED_TEST=false
ENABLE_NETSTAT_ANALYSIS=true
ENABLE_ROUTING_ANALYSIS=true
ENABLE_DNS_ANALYSIS=true
EOF
    print_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: $CONFIG_FILE"
}

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_config() {
    if [ -f "$CONFIG_FILE" ]; then
        source "$CONFIG_FILE"
        print_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞"
    else
        print_warning "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."
        SCAN_INTERVAL=5
        PORT_SCAN_ENABLED=true
        DEFAULT_PORTS="21,22,23,25,53,80,110,143,443,465,587,993,995,3389"
        TEST_HOSTS=("8.8.8.8" "google.com" "localhost")
        ENABLE_CACHING=true
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    local missing=()
    local optional_missing=()
    
    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
    for cmd in ip ping grep awk sed; do
        if ! command -v "$cmd" &> /dev/null; then
            missing+=("$cmd")
        fi
    done
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
    if ! command -v nc &> /dev/null; then
        optional_missing+=("netcat")
    fi
    
    if ! command -v dig &> /dev/null; then
        optional_missing+=("dnsutils")
    fi
    
    if ! command -v nmap &> /dev/null; then
        optional_missing+=("nmap")
    fi
    
    if ! command -v speedtest-cli &> /dev/null && [ "$ENABLE_SPEED_TEST" = "true" ]; then
        optional_missing+=("speedtest-cli")
    fi
    
    if [ ${#missing[@]} -gt 0 ]; then
        print_error "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã: ${missing[*]}"
        echo "üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt install ${missing[*]}"
        return 1
    fi
    
    if [ ${#optional_missing[@]} -gt 0 ]; then
        print_warning "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã: ${optional_missing[*]}"
        echo "üí° –î–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ:"
        echo "   sudo apt install ${optional_missing[*]}"
    fi
    
    return 0
}

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
cache_set() {
    local key=$1
    local value=$2
    local ttl=${3:-$CACHE_TTL}
    local expire=$(( $(date +%s) + ttl ))
    
    if [ "$ENABLE_CACHING" = "true" ]; then
        echo "$key|$value|$expire" >> "$CACHE_FILE"
    fi
}

cache_get() {
    local key=$1
    local current_time=$(date +%s)
    local temp_file=$(mktemp)
    
    if [ ! -f "$CACHE_FILE" ] || [ "$ENABLE_CACHING" != "true" ]; then
        return 1
    fi
    
    local found=0
    while IFS='|' read -r cache_key value expire; do
        if [ "$current_time" -lt "$expire" ]; then
            if [ "$cache_key" = "$key" ]; then
                echo "$value"
                found=1
            fi
            echo "$cache_key|$value|$expire" >> "$temp_file"
        fi
    done < "$CACHE_FILE"
    
    if [ -f "$temp_file" ]; then
        mv "$temp_file" "$CACHE_FILE"
    fi
    
    [ "$found" -eq 1 ] && return 0 || return 1
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
get_network_interfaces() {
    local cache_key="network_interfaces"
    local cached_value
    
    if cached_value=$(cache_get "$cache_key"); then
        echo "$cached_value"
        return
    fi
    
    local interfaces=()
    
    if command -v ip &> /dev/null; then
        interfaces=($(ip link show 2>/dev/null | grep -E "^[0-9]+:" | grep -v "LOOPBACK" | awk -F: '{print $2}' | tr -d ' ' | sed 's/@.*//'))
    elif command -v ifconfig &> /dev/null; then
        interfaces=($(ifconfig -a 2>/dev/null | grep -E "^[a-z]" | awk '{print $1}' | tr -d ':'))
    fi
    
    local result=$(printf '%s ' "${interfaces[@]}")
    cache_set "$cache_key" "$result" 3600
    echo "$result"
}

# –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
analyze_interface_details() {
    local iface=$1
    print_section "–î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ò–ù–¢–ï–†–§–ï–ô–°–ê: $iface"
    
    if ! ip link show "$iface" &>/dev/null; then
        print_error "–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å $iface –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        return
    fi
    
    # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    echo "  üîå –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:"
    local mac_addr=$(ip link show "$iface" 2>/dev/null | grep "link/ether" | awk '{print $2}')
    local status=$(ip link show "$iface" 2>/dev/null | grep -o "state [A-Z]*" | awk '{print $2}')
    local mtu=$(ip link show "$iface" 2>/dev/null | grep -o "mtu [0-9]*" | awk '{print $2}')
    
    echo "    üîë MAC –∞–¥—Ä–µ—Å: ${mac_addr:-–Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω}"
    echo "    üìä –°—Ç–∞—Ç—É—Å: $status"
    echo "    üè∑Ô∏è  MTU: ${mtu:-–Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω}"
    
    # IP –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    echo "  üìç IP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:"
    ip addr show "$iface" 2>/dev/null | grep "inet " | while read -r line; do
        local ip_info=$(echo "$line" | awk '{print $2}')
        local scope=$(echo "$line" | grep -o "scope [a-z]*" | awk '{print $2}' || echo "global")
        echo "    üåê $ip_info (scope: $scope)"
    done
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    echo "  üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"
    local rx_bytes=$(cat "/sys/class/net/$iface/statistics/rx_bytes" 2>/dev/null || echo "0")
    local tx_bytes=$(cat "/sys/class/net/$iface/statistics/tx_bytes" 2>/dev/null || echo "0")
    local rx_packets=$(cat "/sys/class/net/$iface/statistics/rx_packets" 2>/dev/null || echo "0")
    local tx_packets=$(cat "/sys/class/net/$iface/statistics/tx_packets" 2>/dev/null || echo "0")
    
    echo "    üì• –ü—Ä–∏–Ω—è—Ç–æ: $(numfmt --to=iec $rx_bytes) ($rx_packets –ø–∞–∫–µ—Ç–æ–≤)"
    echo "    üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: $(numfmt --to=iec $tx_bytes) ($tx_packets –ø–∞–∫–µ—Ç–æ–≤)"
    
    # –°–∫–æ—Ä–æ—Å—Ç—å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥)
    if [ "$MONITOR_BANDWIDTH" = "true" ]; then
        local rx_speed=$(get_interface_speed "$iface" "rx")
        local tx_speed=$(get_interface_speed "$iface" "tx")
        echo "    üöÄ –¢–µ–∫—É—â–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: RX ${rx_speed} KB/s, TX ${tx_speed} KB/s"
    fi
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
get_interface_speed() {
    local iface=$1
    local direction=$2
    
    local stat_file="/sys/class/net/$iface/statistics/${direction}_bytes"
    if [ ! -f "$stat_file" ]; then
        echo "0"
        return
    fi
    
    local current_bytes=$(cat "$stat_file")
    local cache_key="${iface}_${direction}_bytes"
    local last_bytes=$(cache_get "$cache_key" || echo "$current_bytes")
    
    cache_set "$cache_key" "$current_bytes" 2
    
    local bytes_diff=$((current_bytes - last_bytes))
    local speed_kbs=$((bytes_diff / 1024))
    
    echo "$speed_kbs"
}

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
analyze_interfaces() {
    print_section "–†–ê–°–®–ò–†–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –°–ï–¢–ï–í–´–• –ò–ù–¢–ï–†–§–ï–ô–°–û–í"
    
    local interfaces=($(get_network_interfaces))
    
    if [ ${#interfaces[@]} -eq 0 ]; then
        print_error "–°–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        return
    fi
    
    echo "  üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤: ${#interfaces[@]}"
    echo ""
    
    for iface in "${interfaces[@]}"; do
        analyze_interface_details "$iface"
        echo ""
    done
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    local default_interface=$(ip route | grep default | awk '{print $5}' | head -1)
    if [ -n "$default_interface" ]; then
        print_success "–û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: $default_interface"
    fi
}

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
analyze_routing() {
    if [ "$ENABLE_ROUTING_ANALYSIS" != "true" ]; then
        return
    fi
    
    print_section "–†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –ú–ê–†–®–†–£–¢–ò–ó–ê–¶–ò–ò"
    
    if command -v ip &> /dev/null; then
        echo "  üåç –ü–æ–ª–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏:"
        ip route show 2>/dev/null | while read -r route; do
            if [[ $route == default* ]]; then
                echo -e "    üéØ ${GREEN}$route${NC}"
            elif [[ $route == *"scope link"* ]]; then
                echo "    üîó $route"
            else
                echo "    üõ£Ô∏è  $route"
            fi
        done
        
        echo ""
        echo "  üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏:"
        local total_routes=$(ip route show 2>/dev/null | wc -l)
        local default_routes=$(ip route show 2>/dev/null | grep -c "default")
        echo "    üìà –í—Å–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤: $total_routes"
        echo "    üéØ –ú–∞—Ä—à—Ä—É—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: $default_routes"
        
    else
        print_warning "–ö–æ–º–∞–Ω–¥–∞ 'ip' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏"
    fi
}

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π DNS –∞–Ω–∞–ª–∏–∑
analyze_dns() {
    if [ "$ENABLE_DNS_ANALYSIS" != "true" ]; then
        return
    fi
    
    print_section "–†–ê–°–®–ò–†–ï–ù–ù–´–ô DNS –ê–ù–ê–õ–ò–ó"
    
    # DNS —Å–µ—Ä–≤–µ—Ä—ã
    echo "  üîç –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è DNS:"
    if [ -f /etc/resolv.conf ]; then
        local dns_servers=$(grep -E "^nameserver" /etc/resolv.conf 2>/dev/null | awk '{print $2}' | tr '\n' ' ')
        if [ -n "$dns_servers" ]; then
            echo "    üñ•Ô∏è  DNS —Å–µ—Ä–≤–µ—Ä—ã: $dns_servers"
        else
            print_warning "    DNS —Å–µ—Ä–≤–µ—Ä—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ /etc/resolv.conf"
        fi
    else
        print_error "    –§–∞–π–ª /etc/resolv.conf –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    echo ""
    echo "  üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è:"
    
    local test_domains=("google.com" "github.com" "localhost")
    for domain in "${test_domains[@]}"; do
        if command -v dig &> /dev/null; then
            local result
            if result=$(dig +short "$domain" 2>/dev/null | head -1); then
                if [ -n "$result" ]; then
                    print_success "    $domain ‚Üí $result"
                else
                    print_error "    $domain: –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è"
                fi
            fi
        elif command -v nslookup &> /dev/null; then
            if nslookup "$domain" &>/dev/null; then
                print_success "    $domain: —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è"
            else
                print_error "    $domain: –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è"
            fi
        else
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ ping
            if ping -c 1 -W 2 "$domain" &>/dev/null; then
                print_success "    $domain: –¥–æ—Å—Ç—É–ø–µ–Ω"
            else
                print_warning "    $domain: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–º–æ–∂–µ—Ç –±—ã—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ ICMP)"
            fi
            break
        fi
    done
    
    # DNS –∫—ç—à (–µ—Å–ª–∏ systemd-resolve –¥–æ—Å—Ç—É–ø–µ–Ω)
    if command -v systemd-resolve &> /dev/null; then
        echo ""
        echo "  üíæ DNS –∫—ç—à (systemd-resolve):"
        systemd-resolve --statistics 2>/dev/null | grep -E "(Current Cache|Cache hits)" | head -5 | while read -r line; do
            echo "    üìä $line"
        done
    fi
}

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
analyze_connections() {
    if [ "$ENABLE_NETSTAT_ANALYSIS" != "true" ]; then
        return
    fi
    
    print_section "–†–ê–°–®–ò–†–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –°–û–ï–î–ò–ù–ï–ù–ò–ô"
    
    local total_connections=0
    local established_connections=0
    
    if command -v ss &> /dev/null; then
        echo "  üîó –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π:"
        
        # TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        local tcp_listen=$(ss -tuln 2>/dev/null | grep -c "LISTEN")
        local tcp_established=$(ss -tun 2>/dev/null | grep -c "ESTAB")
        
        echo "    üü¢ TCP —Å–ª—É—à–∞—é—â–∏—Ö –ø–æ—Ä—Ç–æ–≤: $tcp_listen"
        echo "    üîó TCP —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: $tcp_established"
        
        # –¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º
        echo ""
        echo "  üìä –¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ —Å–µ—Ç–µ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:"
        ss -tunp 2>/dev/null | grep ESTAB | awk '{print $7}' | cut -d\" -f2 | sort | uniq -c | sort -nr | head -5 | while read -r count process; do
            echo "    üöÄ $process: $count —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"
        done
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–æ–±—ã—á–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        echo ""
        echo "  üîç –ù–µ–æ–±—ã—á–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:"
        ss -tun 2>/dev/null | grep ESTAB | awk '{print $6}' | cut -d: -f1 | sort | uniq -c | sort -nr | head -3 | while read -r count ip; do
            if [ "$count" -gt 10 ]; then
                print_warning "    –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: $ip ($count —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π)"
            fi
        done
        
    else
        print_warning "–ö–æ–º–∞–Ω–¥–∞ 'ss' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"
    fi
}

# –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤
advanced_port_scan() {
    if [ "$PORT_SCAN_ENABLED" != "true" ]; then
        return
    fi
    
    print_section "–ü–†–û–î–í–ò–ù–£–¢–û–ï –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –ü–û–†–¢–û–í"
    
    local target=${1:-"localhost"}
    local ports=()
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ—Ä—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤
    IFS=',' read -ra ports <<< "$DEFAULT_PORTS"
    
    echo "  üîé –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤ –Ω–∞ $target..."
    echo "  üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–µ –ø–æ—Ä—Ç—ã: ${ports[*]}"
    echo ""
    
    local open_ports=()
    local closed_ports=()
    
    for port in "${ports[@]}"; do
        if command -v nc &> /dev/null && [ "$PORT_SCAN_METHOD" = "nc" ]; then
            if nc -z -w "$SCAN_TIMEOUT" "$target" "$port" &>/dev/null; then
                open_ports+=("$port")
                print_success "    –ü–æ—Ä—Ç $port: –æ—Ç–∫—Ä—ã—Ç"
            else
                closed_ports+=("$port")
                echo "    üîí –ü–æ—Ä—Ç $port: –∑–∞–∫—Ä—ã—Ç"
            fi
        elif command -v telnet &> /dev/null; then
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Å telnet
            if timeout "$SCAN_TIMEOUT" telnet "$target" "$port" &>/dev/null; then
                open_ports+=("$port")
                print_success "    –ü–æ—Ä—Ç $port: –æ—Ç–∫—Ä—ã—Ç"
            else
                closed_ports+=("$port")
                echo "    üîí –ü–æ—Ä—Ç $port: –∑–∞–∫—Ä—ã—Ç"
            fi
        else
            print_warning "    –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ä—Ç–æ–≤"
            return
        fi
    done
    
    echo ""
    echo "  üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:"
    echo "    üü¢ –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤: ${#open_ports[@]}"
    echo "    üîí –ó–∞–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤: ${#closed_ports[@]}"
    
    if [ ${#open_ports[@]} -gt 0 ]; then
        echo "    üìç –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã: ${open_ports[*]}"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if [ ${#open_ports[@]} -gt 10 ]; then
        print_warning "    –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –º–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."
    fi
}

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –∑–∞–¥–µ—Ä–∂–∫–∏
advanced_speed_test() {
    print_section "–†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ö–û–†–û–°–¢–ò –ò –ó–ê–î–ï–†–ñ–ö–ò"
    
    echo "  üìä –ò–∑–º–µ—Ä–µ–Ω–∏–µ —Å–µ—Ç–µ–≤—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫..."
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ö–æ—Å—Ç–æ–≤
    echo "  üèì –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–µ—Ä–∂–∫–∏ (ping):"
    for host in "${TEST_HOSTS[@]}"; do
        if [ "$host" = "localhost" ]; then
            continue
        fi
        
        local ping_result
        if ping_result=$(ping -c 3 -W 2 "$host" 2>/dev/null); then
            local avg_ping=$(echo "$ping_result" | grep "avg" | awk -F'/' '{print $5}')
            local packet_loss=$(echo "$ping_result" | grep -o "[0-9]*% packet loss" | cut -d% -f1)
            
            if [ -n "$avg_ping" ]; then
                echo -n "    $host: ${avg_ping}ms"
                
                if [ "$packet_loss" -gt 0 ]; then
                    echo -e " ${YELLOW}(–ø–æ—Ç–µ—Ä—è: ${packet_loss}%)${NC}"
                elif (( $(echo "$avg_ping < 50" | bc -l 2>/dev/null || echo 1) )); then
                    echo -e " ${GREEN}‚úÖ –û—Ç–ª–∏—á–Ω–æ${NC}"
                elif (( $(echo "$avg_ping < 100" | bc -l 2>/dev/null || echo 1) )); then
                    echo -e " ${YELLOW}‚ö†Ô∏è  –ù–æ—Ä–º–∞–ª—å–Ω–æ${NC}"
                else
                    echo -e " ${RED}‚ùå –í—ã—Å–æ–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞${NC}"
                fi
            fi
        else
            print_error "    $host: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        fi
    done
    
    # Speedtest –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    if [ "$ENABLE_SPEED_TEST" = "true" ] && command -v speedtest-cli &> /dev/null; then
        echo ""
        echo "  üöÄ –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è)..."
        speedtest-cli --simple 2>/dev/null | while read -r line; do
            echo "    üìä $line"
        done
    else
        echo ""
        print_info "–î–ª—è —Ç–µ—Å—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt install speedtest-cli"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
    echo ""
    echo "  üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏:"
    local gateway=$(ip route | grep default | awk '{print $3}' | head -1)
    if [ -n "$gateway" ] && [ "$gateway" != "169.254."* ]; then
        if ping -c 2 -W 1 "$gateway" &>/dev/null; then
            print_success "    –®–ª—é–∑ $gateway: –¥–æ—Å—Ç—É–ø–µ–Ω"
            
            # –ò–∑–º–µ—Ä–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–æ —à–ª—é–∑–∞
            local gateway_ping=$(ping -c 3 -W 1 "$gateway" 2>/dev/null | grep "avg" | awk -F'/' '{print $5}')
            if [ -n "$gateway_ping" ]; then
                if (( $(echo "$gateway_ping < 5" | bc -l 2>/dev/null || echo 1) )); then
                    echo -e "      ${GREEN}–ó–∞–¥–µ—Ä–∂–∫–∞ –¥–æ —à–ª—é–∑–∞: ${gateway_ping}ms ‚úÖ${NC}"
                else
                    echo -e "      ${YELLOW}–ó–∞–¥–µ—Ä–∂–∫–∞ –¥–æ —à–ª—é–∑–∞: ${gateway_ping}ms ‚ö†Ô∏è${NC}"
                fi
            fi
        else
            print_error "    –®–ª—é–∑ $gateway: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        fi
    fi
}

# –ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
analyze_security() {
    print_section "–ê–ù–ê–õ–ò–ó –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –°–ï–¢–ò"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ firewall
    if [ "$CHECK_FIREWALL" = "true" ]; then
        echo "  üî• –ü—Ä–æ–≤–µ—Ä–∫–∞ firewall:"
        
        if command -v ufw &> /dev/null; then
            local ufw_status=$(ufw status 2>/dev/null | grep "Status:")
            if echo "$ufw_status" | grep -q "active"; then
                print_success "    UFW: –∞–∫—Ç–∏–≤–µ–Ω"
            else
                print_warning "    UFW: –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω"
            fi
        elif command -v iptables &> /dev/null; then
            local iptables_rules=$(iptables -L 2>/dev/null | grep -c "^Chain")
            if [ "$iptables_rules" -gt 3 ]; then
                print_success "    iptables: –Ω–∞—Å—Ç—Ä–æ–µ–Ω ($iptables_rules –ø—Ä–∞–≤–∏–ª)"
            else
                print_warning "    iptables: –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"
            fi
        else
            print_error "    Firewall: –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω"
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª—É–∂–±
    echo ""
    echo "  üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö —Å–ª—É–∂–±:"
    local suspicious_ports=("23" "135" "137" "138" "139" "445")
    for port in "${suspicious_ports[@]}"; do
        if nc -z localhost "$port" &>/dev/null; then
            print_warning "    –ü–æ—Ä—Ç $port: –æ—Ç–∫—Ä—ã—Ç (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω–∞—è —Å–ª—É–∂–±–∞)"
        fi
    done
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ SSH –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if nc -z localhost 22 &>/dev/null; then
        echo ""
        echo "  üîê SSH —Å–µ—Ä–≤–µ—Ä:"
        print_success "    –ü–æ—Ä—Ç 22: –æ—Ç–∫—Ä—ã—Ç"
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ SSH –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–¥–µ—Å—å
    fi
}

# –†–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
monitor_mode() {
    if ! check_dependencies; then
        print_error "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞"
        exit 1
    fi
    
    print_section "–†–ï–ñ–ò–ú –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò"
    echo "  –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"
    echo "  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ $MONITOR_INTERVAL —Å–µ–∫—É–Ω–¥..."
    echo ""
    
    local counter=0
    while true; do
        counter=$((counter + 1))
        clear
        print_header
        echo "  üîÑ –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: $counter"
        echo "  ‚è∞ –í—Ä–µ–º—è: $(date '+%H:%M:%S')"
        echo "  ==================================="
        
        # –ë—ã—Å—Ç—Ä—ã–π –æ–±–∑–æ—Ä –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
        print_section "–°–¢–ê–¢–£–° –ò–ù–¢–ï–†–§–ï–ô–°–û–í"
        local interfaces=($(get_network_interfaces))
        for iface in "${interfaces[@]}"; do
            local status=$(ip link show "$iface" 2>/dev/null | grep -o "state [A-Z]*" | awk '{print $2}')
            local ip_addr=$(ip addr show "$iface" 2>/dev/null | grep "inet " | awk '{print $2}' | head -1)
            
            echo -n "  üîå $iface: $status"
            if [ -n "$ip_addr" ]; then
                echo -e " - ${GREEN}$ip_addr${NC}"
            else
                echo -e " - ${YELLOW}–Ω–µ—Ç IP${NC}"
            fi
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
            if [ "$MONITOR_BANDWIDTH" = "true" ]; then
                local rx_speed=$(get_interface_speed "$iface" "rx")
                local tx_speed=$(get_interface_speed "$iface" "tx")
                echo "     üìä –°–∫–æ—Ä–æ—Å—Ç—å: RX ${rx_speed} KB/s, TX ${tx_speed} KB/s"
            fi
        done
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        echo ""
        print_section "–ê–ö–¢–ò–í–ù–´–ï –°–û–ï–î–ò–ù–ï–ù–ò–Ø"
        local conn_count=$(ss -tun 2>/dev/null | grep -c ESTAB)
        echo "  üîó –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: $conn_count"
        
        # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–µ—Ä–∂–∫–∏
        if [ "$MONITOR_LATENCY" = "true" ] && [ $((counter % 5)) -eq 0 ]; then
            echo ""
            echo "  üèì –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–µ—Ä–∂–∫–∏:"
            for host in "8.8.8.8" "google.com"; do
                local ping_time=$(ping -c 1 -W 1 "$host" 2>/dev/null | grep "time=" | awk -F'time=' '{print $2}' | awk '{print $1}' || echo "timeout")
                echo "    $host: $ping_time"
            done
        fi
        
        echo ""
        echo "  ‚åõ –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ $MONITOR_INTERVAL —Å–µ–∫—É–Ω–¥..."
        sleep "$MONITOR_INTERVAL"
    done
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
generate_report() {
    print_header > "$REPORT_FILE"
    echo "üìÖ –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: $(date)" >> "$REPORT_FILE"
    echo "üíª –°–∏—Å—Ç–µ–º–∞: $(hostname) ($(uname -a))" >> "$REPORT_FILE"
    echo "" >> "$REPORT_FILE"
    
    # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç—á–µ—Ç
    analyze_interfaces >> "$REPORT_FILE" 2>&1
    echo "" >> "$REPORT_FILE"
    analyze_routing >> "$REPORT_FILE" 2>&1
    echo "" >> "$REPORT_FILE"
    analyze_dns >> "$REPORT_FILE" 2>&1
    echo "" >> "$REPORT_FILE"
    analyze_connections >> "$REPORT_FILE" 2>&1
    echo "" >> "$REPORT_FILE"
    advanced_port_scan >> "$REPORT_FILE" 2>&1
    echo "" >> "$REPORT_FILE"
    analyze_security >> "$REPORT_FILE" 2>&1
    
    print_success "–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: $REPORT_FILE"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    load_config
    
    case "${1:-}" in
        "quick")
            print_header
            analyze_interfaces
            analyze_dns
            advanced_speed_test
            ;;
        "monitor")
            print_header
            monitor_mode
            ;;
        "scan")
            print_header
            advanced_port_scan "${2:-localhost}"
            ;;
        "security")
            print_header
            analyze_security
            advanced_port_scan "localhost"
            ;;
        "report")
            print_header
            generate_report
            ;;
        "config")
            create_config
            ;;
        "test")
            print_header
            check_dependencies
            print_success "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
            ;;
        "help"|"--help"|"-h"|"")
            print_header
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–ö–û–ú–ê–ù–î–ê] [–ü–ê–†–ê–ú–ï–¢–†–´]"
            echo ""
            echo "–ö–æ–º–∞–Ω–¥—ã:"
            echo "  quick           - –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"
            echo "  monitor         - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
            echo "  scan [—Ö–æ—Å—Ç]     - –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: localhost)"
            echo "  security        - –ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–µ—Ç–∏"
            echo "  report          - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"
            echo "  config          - –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª"
            echo "  test            - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"
            echo "  help            - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
            echo ""
            echo "–ü—Ä–∏–º–µ—Ä—ã:"
            echo "  $0 quick"
            echo "  $0 monitor"
            echo "  $0 scan 192.168.1.1"
            echo "  $0 security"
            echo "  $0 report"
            ;;
        *)
            print_header
            analyze_interfaces
            analyze_routing
            analyze_dns
            analyze_connections
            advanced_port_scan "localhost"
            advanced_speed_test
            analyze_security
            ;;
    esac
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
log_message "INFO" "–ó–∞–ø—É—Å–∫ —Å–µ—Ç–µ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"
main "$@"
log_message "INFO" "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"
