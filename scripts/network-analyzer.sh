#!/bin/bash
# üåê –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–µ—Ç–∏ —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
# –ê–≤—Ç–æ—Ä: g1if
# –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: https://github.com/g1if/system-admin-portfolio

set -e

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
LOG_DIR="$PROJECT_ROOT/logs"
LOG_FILE="$LOG_DIR/network-analyzer.log"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
mkdir -p "$LOG_DIR"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE"
}

print_header() {
    echo -e "${CYAN}"
    echo "üåê ==========================================="
    echo "   –ê–ù–ê–õ–ò–ó–ê–¢–û–† –°–ï–¢–ò v1.0"
    echo "   $(date)"
    echo "   –ê–≤—Ç–æ—Ä: g1if"
    echo "==========================================="
    echo -e "${NC}"
}

print_section() {
    echo -e "${BLUE}üì° $1${NC}"
}

print_status() {
    local status=$1
    local message=$2
    case $status in
        "OK") echo -e "  ${GREEN}‚úÖ $message${NC}" ;;
        "WARN") echo -e "  ${YELLOW}‚ö†Ô∏è  $message${NC}" ;;
        "ERROR") echo -e "  ${RED}‚ùå $message${NC}" ;;
    esac
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–º–∞–Ω–¥
check_command() {
    if command -v "$1" >/dev/null 2>&1; then
        return 0
    else
        return 1
    fi
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
get_network_interfaces() {
    local interfaces=()
    
    if check_command "ip"; then
        interfaces=($(ip link show 2>/dev/null | grep -E "^[0-9]+:" | grep -v "LOOPBACK" | awk -F: '{print $2}' | tr -d ' '))
    elif check_command "ifconfig"; then
        interfaces=($(ifconfig -a 2>/dev/null | grep -E "^[a-z]" | awk '{print $1}' | tr -d ':'))
    fi
    
    printf '%s\n' "${interfaces[@]}"
}

# –ê–Ω–∞–ª–∏–∑ —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
analyze_interfaces() {
    print_section "–°–ï–¢–ï–í–´–ï –ò–ù–¢–ï–†–§–ï–ô–°–´"
    
    local interfaces=($(get_network_interfaces))
    
    if [ ${#interfaces[@]} -eq 0 ]; then
        echo "  ‚ÑπÔ∏è  –°–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        return
    fi
    
    for iface in "${interfaces[@]}"; do
        echo "  üîå –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å: $iface"
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ IP –∞–¥—Ä–µ—Å–∞
        local ip_addr=""
        if check_command "ip"; then
            ip_addr=$(ip addr show "$iface" 2>/dev/null | grep "inet " | awk '{print $2}' | head -1)
        elif check_command "ifconfig"; then
            ip_addr=$(ifconfig "$iface" 2>/dev/null | grep "inet " | awk '{print $2}')
        fi
        
        if [ -n "$ip_addr" ]; then
            echo "    üìç IP –∞–¥—Ä–µ—Å: $ip_addr"
        else
            echo "    üìç IP –∞–¥—Ä–µ—Å: –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
        fi
        
        # –°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        if check_command "ip"; then
            local status=$(ip link show "$iface" 2>/dev/null | grep -o "state [A-Z]*" | awk '{print $2}')
            echo "    üìä –°—Ç–∞—Ç—É—Å: $status"
        fi
        
        # MAC –∞–¥—Ä–µ—Å
        if check_command "ip"; then
            local mac_addr=$(ip link show "$iface" 2>/dev/null | grep "link/ether" | awk '{print $2}')
            if [ -n "$mac_addr" ]; then
                echo "    üîë MAC –∞–¥—Ä–µ—Å: $mac_addr"
            fi
        fi
        
        echo ""
    done
}

# –ê–Ω–∞–ª–∏–∑ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
analyze_routing() {
    print_section "–¢–ê–ë–õ–ò–¶–ê –ú–ê–†–®–†–£–¢–ò–ó–ê–¶–ò–ò"
    
    if check_command "ip"; then
        echo "  üåç –¢–∞–±–ª–∏—Ü–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏:"
        ip route show 2>/dev/null | head -10 | while read -r route; do
            echo "    üõ£Ô∏è  $route"
        done
    elif check_command "netstat"; then
        echo "  üåç –¢–∞–±–ª–∏—Ü–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏:"
        netstat -rn 2>/dev/null | head -10 | while read -r route; do
            echo "    üõ£Ô∏è  $route"
        done
    else
        echo "  ‚ÑπÔ∏è  –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS
analyze_dns() {
    print_section "DNS –ù–ê–°–¢–†–û–ô–ö–ò"
    
    # –ü–æ–ª—É—á–∞–µ–º DNS —Å–µ—Ä–≤–µ—Ä—ã
    if [ -f /etc/resolv.conf ]; then
        echo "  üîç DNS —Å–µ—Ä–≤–µ—Ä—ã:"
        grep -E "^nameserver" /etc/resolv.conf 2>/dev/null | awk '{print "    üñ•Ô∏è  " $2}' || echo "    ‚ÑπÔ∏è  –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
    else
        echo "  ‚ÑπÔ∏è  –§–∞–π–ª resolv.conf –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    if check_command "nslookup"; then
        echo "  üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è..."
        if nslookup google.com >/dev/null 2>&1; then
            print_status "OK" "DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        else
            print_status "ERROR" "DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        fi
    elif check_command "dig"; then
        echo "  üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è..."
        if dig google.com >/dev/null 2>&1; then
            print_status "OK" "DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        else
            print_status "ERROR" "DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        fi
    fi
}

# –ê–Ω–∞–ª–∏–∑ —Å–µ—Ç–µ–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
analyze_connections() {
    print_section "–°–ï–¢–ï–í–´–ï –°–û–ï–î–ò–ù–ï–ù–ò–Ø"
    
    local connection_count=0
    
    if check_command "ss"; then
        echo "  üîó –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:"
        ss -tun 2>/dev/null | head -15 | while read -r line; do
            if [[ $line == ESTAB* ]]; then
                local proto=$(echo "$line" | awk '{print $1}')
                local local_addr=$(echo "$line" | awk '{print $5}')
                local remote_addr=$(echo "$line" | awk '{print $6}')
                echo "    üåê $proto: $local_addr ‚ûî $remote_addr"
                connection_count=$((connection_count + 1))
            fi
        done
    elif check_command "netstat"; then
        echo "  üîó –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:"
        netstat -tun 2>/dev/null | grep ESTABLISHED | head -15 | while read -r line; do
            local proto=$(echo "$line" | awk '{print $1}')
            local local_addr=$(echo "$line" | awk '{print $4}')
            local remote_addr=$(echo "$line" | awk '{print $5}')
            echo "    üåê $proto: $local_addr ‚ûî $remote_addr"
            connection_count=$((connection_count + 1))
        done
    else
        echo "  ‚ÑπÔ∏è  –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    fi
    
    if [ "$connection_count" -eq 0 ]; then
        echo "    ‚ÑπÔ∏è  –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–µ—Ç–∏
check_network_speed() {
    print_section "–ü–†–û–í–ï–†–ö–ê –°–ö–û–†–û–°–¢–ò –°–ï–¢–ò"
    
    echo "  üìä –ò–∑–º–µ—Ä–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥)..."
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å –ø–æ–º–æ—â—å—é ping
    if check_command "ping"; then
        local ping_result
        if ping_result=$(ping -c 3 -W 2 8.8.8.8 2>/dev/null); then
            local avg_ping=$(echo "$ping_result" | grep "avg" | awk -F'/' '{print $5}')
            if [ -n "$avg_ping" ]; then
                echo "    üèì –°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞: ${avg_ping}ms"
                
                if (( $(echo "$avg_ping < 50" | bc -l 2>/dev/null || echo 1) )); then
                    print_status "OK" "–ó–∞–¥–µ—Ä–∂–∫–∞ –≤ –Ω–æ—Ä–º–µ"
                elif (( $(echo "$avg_ping < 100" | bc -l 2>/dev/null || echo 1) )); then
                    print_status "WARN" "–ó–∞–¥–µ—Ä–∂–∫–∞ –Ω–µ–º–Ω–æ–≥–æ –≤—ã—Å–æ–∫–∞—è"
                else
                    print_status "ERROR" "–í—ã—Å–æ–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞"
                fi
            fi
        else
            print_status "ERROR" "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ—Ä–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É"
        fi
    else
        echo "    ‚ÑπÔ∏è  –ö–æ–º–∞–Ω–¥–∞ ping –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    fi
}

# –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤ (–±–∞–∑–æ–≤–æ–µ)
scan_ports() {
    print_section "–ë–ê–ó–û–í–û–ï –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –ü–û–†–¢–û–í"
    
    if check_command "nc"; then
        echo "  üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤ –Ω–∞ localhost..."
        
        local common_ports=(22 80 443 53 21 25 110 143 993 995 587 465 3389 5900)
        local open_ports=()
        
        for port in "${common_ports[@]}"; do
            if nc -z localhost "$port" 2>/dev/null; then
                open_ports+=("$port")
                echo "    üü¢ –ü–æ—Ä—Ç $port: –æ—Ç–∫—Ä—ã—Ç"
            fi
        done
        
        if [ ${#open_ports[@]} -eq 0 ]; then
            echo "    ‚ÑπÔ∏è  –ù–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã—Ö –ø–æ—Ä—Ç–æ–≤ –Ω–µ –æ—Ç–∫—Ä—ã—Ç"
        else
            echo "    üìà –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤: ${#open_ports[@]}"
        fi
        
    elif check_command "telnet"; then
        echo "  üîé –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤ (—Ç—Ä–µ–±—É–µ—Ç telnet)..."
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å telnet
        print_status "INFO" "–î–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ä—Ç–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ netcat (nc)"
    else
        echo "    ‚ÑπÔ∏è  –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ä—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    print_header
    log "–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Å–µ—Ç–∏"
    
    analyze_interfaces
    analyze_routing
    analyze_dns
    analyze_connections
    check_network_speed
    scan_ports
    
    echo ""
    echo -e "${GREEN}‚úÖ –ê–Ω–∞–ª–∏–∑ —Å–µ—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω${NC}"
    log "–ê–Ω–∞–ª–∏–∑ —Å–µ—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω"
    echo ""
    echo -e "${CYAN}üìù –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –≤ –ª–æ–≥–∞—Ö: $LOG_FILE${NC}"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
case "${1:-}" in
    "quick")
        echo -e "${CYAN}üåê –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ —Å–µ—Ç–∏...${NC}"
        analyze_interfaces
        analyze_dns
        check_network_speed
        ;;
    "monitor")
        echo -e "${CYAN}üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ç–∏ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫)...${NC}"
        echo -e "${CYAN}–î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C${NC}"
        while true; do
            clear
            print_header
            analyze_interfaces
            analyze_connections
            sleep 5
        done
        ;;
    "help")
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [quick|monitor|help]"
        echo "  quick   - –±—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"
        echo "  monitor - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
        echo "  help    - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
        echo ""
        echo "–ë–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–µ—Ç–∏"
        ;;
    *)
        main
        ;;
esac
