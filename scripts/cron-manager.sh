#!/bin/bash
# ‚è∞ –ú–µ–Ω–µ–¥–∂–µ—Ä cron –∑–∞–¥–∞–Ω–∏–π —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
# –ê–≤—Ç–æ—Ä: g1if
# –í–µ—Ä—Å–∏—è: 2.0

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
LOG_DIR="$PROJECT_ROOT/logs"
CONFIG_DIR="$PROJECT_ROOT/configs"
BACKUP_DIR="$PROJECT_ROOT/backups"

mkdir -p "$LOG_DIR" "$CONFIG_DIR" "$BACKUP_DIR"

# –¶–≤–µ—Ç–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
PURPLE='\033[0;35m'
NC='\033[0m'

# –§–∞–π–ª—ã
CRON_BACKUP="$BACKUP_DIR/cron-backup-$(date +%Y%m%d_%H%M%S).txt"
LOG_FILE="$LOG_DIR/cron-manager.log"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
log() {
    local level=${2:-"INFO"}
    echo "$(date '+%Y-%m-%d %H:%M:%S') - [$level] $1" >> "$LOG_FILE"
}

print_header() {
    echo -e "${CYAN}"
    echo "‚è∞ ==========================================="
    echo "   –ú–ï–ù–ï–î–ñ–ï–† CRON –ó–ê–î–ê–ù–ò–ô v2.0"
    echo "   $(date)"
    echo "   –ê–≤—Ç–æ—Ä: g1if"
    echo "==========================================="
    echo -e "${NC}"
}

print_section() {
    echo -e "${BLUE}üìä $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
    log "$1" "SUCCESS"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
    log "$1" "ERROR"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
    log "$1" "WARNING"
}

print_info() {
    echo -e "${PURPLE}‚ÑπÔ∏è  $1${NC}"
    log "$1" "INFO"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    if ! command -v crontab &> /dev/null; then
        print_error "–£—Ç–∏–ª–∏—Ç–∞ 'crontab' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        echo "üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt install cron"
        return 1
    fi
    
    if ! systemctl is-active cron >/dev/null 2>&1 && ! systemctl is-active crond >/dev/null 2>&1; then
        print_warning "–°–ª—É–∂–±–∞ cron –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞"
        echo "üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: sudo systemctl start cron"
    fi
    
    return 0
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ cron –≤—ã—Ä–∞–∂–µ–Ω–∏—è
validate_cron_expression() {
    local expression="$1"
    local cmd="$2"
    
    # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
    if [[ ! "$expression" =~ ^([0-9*,-/]+[[:space:]]+){4}[0-9*,-/]+$ ]]; then
        print_error "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç cron –≤—ã—Ä–∞–∂–µ–Ω–∏—è: $expression"
        echo "üí° –§–æ—Ä–º–∞—Ç: * * * * * (–º–∏–Ω—É—Ç–∞ —á–∞—Å –¥–µ–Ω—å –º–µ—Å—è—Ü –¥–µ–Ω—å_–Ω–µ–¥–µ–ª–∏)"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –ø—É—Å—Ç–∞—è
    if [ -z "$cmd" ]; then
        print_error "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã (–µ—Å–ª–∏ —ç—Ç–æ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª)
    local first_word=$(echo "$cmd" | awk '{print $1}')
    if [[ "$first_word" != "echo" ]] && [[ "$first_word" != "cd" ]] && \
       [[ "$first_word" != "source" ]] && [[ "$first_word" != "." ]] && \
       command -v "$first_word" >/dev/null 2>&1; then
        if ! command -v "$first_word" &> /dev/null; then
            print_warning "–ö–æ–º–∞–Ω–¥–∞ '$first_word' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ"
        fi
    fi
    
    return 0
}

# –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞–Ω–∏–π
backup_cron() {
    local backup_file="$CRON_BACKUP"
    
    print_section "–°–û–ó–î–ê–ù–ò–ï –ë–≠–ö–ê–ü–ê CRON"
    
    if crontab -l > "$backup_file" 2>/dev/null; then
        local size=$(stat -c%s "$backup_file" 2>/dev/null || echo 0)
        print_success "–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: $(basename "$backup_file")"
        echo "  üìÅ –§–∞–π–ª: $backup_file"
        echo "  üìä –†–∞–∑–º–µ—Ä: ${size} –±–∞–π—Ç"
        log "–°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø cron: $backup_file" "INFO"
    else
        print_warning "–ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –±—ç–∫–∞–ø–∞"
    fi
}

# –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
list_jobs() {
    print_section "–¢–ï–ö–£–©–ò–ï CRON –ó–ê–î–ê–ù–ò–Ø"
    
    # –ó–∞–¥–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    echo "üë§ –ó–ê–î–ê–ù–ò–Ø –¢–ï–ö–£–©–ï–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ($USER):"
    echo ""
    
    local user_jobs=$(crontab -l 2>/dev/null)
    if [ -n "$user_jobs" ]; then
        local counter=0
        while IFS= read -r line; do
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            if [[ -n "$line" && ! "$line" =~ ^# ]]; then
                counter=$((counter + 1))
                echo "  $counter. $line"
                
                # –ü–∞—Ä—Å–∏–º cron –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ—è—Å–Ω–µ–Ω–∏—è
                if [[ "$line" =~ ^([0-9*,-/]+[[:space:]]+){4}[0-9*,-/]+[[:space:]]+(.*)$ ]]; then
                    local cron_expr="${BASH_REMATCH[1]}"
                    local command="${BASH_REMATCH[2]}"
                    explain_cron_expression "$cron_expr"
                fi
                echo ""
            elif [[ "$line" =~ ^#.*$ && -n "$line" ]]; then
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
                echo "  üí§ [–ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û] ${line:1}"
                echo ""
            fi
        done <<< "$user_jobs"
        
        if [ $counter -eq 0 ]; then
            echo "  ‚ÑπÔ∏è  –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π"
        fi
    else
        echo "  ‚ÑπÔ∏è  –ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π"
    fi
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
    echo ""
    echo "üìÅ –°–ò–°–¢–ï–ú–ù–´–ï –ó–ê–î–ê–ù–ò–Ø:"
    echo ""
    
    local system_jobs_found=0
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ cron –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    local cron_dirs=("/etc/cron.d" "/etc/cron.hourly" "/etc/cron.daily" "/etc/cron.weekly" "/etc/cron.monthly")
    
    for cron_dir in "${cron_dirs[@]}"; do
        if [ -d "$cron_dir" ]; then
            local files=($(ls "$cron_dir" 2>/dev/null))
            if [ ${#files[@]} -gt 0 ]; then
                system_jobs_found=1
                echo "  üìÇ $cron_dir:"
                for file in "${files[@]}"; do
                    if [ -f "$cron_dir/$file" ] && [ "$file" != ".placeholder" ]; then
                        echo "    üìÑ $file"
                    fi
                done
                echo ""
            fi
        fi
    done
    
    if [ $system_jobs_found -eq 0 ]; then
        echo "  ‚ÑπÔ∏è  –°–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    fi
}

# –ü–æ—è—Å–Ω–µ–Ω–∏–µ cron –≤—ã—Ä–∞–∂–µ–Ω–∏—è
explain_cron_expression() {
    local expression="$1"
    local parts=($expression)
    
    if [ ${#parts[@]} -ne 5 ]; then
        return
    fi
    
    local minute="${parts[0]}"
    local hour="${parts[1]}"
    local day="${parts[2]}"
    local month="${parts[3]}"
    local weekday="${parts[4]}"
    
    echo -e "    üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:"
    
    # –ú–∏–Ω—É—Ç—ã
    if [ "$minute" == "*" ]; then
        echo "      üïê –ú–∏–Ω—É—Ç—ã: –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É"
    else
        echo "      üïê –ú–∏–Ω—É—Ç—ã: $minute"
    fi
    
    # –ß–∞—Å—ã
    if [ "$hour" == "*" ]; then
        echo "      üïë –ß–∞—Å—ã: –∫–∞–∂–¥—ã–π —á–∞—Å"
    else
        echo "      üïë –ß–∞—Å—ã: $hour"
    fi
    
    # –î–Ω–∏ –º–µ—Å—è—Ü–∞
    if [ "$day" == "*" ]; then
        echo "      üìÖ –î–Ω–∏ –º–µ—Å—è—Ü–∞: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å"
    else
        echo "      üìÖ –î–Ω–∏ –º–µ—Å—è—Ü–∞: $day"
    fi
    
    # –ú–µ—Å—è—Ü—ã
    if [ "$month" == "*" ]; then
        echo "      üå∏ –ú–µ—Å—è—Ü—ã: –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü"
    else
        local months=("" "–Ø–Ω–≤–∞—Ä—å" "–§–µ–≤—Ä–∞–ª—å" "–ú–∞—Ä—Ç" "–ê–ø—Ä–µ–ª—å" "–ú–∞–π" "–ò—é–Ω—å" 
                     "–ò—é–ª—å" "–ê–≤–≥—É—Å—Ç" "–°–µ–Ω—Ç—è–±—Ä—å" "–û–∫—Ç—è–±—Ä—å" "–ù–æ—è–±—Ä—å" "–î–µ–∫–∞–±—Ä—å")
        echo "      üå∏ –ú–µ—Å—è—Ü—ã: $month (${months[$month]})"
    fi
    
    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    if [ "$weekday" == "*" ]; then
        echo "      üìÜ –î–Ω–∏ –Ω–µ–¥–µ–ª–∏: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å"
    else
        local days=("–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ" "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫" "–í—Ç–æ—Ä–Ω–∏–∫" "–°—Ä–µ–¥–∞" "–ß–µ—Ç–≤–µ—Ä–≥" "–ü—è—Ç–Ω–∏—Ü–∞" "–°—É–±–±–æ—Ç–∞")
        echo "      üìÜ –î–Ω–∏ –Ω–µ–¥–µ–ª–∏: $weekday (${days[$weekday]})"
    fi
}

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
add_job() {
    print_section "–î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–û–í–û–ì–û –ó–ê–î–ê–ù–ò–Ø"
    
    echo "üìù –§–æ—Ä–º–∞—Ç: * * * * * –∫–æ–º–∞–Ω–¥–∞"
    echo "   –º–∏–Ω—É—Ç–∞ —á–∞—Å –¥–µ–Ω—å –º–µ—Å—è—Ü –¥–µ–Ω—å_–Ω–µ–¥–µ–ª–∏"
    echo ""
    echo "üí° –ü—Ä–∏–º–µ—Ä—ã:"
    echo "   0 2 * * * /path/to/backup.sh    # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 2:00"
    echo "   */5 * * * * /path/to/check.sh   # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç"
    echo "   0 0 1 * * /path/to/report.sh    # –ü–µ—Ä–≤–æ–≥–æ —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞"
    echo ""
    
    read -p "–í–≤–µ–¥–∏—Ç–µ cron –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: " cron_expr
    read -p "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: " command
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    if ! validate_cron_expression "$cron_expr" "$command"; then
        return 1
    fi
    
    # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º
    backup_cron
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ
    local current_jobs=$(crontab -l 2>/dev/null || true)
    local new_jobs=$(printf "%s\n%s %s" "$current_jobs" "$cron_expr" "$command")
    
    if echo "$new_jobs" | crontab -; then
        print_success "–ó–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ"
        echo "  üìã –í—ã—Ä–∞–∂–µ–Ω–∏–µ: $cron_expr"
        echo "  üíª –ö–æ–º–∞–Ω–¥–∞: $command"
        log "–î–æ–±–∞–≤–ª–µ–Ω–æ cron –∑–∞–¥–∞–Ω–∏–µ: $cron_expr $command" "INFO"
    else
        print_error "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è"
        return 1
    fi
}

# –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
remove_job() {
    print_section "–£–î–ê–õ–ï–ù–ò–ï –ó–ê–î–ê–ù–ò–Ø"
    
    local current_jobs=$(crontab -l 2>/dev/null)
    
    if [ -z "$current_jobs" ]; then
        echo "  ‚ÑπÔ∏è  –ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
        return 0
    fi
    
    echo "üìã –¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞–Ω–∏—è:"
    echo ""
    
    local counter=0
    local jobs_array=()
    
    while IFS= read -r line; do
        if [[ -n "$line" && ! "$line" =~ ^# ]]; then
            counter=$((counter + 1))
            jobs_array+=("$line")
            echo "  $counter. $line"
        fi
    done <<< "$current_jobs"
    
    if [ $counter -eq 0 ]; then
        echo "  ‚ÑπÔ∏è  –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
        return 0
    fi
    
    echo ""
    read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: " job_num
    
    if [[ ! "$job_num" =~ ^[0-9]+$ ]] || [ "$job_num" -lt 1 ] || [ "$job_num" -gt $counter ]; then
        print_error "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è: $job_num"
        return 1
    fi
    
    # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º
    backup_cron
    
    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ
    local new_jobs=""
    local current_counter=0
    
    while IFS= read -r line; do
        if [[ -n "$line" && ! "$line" =~ ^# ]]; then
            current_counter=$((current_counter + 1))
            if [ "$current_counter" -ne "$job_num" ]; then
                new_jobs+="$line"$'\n'
            fi
        else
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            new_jobs+="$line"$'\n'
        fi
    done <<< "$current_jobs"
    
    if echo "$new_jobs" | crontab -; then
        print_success "–ó–∞–¥–∞–Ω–∏–µ $job_num —É–¥–∞–ª–µ–Ω–æ"
        echo "  üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ: ${jobs_array[$((job_num-1))]}"
        log "–£–¥–∞–ª–µ–Ω–æ cron –∑–∞–¥–∞–Ω–∏–µ: ${jobs_array[$((job_num-1))]}" "INFO"
    else
        print_error "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è"
        return 1
    fi
}

# –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
toggle_job() {
    local action="$1" # enable –∏–ª–∏ disable
    print_section "$(echo "$action" | tr '[:lower:]' '[:upper:]') –ó–ê–î–ê–ù–ò–Ø"
    
    local current_jobs=$(crontab -l 2>/dev/null)
    
    if [ -z "$current_jobs" ]; then
        echo "  ‚ÑπÔ∏è  –ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π"
        return 0
    fi
    
    echo "üìã –¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞–Ω–∏—è:"
    echo ""
    
    local counter=0
    local jobs_array=()
    
    while IFS= read -r line; do
        if [[ -n "$line" ]]; then
            counter=$((counter + 1))
            jobs_array+=("$line")
            
            if [[ "$line" =~ ^# ]]; then
                echo "  $counter. üí§ [–û–¢–ö–õ–Æ–ß–ï–ù–û] ${line:1}"
            else
                echo "  $counter. ‚úÖ [–ê–ö–¢–ò–í–ù–û] $line"
            fi
        fi
    done <<< "$current_jobs"
    
    if [ $counter -eq 0 ]; then
        echo "  ‚ÑπÔ∏è  –ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π"
        return 0
    fi
    
    echo ""
    read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è: " job_num
    
    if [[ ! "$job_num" =~ ^[0-9]+$ ]] || [ "$job_num" -lt 1 ] || [ "$job_num" -gt $counter ]; then
        print_error "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è: $job_num"
        return 1
    fi
    
    # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º
    backup_cron
    
    # –í–∫–ª—é—á–∞–µ–º –∏–ª–∏ –æ—Ç–∫–ª—é—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
    local new_jobs=""
    local current_counter=0
    
    while IFS= read -r line; do
        if [[ -n "$line" ]]; then
            current_counter=$((current_counter + 1))
            
            if [ "$current_counter" -eq "$job_num" ]; then
                if [ "$action" == "disable" ] && [[ ! "$line" =~ ^# ]]; then
                    # –û—Ç–∫–ª—é—á–∞–µ–º - –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                    new_jobs+="# $line"$'\n'
                    print_success "–ó–∞–¥–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ"
                    log "–û—Ç–∫–ª—é—á–µ–Ω–æ cron –∑–∞–¥–∞–Ω–∏–µ: $line" "INFO"
                elif [ "$action" == "enable" ] && [[ "$line" =~ ^# ]]; then
                    # –í–∫–ª—é—á–∞–µ–º - —É–±–∏—Ä–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                    new_jobs+="${line:2}"$'\n'
                    print_success "–ó–∞–¥–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ"
                    log "–í–∫–ª—é—á–µ–Ω–æ cron –∑–∞–¥–∞–Ω–∏–µ: ${line:2}" "INFO"
                else
                    # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                    new_jobs+="$line"$'\n'
                fi
            else
                new_jobs+="$line"$'\n'
            fi
        else
            new_jobs+="$line"$'\n'
        fi
    done <<< "$current_jobs"
    
    if ! echo "$new_jobs" | crontab -; then
        print_error "–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è"
        return 1
    fi
}

# –ü–æ–∏—Å–∫ –∑–∞–¥–∞–Ω–∏–π
search_jobs() {
    local pattern="$1"
    
    if [ -z "$pattern" ]; then
        read -p "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞: " pattern
    fi
    
    if [ -z "$pattern" ]; then
        print_error "–ù–µ —É–∫–∞–∑–∞–Ω —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞"
        return 1
    fi
    
    print_section "–ü–û–ò–°–ö –ó–ê–î–ê–ù–ò–ô: '$pattern'"
    
    local user_jobs=$(crontab -l 2>/dev/null)
    local found=0
    
    # –ü–æ–∏—Å–∫ –≤ –∑–∞–¥–∞–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if [ -n "$user_jobs" ]; then
        while IFS= read -r line; do
            if [[ "$line" =~ $pattern ]]; then
                if [ $found -eq 0 ]; then
                    echo "üë§ –ù–ê–ô–î–ï–ù–û –í –ó–ê–î–ê–ù–ò–Ø–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:"
                    echo ""
                fi
                found=1
                
                if [[ "$line" =~ ^# ]]; then
                    echo "  üí§ [–û–¢–ö–õ–Æ–ß–ï–ù–û] ${line:1}"
                else
                    echo "  ‚úÖ [–ê–ö–¢–ò–í–ù–û] $line"
                fi
            fi
        done <<< "$user_jobs"
    fi
    
    # –ü–æ–∏—Å–∫ –≤ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö
    local cron_dirs=("/etc/cron.d" "/etc/cron.hourly" "/etc/cron.daily" "/etc/cron.weekly" "/etc/cron.monthly")
    local system_found=0
    
    for cron_dir in "${cron_dirs[@]}"; do
        if [ -d "$cron_dir" ]; then
            for file in "$cron_dir"/*; do
                if [ -f "$file" ] && grep -q "$pattern" "$file" 2>/dev/null; then
                    if [ $system_found -eq 0 ]; then
                        echo ""
                        echo "üìÅ –ù–ê–ô–î–ï–ù–û –í –°–ò–°–¢–ï–ú–ù–´–• –ó–ê–î–ê–ù–ò–Ø–•:"
                        echo ""
                    fi
                    system_found=1
                    echo "  üìÇ $file:"
                    grep "$pattern" "$file" | while read -r match; do
                        echo "    üîç $match"
                    done
                fi
            done
        fi
    done
    
    if [ $found -eq 0 ] && [ $system_found -eq 0 ]; then
        echo "  ‚ÑπÔ∏è  –ó–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    fi
}

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞
restore_backup() {
    local backup_file="$1"
    
    if [ -z "$backup_file" ]; then
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±—ç–∫–∞–ø—ã
        print_section "–î–û–°–¢–£–ü–ù–´–ï –ë–≠–ö–ê–ü–´"
        
        local backups=($(ls -1t "$BACKUP_DIR"/cron-backup-*.txt 2>/dev/null | head -5))
        
        if [ ${#backups[@]} -eq 0 ]; then
            print_error "–ë—ç–∫–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            return 1
        fi
        
        echo "–í—ã–±–µ—Ä–∏—Ç–µ –±—ç–∫–∞–ø –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:"
        echo ""
        
        for i in "${!backups[@]}"; do
            local file=$(basename "${backups[$i]}")
            local date_part=$(echo "$file" | sed 's/cron-backup-//' | sed 's/.txt//')
            local pretty_date=$(echo "$date_part" | sed 's/_/ /')
            echo "  $((i+1)). $pretty_date - $file"
        done
        
        echo ""
        read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±—ç–∫–∞–ø–∞: " backup_num
        
        if [[ ! "$backup_num" =~ ^[0-9]+$ ]] || [ "$backup_num" -lt 1 ] || [ "$backup_num" -gt ${#backups[@]} ]; then
            print_error "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –±—ç–∫–∞–ø–∞"
            return 1
        fi
        
        backup_file="${backups[$((backup_num-1))]}"
    fi
    
    if [ ! -f "$backup_file" ]; then
        print_error "–§–∞–π–ª –±—ç–∫–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: $backup_file"
        return 1
    fi
    
    print_section "–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ò–ó –ë–≠–ö–ê–ü–ê"
    echo "  üìÅ –§–∞–π–ª: $(basename "$backup_file")"
    
    # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    backup_cron
    
    if crontab "$backup_file"; then
        print_success "Cron –∑–∞–¥–∞–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ –±—ç–∫–∞–ø–∞"
        log "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω cron –∏–∑ –±—ç–∫–∞–ø–∞: $backup_file" "INFO"
    else
        print_error "–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –±—ç–∫–∞–ø–∞"
        return 1
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    if ! check_dependencies; then
        exit 1
    fi
    
    case "${1:-}" in
        "list")
            print_header
            list_jobs
            ;;
        "add")
            print_header
            add_job
            ;;
        "remove")
            print_header
            remove_job
            ;;
        "enable")
            print_header
            toggle_job "enable"
            ;;
        "disable")
            print_header
            toggle_job "disable"
            ;;
        "search")
            print_header
            search_jobs "$2"
            ;;
        "edit")
            print_header
            print_section "–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï CRONTAB"
            echo "  üìù –û—Ç–∫—Ä—ã–≤–∞—é —Ä–µ–¥–∞–∫—Ç–æ—Ä..."
            crontab -e
            print_success "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
            ;;
        "backup")
            print_header
            backup_cron
            ;;
        "restore")
            print_header
            restore_backup "$2"
            ;;
        "help"|"--help"|"-h"|"")
            print_header
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–ö–û–ú–ê–ù–î–ê]"
            echo ""
            echo "–ö–æ–º–∞–Ω–¥—ã:"
            echo "  list                   - –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π —Å –¥–µ—Ç–∞–ª—è–º–∏"
            echo "  add                    - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ"
            echo "  remove                 - –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"
            echo "  enable                 - –í–∫–ª—é—á–∏—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ"
            echo "  disable                - –û—Ç–∫–ª—é—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"
            echo "  search [pattern]       - –ü–æ–∏—Å–∫ –∑–∞–¥–∞–Ω–∏–π"
            echo "  edit                   - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ"
            echo "  backup                 - –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –∑–∞–¥–∞–Ω–∏–π"
            echo "  restore [file]         - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –±—ç–∫–∞–ø–∞"
            echo "  help                   - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
            echo ""
            echo "–ü—Ä–∏–º–µ—Ä—ã:"
            echo "  $0 list                # –î–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫"
            echo "  $0 add                 # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ"
            echo "  $0 remove              # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"
            echo "  $0 search backup       # –ü–æ–∏—Å–∫ –∑–∞–¥–∞–Ω–∏–π —Å 'backup'"
            echo "  $0 disable             # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"
            echo "  $0 restore             # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞"
            ;;
        *)
            print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $1"
            echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: $0 help"
            exit 1
            ;;
    esac
}

main "$@"
