#!/bin/bash
# üìä –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤ —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º –ø–æ–∏—Å–∫–æ–º
# –ê–≤—Ç–æ—Ä: g1if

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
LOG_DIR="$PROJECT_ROOT/logs"
CONFIG_DIR="$PROJECT_ROOT/configs"
REPORT_DIR="$PROJECT_ROOT/reports"

mkdir -p "$LOG_DIR" "$CONFIG_DIR" "$REPORT_DIR"

# –¶–≤–µ—Ç–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
PURPLE='\033[0;35m'
NC='\033[0m'

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
LOG_FILES=(
    "/var/log/syslog"
    "/var/log/auth.log" 
    "/var/log/kern.log"
    "/var/log/dpkg.log"
)

# –§—É–Ω–∫—Ü–∏–∏ –≤—ã–≤–æ–¥–∞
print_header() {
    echo -e "${CYAN}"
    echo "üìä ==========================================="
    echo "   –ê–ù–ê–õ–ò–ó–ê–¢–û–† –°–ò–°–¢–ï–ú–ù–´–• –õ–û–ì–û–í v1.1"
    echo "   $(date)"
    echo "   –ê–≤—Ç–æ—Ä: g1if"
    echo "==========================================="
    echo -e "${NC}"
}

print_section() {
    echo -e "${BLUE}üìÅ $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

show_help() {
    print_header
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–ö–û–ú–ê–ù–î–ê]"
    echo ""
    echo "–ö–æ–º–∞–Ω–¥—ã:"
    echo "  errors     - –ü–æ–∏—Å–∫ –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö"
    echo "  security   - –ü–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
    echo "  stats      - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–≥–æ–≤"
    echo "  monitor    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
    echo "  report     - –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç"
    echo "  help       - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0 errors"
    echo "  $0 security"
    echo "  $0 monitor"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ª–æ–≥–æ–≤
check_log_access() {
    local accessible_logs=()
    
    for log_file in "${LOG_FILES[@]}"; do
        if [ -r "$log_file" ]; then
            accessible_logs+=("$log_file")
            print_success "–î–æ—Å—Ç—É–ø–µ–Ω: $log_file"
        elif [ -f "$log_file" ] && [ ! -r "$log_file" ]; then
            print_warning "–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —á—Ç–µ–Ω–∏–µ: $log_file"
        else
            print_error "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $log_file"
        fi
    done
    
    if [ ${#accessible_logs[@]} -eq 0 ]; then
        print_error "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ–≥–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
        echo ""
        echo "üí° –†–µ—à–µ–Ω–∏–µ: –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å sudo –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞"
        return 1
    fi
    
    return 0
}

analyze_errors() {
    print_section "–ü–û–ò–°–ö –û–®–ò–ë–û–ö –í –õ–û–ì–ê–•"
    
    for log_file in "${LOG_FILES[@]}"; do
        if [ -r "$log_file" ]; then
            echo -e "\n${PURPLE}üìã –ê–Ω–∞–ª–∏–∑: $(basename "$log_file")${NC}"
            
            # –†–∞–∑–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –æ—à–∏–±–æ–∫
	critical_count=$(sudo grep -i "error\|fail\|critical" "$log_file" 2>/dev/null | wc -l || echo "0")
	warning_count=$(sudo grep -i "warning" "$log_file" 2>/dev/null | wc -l || echo "0")

            if [ "$critical_count" -gt 0 ]; then
                print_error "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏: $critical_count"
            else
                print_success "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫: 0"
            fi
            
            if [ "$warning_count" -gt 0 ]; then
                print_warning "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: $warning_count"
            else
                print_success "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: 0"
            fi
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –æ—à–∏–±–∫–∏
            if [ "$critical_count" -gt 0 ]; then
                echo "  üîç –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:"
                sudo grep -i "error\|fail\|critical" "$log_file" 2>/dev/null | tail -3 | while read line; do
                    echo "    üìç $(echo "$line" | cut -d' ' -f1-3) ..."
                done
            fi
        fi
    done
}

analyze_security() {
    print_section "–°–û–ë–´–¢–ò–Ø –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò"
    
    if [ -r "/var/log/auth.log" ]; then
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        failed_logins=$(sudo grep -c "Failed password" /var/log/auth.log 2>/dev/null || echo "0")
        successful_logins=$(sudo grep -c "Accepted password" /var/log/auth.log 2>/dev/null || echo "0")
        invalid_users=$(sudo grep -c "Invalid user" /var/log/auth.log 2>/dev/null || echo "0")
        
        echo "  üîê –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:"
        echo "    üö´ –ù–µ—É–¥–∞—á–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤: $failed_logins"
        echo "    ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤: $successful_logins"
        echo "    üë§ –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: $invalid_users"
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        if [ "$failed_logins" -gt 0 ] || [ "$invalid_users" -gt 0 ]; then
            echo ""
            echo "  üîç –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:"
            sudo grep -i "failed\|invalid\|authentication failure" /var/log/auth.log 2>/dev/null | tail -3 | while read line; do
                echo "    ‚ö†Ô∏è  $(echo "$line" | cut -d' ' -f1-3 | tail -c 50)..."
            done
        fi
    else
        print_warning "–õ–æ–≥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
}

generate_stats() {
    print_section "–°–¢–ê–¢–ò–°–¢–ò–ö–ê –õ–û–ì–û–í"
    
    local total_size=0
    local total_lines=0
    
    for log_file in "${LOG_FILES[@]}"; do
        if [ -r "$log_file" ]; then
            size=$(sudo du -b "$log_file" 2>/dev/null | cut -f1 || echo "0")
            lines=$(sudo wc -l "$log_file" 2>/dev/null | awk '{print $1}' || echo "0")
            modified=$(sudo stat -c %y "$log_file" 2>/dev/null | cut -d' ' -f1 || echo "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            
            total_size=$((total_size + size))
            total_lines=$((total_lines + lines))
            
            echo "  üìä $(basename "$log_file"):"
            echo "    üìè –†–∞–∑–º–µ—Ä: $(numfmt --to=iec $size)"
            echo "    üìÑ –°—Ç—Ä–æ–∫: $lines"
            echo "    üìÖ –ò–∑–º–µ–Ω–µ–Ω: $modified"
        fi
    done
    
    echo ""
    echo "  üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"
    echo "    üíæ –í—Å–µ–≥–æ –¥–∞–Ω–Ω—ã—Ö: $(numfmt --to=iec $total_size)"
    echo "    üìñ –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: $total_lines"
    echo "    üìÇ –§–∞–π–ª–æ–≤: ${#LOG_FILES[@]}"
}

real_time_monitor() {
    print_section "–ú–û–ù–ò–¢–û–†–ò–ù–ì –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò"
    echo "  –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"
    echo "  –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã:"
    
    for log_file in "${LOG_FILES[@]}"; do
        if [ -r "$log_file" ]; then
            echo "    üëÅÔ∏è  $(basename "$log_file")"
        fi
    done
    echo ""
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º multitail –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏–Ω–∞—á–µ –æ–±—ã—á–Ω—ã–π tail
    if command -v multitail >/dev/null 2>&1; then
        echo "  üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º multitail –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞..."
        sudo multitail -M 0 /var/log/syslog -I /var/log/auth.log
    else
        echo "  ‚ÑπÔ∏è  multitail –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π tail"
        echo "  üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt install multitail"
        echo ""
        
        # –ü—Ä–æ—Å—Ç–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å —Ü–≤–µ—Ç–∞–º–∏
        sudo tail -f /var/log/syslog /var/log/auth.log 2>/dev/null | while read line; do
            if echo "$line" | grep -q -i "error\|fail"; then
                echo -e "${RED}‚ùå $line${NC}"
            elif echo "$line" | grep -q -i "warning"; then
                echo -e "${YELLOW}‚ö†Ô∏è  $line${NC}"
            elif echo "$line" | grep -q -i "accepted\|success"; then
                echo -e "${GREEN}‚úÖ $line${NC}"
            else
                echo "  üìù $line"
            fi
        done
    fi
}

generate_report() {
    print_header
    echo "üìÖ –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: $(date)"
    echo "üíª –°–∏—Å—Ç–µ–º–∞: $(uname -a)"
    echo ""
    
    analyze_errors
    echo ""
    analyze_security  
    echo ""
    generate_stats
}

main() {
    case "${1:-}" in
        "errors")
            print_header
            analyze_errors
            ;;
        "security")
            print_header
            analyze_security
            ;;
        "stats")
            print_header
            generate_stats
            ;;
        "monitor")
            print_header
            real_time_monitor
            ;;
        "report")
            generate_report
            ;;
        "help"|"--help"|"-h"|"")
            show_help
            ;;
        *)
            print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $1"
            show_help
            exit 1
            ;;
    esac
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ª–æ–≥–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
if ! check_log_access; then
    echo ""
    echo "üí° –°–æ–≤–µ—Ç: –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å sudo –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞:"
    echo "  sudo ./scripts/log-analyzer.sh [–∫–æ–º–∞–Ω–¥–∞]"
    echo ""
fi

main "$@"
