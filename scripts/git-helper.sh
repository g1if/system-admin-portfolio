#!/bin/bash
# üîß –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π Git –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º–∏
# –ê–≤—Ç–æ—Ä: g1if
# –í–µ—Ä—Å–∏—è: 2.0
# –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: https://github.com/g1if/system-admin-portfolio

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
LOG_DIR="$PROJECT_ROOT/logs"
CONFIG_DIR="$PROJECT_ROOT/configs"
LOG_FILE="$LOG_DIR/git-helper.log"

mkdir -p "$LOG_DIR" "$CONFIG_DIR"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
PURPLE='\033[0;35m'
NC='\033[0m'

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
log() {
    local level=$1
    local message=$2
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] [$level] $message" >> "$LOG_FILE"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
    log "SUCCESS" "$1"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
    log "ERROR" "$1"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
    log "WARNING" "$1"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
    log "INFO" "$1"
}

print_header() {
    echo -e "${CYAN}"
    echo "üîß ==========================================="
    echo "   –ü–†–û–î–í–ò–ù–£–¢–´–ô GIT –ü–û–ú–û–©–ù–ò–ö v2.0"
    echo "   $(date)"
    echo "   –ê–≤—Ç–æ—Ä: g1if"
    echo "==========================================="
    echo -e "${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Git
check_git_installed() {
    if ! command -v git &> /dev/null; then
        print_error "Git –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt install git"
        exit 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
check_git_repo() {
    if ! git rev-parse --git-dir > /dev/null 2>&1; then
        print_error "–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º"
        return 1
    fi
    return 0
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
get_repo_info() {
    local repo_name=$(basename -s .git $(git config --get remote.origin.url 2>/dev/null) 2>/dev/null || echo "N/A")
    local current_branch=$(git branch --show-current 2>/dev/null || echo "N/A")
    local remote_url=$(git config --get remote.origin.url 2>/dev/null || echo "N/A")
    
    echo "  üìÅ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: $repo_name"
    echo "  üåø –í–µ—Ç–∫–∞: $current_branch"
    echo "  üåê –£–¥–∞–ª–µ–Ω–Ω—ã–π: $remote_url"
}

# –°—Ç–∞—Ç—É—Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
cmd_status() {
    print_header
    print_info "–°—Ç–∞—Ç—É—Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
    
    if ! check_git_repo; then
        return 1
    fi
    
    get_repo_info
    echo ""
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    git status
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–∏—Ç–æ–≤ –≤–ø–µ—Ä–µ–¥/–ø–æ–∑–∞–¥–∏
    local ahead_behind=$(git rev-list --left-right --count HEAD...origin/$(git branch --show-current) 2>/dev/null || echo "0 0")
    local ahead=$(echo $ahead_behind | awk '{print $1}')
    local behind=$(echo $ahead_behind | awk '{print $2}')
    
    if [ "$ahead" -gt 0 ] || [ "$behind" -gt 0 ]; then
        echo ""
        echo "  üìä –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º:"
        echo "    üì§ –í–ø–µ—Ä–µ–¥–∏ –Ω–∞ $ahead –∫–æ–º–º–∏—Ç–æ–≤"
        echo "    üì• –ü–æ–∑–∞–¥–∏ –Ω–∞ $behind –∫–æ–º–º–∏—Ç–æ–≤"
    fi
}

# –£–º–Ω—ã–π –∫–æ–º–º–∏—Ç —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
cmd_commit() {
    local message="${2:-}"
    local type="${3:-feat}"
    
    print_header
    print_info "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–º–º–∏—Ç–∞"
    
    if ! check_git_repo; then
        return 1
    fi
    
    if [ -z "$message" ]; then
        print_error "–£–∫–∞–∂–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞"
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 commit \"—Å–æ–æ–±—â–µ–Ω–∏–µ\" [—Ç–∏–ø]"
        echo "–¢–∏–ø—ã: feat, fix, docs, style, refactor, test, chore"
        return 1
    fi
    
    get_repo_info
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if git diff-index --quiet HEAD -- 2>/dev/null; then
        print_warning "–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞"
        return 0
    fi
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    print_info "–ò–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∫–æ–º–º–∏—Ç–∞:"
    git status --short
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    echo ""
    read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –∫–æ–º–º–∏—Ç–æ–º? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_info "–ö–æ–º–º–∏—Ç –æ—Ç–º–µ–Ω–µ–Ω"
        return 0
    fi
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞ —Å conventional commits
    local full_message="$type: $message"
    
    git add .
    
    if git commit -m "$full_message"; then
        print_success "–ö–æ–º–º–∏—Ç —Å–æ–∑–¥–∞–Ω: $full_message"
        log "COMMIT" "$full_message"
    else
        print_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–º–∏—Ç–∞"
        return 1
    fi
}

# –ü—É—à —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –∏ –æ–ø—Ü–∏—è–º–∏
cmd_push() {
    local branch="${2:-}"
    local force="${3:-}"
    
    print_header
    print_info "–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π"
    
    if ! check_git_repo; then
        return 1
    fi
    
    if [ -z "$branch" ]; then
        branch=$(git branch --show-current)
    fi
    
    get_repo_info
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    if ! git remote get-url origin > /dev/null 2>&1; then
        print_error "–£–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: $0 setup"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è..."
    git fetch origin
    
    local ahead_behind=$(git rev-list --left-right --count HEAD...origin/$branch 2>/dev/null || echo "0 0")
    local ahead=$(echo $ahead_behind | awk '{print $1}')
    local behind=$(echo $ahead_behind | awk '{print $2}')
    
    if [ "$behind" -gt 0 ]; then
        print_warning "–£–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏–º–µ–µ—Ç –Ω–æ–≤—ã–µ –∫–æ–º–º–∏—Ç—ã ($behind)"
        read -p "–í—ã–ø–æ–ª–Ω–∏—Ç—å pull –ø–µ—Ä–µ–¥ push? (Y/n): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Nn]$ ]]; then
            cmd_pull "$branch"
        fi
    fi
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ push
    print_info "–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ $branch..."
    
    local push_cmd="git push origin $branch"
    if [ "$force" = "force" ]; then
        push_cmd="git push --force-with-lease origin $branch"
        print_warning "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ (force-with-lease)"
    fi
    
    if $push_cmd; then
        print_success "–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ $branch"
        log "PUSH" "–£—Å–ø–µ—à–Ω—ã–π push –≤ $branch"
    else
        print_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π"
        return 1
    fi
}

# –ü—É–ª —Å –æ–ø—Ü–∏—è–º–∏
cmd_pull() {
    local branch="${2:-}"
    
    print_header
    print_info "–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π"
    
    if ! check_git_repo; then
        return 1
    fi
    
    if [ -z "$branch" ]; then
        branch=$(git branch --show-current)
    fi
    
    get_repo_info
    echo ""
    
    print_info "–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–∑ $branch..."
    
    if git pull origin "$branch"; then
        print_success "–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã"
        log "PULL" "–£—Å–ø–µ—à–Ω—ã–π pull –∏–∑ $branch"
    else
        print_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π"
        return 1
    fi
}

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ª–æ–≥
cmd_log() {
    local lines="${2:-10}"
    
    print_header
    print_info "–ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–º–∏—Ç–æ–≤"
    
    if ! check_git_repo; then
        return 1
    fi
    
    get_repo_info
    echo ""
    
    print_info "–ü–æ—Å–ª–µ–¥–Ω–∏–µ $lines –∫–æ–º–º–∏—Ç–æ–≤:"
    git log --oneline --graph --decorate -n "$lines" --color=always
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
cmd_setup() {
    local username="${2:-}"
    local email="${3:-}"
    local repo_url="${4:-}"
    
    print_header
    print_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if [ -n "$username" ]; then
        git config user.name "$username"
        print_success "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: $username"
    fi
    
    if [ -n "$email" ]; then
        git config user.email "$email"
        print_success "Email —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $email"
    fi
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    if [ -n "$repo_url" ]; then
        if git remote get-url origin > /dev/null 2>&1; then
            git remote set-url origin "$repo_url"
            print_success "URL —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω: $repo_url"
        else
            git remote add origin "$repo_url"
            print_success "–£–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω: $repo_url"
        fi
    fi
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    git config push.default simple
    git config pull.rebase false
    git config core.autocrlf input
    
    print_success "–ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Git –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    echo ""
    print_info "–¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:"
    git config --list | grep -E "(user.name|user.email|remote.origin.url)" | while read -r line; do
        echo "  üîß $line"
    done
}

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤–µ—Ç–∫–∏
cmd_branch() {
    local action="${2:-}"
    local branch_name="${3:-}"
    
    print_header
    
    if ! check_git_repo; then
        return 1
    fi
    
    case $action in
        "create")
            if [ -z "$branch_name" ]; then
                print_error "–£–∫–∞–∂–∏—Ç–µ –∏–º—è –≤–µ—Ç–∫–∏"
                return 1
            fi
            
            if git checkout -b "$branch_name"; then
                print_success "–í–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞: $branch_name"
                log "BRANCH" "–°–æ–∑–¥–∞–Ω–∞ –≤–µ—Ç–∫–∞: $branch_name"
            else
                print_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–µ—Ç–∫–∏"
            fi
            ;;
        
        "list")
            print_info "–°–ø–∏—Å–æ–∫ –≤–µ—Ç–æ–∫:"
            git branch -a --color=always
            ;;
        
        "delete")
            if [ -z "$branch_name" ]; then
                print_error "–£–∫–∞–∂–∏—Ç–µ –∏–º—è –≤–µ—Ç–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
                return 1
            fi
            
            local current_branch=$(git branch --show-current)
            if [ "$branch_name" = "$current_branch" ]; then
                print_error "–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É. –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ –¥—Ä—É–≥—É—é –≤–µ—Ç–∫—É."
                return 1
            fi
            
            read -p "–£–¥–∞–ª–∏—Ç—å –≤–µ—Ç–∫—É '$branch_name'? (y/N): " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                if git branch -d "$branch_name"; then
                    print_success "–í–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞: $branch_name"
                else
                    print_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ—Ç–∫–∏"
                fi
            else
                print_info "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
            fi
            ;;
        
        *)
            print_info "–¢–µ–∫—É—â–∏–µ –≤–µ—Ç–∫–∏:"
            git branch --color=always
            ;;
    esac
}

# –°–ª–∏—è–Ω–∏–µ –≤–µ—Ç–æ–∫
cmd_merge() {
    local source_branch="${2:-}"
    
    print_header
    print_info "–°–ª–∏—è–Ω–∏–µ –≤–µ—Ç–æ–∫"
    
    if ! check_git_repo; then
        return 1
    fi
    
    if [ -z "$source_branch" ]; then
        print_error "–£–∫–∞–∂–∏—Ç–µ –≤–µ—Ç–∫—É –¥–ª—è —Å–ª–∏—è–Ω–∏—è"
        return 1
    fi
    
    local current_branch=$(git branch --show-current)
    
    echo "  üåø –¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞: $current_branch"
    echo "  üîó –í–µ—Ç–∫–∞ –¥–ª—è —Å–ª–∏—è–Ω–∏—è: $source_branch"
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤–µ—Ç–∫–∏
    if ! git show-ref --verify --quiet "refs/heads/$source_branch"; then
        print_error "–í–µ—Ç–∫–∞ '$source_branch' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        return 1
    fi
    
    read -p "–í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–ª–∏—è–Ω–∏–µ $source_branch –≤ $current_branch? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_info "–°–ª–∏—è–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
        return 0
    fi
    
    if git merge "$source_branch"; then
        print_success "–°–ª–∏—è–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ"
        log "MERGE" "–°–ª–∏—è–Ω–∏–µ $source_branch –≤ $current_branch"
    else
        print_error "–ö–æ–Ω—Ñ–ª–∏–∫—Ç –ø—Ä–∏ —Å–ª–∏—è–Ω–∏–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ."
        return 1
    fi
}

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞–∑–ª–∏—á–∏–π
cmd_diff() {
    local file_path="${2:-}"
    
    print_header
    print_info "–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞–∑–ª–∏—á–∏–π"
    
    if ! check_git_repo; then
        return 1
    fi
    
    if [ -n "$file_path" ]; then
        git diff "$file_path"
    else
        git diff
    fi
}

# –û—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
cmd_undo() {
    local target="${2:-}"
    
    print_header
    
    if ! check_git_repo; then
        return 1
    fi
    
    case $target in
        "add")
            print_info "–û—Ç–º–µ–Ω–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤"
            git reset
            print_success "–ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞"
            ;;
        "commit")
            print_info "–û—Ç–º–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–º–∏—Ç–∞ (—Å–æ—Ö—Ä–∞–Ω—è—è –∏–∑–º–µ–Ω–µ–Ω–∏—è)"
            git reset --soft HEAD~1
            print_success "–ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç –æ—Ç–º–µ–Ω–µ–Ω, –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"
            ;;
        "hard")
            print_warning "–ñ–µ—Å—Ç–∫–∞—è –æ—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π (–ø–æ—Ç–µ—Ä—è –¥–∞–Ω–Ω—ã—Ö!)"
            read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                git reset --hard HEAD
                print_success "–í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã"
            else
                print_info "–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"
            fi
            ;;
        *)
            print_info "–û—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –Ω–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö"
            git checkout -- .
            print_success "–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–∞—Ö –æ—Ç–º–µ–Ω–µ–Ω—ã"
            ;;
    esac
}

# –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (pull + push)
cmd_sync() {
    print_header
    print_info "–ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
    
    if ! check_git_repo; then
        return 1
    fi
    
    get_repo_info
    echo ""
    
    # Pull
    print_info "–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π..."
    if cmd_pull; then
        # Push
        print_info "–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π..."
        if cmd_push; then
            print_success "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
            log "SYNC" "–ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
        else
            print_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π"
            return 1
        fi
    else
        print_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π"
        return 1
    fi
}

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
cmd_info() {
    print_header
    print_info "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏"
    
    if ! check_git_repo; then
        return 1
    fi
    
    get_repo_info
    echo ""
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print_info "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:"
    local total_commits=$(git rev-list --count HEAD 2>/dev/null || echo "0")
    local total_branches=$(git branch -r | wc -l | tr -d ' ')
    local total_tags=$(git tag | wc -l | tr -d ' ')
    local repo_size=$(du -sh .git 2>/dev/null | cut -f1 || echo "N/A")
    
    echo "  üìä –ö–æ–º–º–∏—Ç–æ–≤: $total_commits"
    echo "  üåø –í–µ—Ç–æ–∫: $total_branches"
    echo "  üè∑Ô∏è  –¢–µ–≥–æ–≤: $total_tags"
    echo "  üíæ –†–∞–∑–º–µ—Ä: $repo_size"
    echo ""
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã
    print_info "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã:"
    git log --oneline -5 --color=always
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
cmd_init() {
    local repo_name="${2:-}"
    
    print_header
    print_info "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
    
    if git rev-parse --git-dir > /dev/null 2>&1; then
        print_warning "–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º"
        return 0
    fi
    
    if [ -n "$repo_name" ]; then
        mkdir -p "$repo_name"
        cd "$repo_name"
    fi
    
    git init
    print_success "–ù–æ–≤—ã–π Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ README
    if [ ! -f "README.md" ]; then
        cat > README.md << EOF
# $(basename "$(pwd)")

–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞.

## –£—Å—Ç–∞–Ω–æ–≤–∫–∞

\`\`\`bash
# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ
\`\`\`

## –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ

–û–ø–∏—Å–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞.
EOF
        print_success "–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª README.md"
    fi
    
    log "INIT" "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"
}

# –ü–æ–º–æ—â—å
cmd_help() {
    print_header
    echo -e "${CYAN}üîß –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π Git –ø–æ–º–æ—â–Ω–∏–∫ - –°–ø—Ä–∞–≤–∫–∞${NC}"
    echo ""
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–ö–û–ú–ê–ù–î–ê] [–ü–ê–†–ê–ú–ï–¢–†–´]"
    echo ""
    echo "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
    echo "  status                      - –°—Ç–∞—Ç—É—Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
    echo "  commit \"—Å–æ–æ–±—â–µ–Ω–∏–µ\" [—Ç–∏–ø]   - –£–º–Ω—ã–π –∫–æ–º–º–∏—Ç"
    echo "  push [–≤–µ—Ç–∫–∞] [force]        - –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π"
    echo "  pull [–≤–µ—Ç–∫–∞]                - –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π"
    echo "  sync                        - –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è"
    echo "  log [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]            - –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–º–∏—Ç–æ–≤"
    echo ""
    echo "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç–∫–∞–º–∏:"
    echo "  branch                      - –°–ø–∏—Å–æ–∫ –≤–µ—Ç–æ–∫"
    echo "  branch create <–∏–º—è>         - –°–æ–∑–¥–∞—Ç—å –≤–µ—Ç–∫—É"
    echo "  branch list                 - –í—Å–µ –≤–µ—Ç–∫–∏"
    echo "  branch delete <–∏–º—è>         - –£–¥–∞–ª–∏—Ç—å –≤–µ—Ç–∫—É"
    echo "  merge <–≤–µ—Ç–∫–∞>               - –°–ª–∏—è–Ω–∏–µ –≤–µ—Ç–æ–∫"
    echo ""
    echo "–£—Ç–∏–ª–∏—Ç—ã:"
    echo "  diff [—Ñ–∞–π–ª]                 - –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞–∑–ª–∏—á–∏–π"
    echo "  undo [add|commit|hard]      - –û—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π"
    echo "  info                        - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–ø–æ"
    echo "  init [–∏–º—è]                  - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ"
    echo "  setup [user] [email] [url]  - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Git"
    echo "  help                        - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0 status"
    echo "  $0 commit \"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç\" feat"
    echo "  $0 push main"
    echo "  $0 branch create new-feature"
    echo "  $0 sync"
    echo "  $0 setup \"John Doe\" \"john@example.com\""
    echo ""
    echo -e "${YELLOW}üí° –¢–∏–ø—ã –∫–æ–º–º–∏—Ç–æ–≤: feat, fix, docs, style, refactor, test, chore${NC}"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    check_git_installed
    
    case "${1:-help}" in
        "status") cmd_status "$@" ;;
        "commit") cmd_commit "$@" ;;
        "push") cmd_push "$@" ;;
        "pull") cmd_pull "$@" ;;
        "log") cmd_log "$@" ;;
        "setup") cmd_setup "$@" ;;
        "branch") cmd_branch "$@" ;;
        "merge") cmd_merge "$@" ;;
        "diff") cmd_diff "$@" ;;
        "undo") cmd_undo "$@" ;;
        "sync") cmd_sync "$@" ;;
        "info") cmd_info "$@" ;;
        "init") cmd_init "$@" ;;
        "help"|"--help"|"-h") cmd_help ;;
        *)
            print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $1"
            cmd_help
            exit 1
            ;;
    esac
}

main "$@"
