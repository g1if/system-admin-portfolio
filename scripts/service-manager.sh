#!/bin/bash
# üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –∏ –∞–≤—Ç–æ-–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
# –ê–≤—Ç–æ—Ä: g1if
# –í–µ—Ä—Å–∏—è: 2.0
# –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: https://github.com/g1if/system-admin-portfolio

set -e

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
LOG_DIR="$PROJECT_ROOT/logs"
CONFIG_DIR="$PROJECT_ROOT/configs"
REPORTS_DIR="$PROJECT_ROOT/reports"
LOG_FILE="$LOG_DIR/service-manager.log"
MAIN_CONFIG="$CONFIG_DIR/service-manager.conf"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
mkdir -p "$LOG_DIR" "$CONFIG_DIR" "$REPORTS_DIR"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    local missing=()
    
    for cmd in systemctl service journalctl; do
        if ! command -v "$cmd" &> /dev/null; then
            missing+=("$cmd")
        fi
    done
    
    if [ ${#missing[@]} -gt 0 ]; then
        echo "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã: ${missing[*]}"
        return 1
    fi
    
    return 0
}

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
log() {
    local level=$1
    local message=$2
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    echo "[$timestamp] [$level] $message" >> "$LOG_FILE"
    
    # –¢–∞–∫–∂–µ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –µ—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    if [ "$MONITOR_MODE" != "true" ]; then
        case $level in
            "ERROR") echo -e "${RED}[ERROR] $message${NC}" ;;
            "WARN") echo -e "${YELLOW}[WARN] $message${NC}" ;;
            "INFO") echo -e "${BLUE}[INFO] $message${NC}" ;;
            *) echo "[$level] $message" ;;
        esac
    fi
}

print_header() {
    echo -e "${MAGENTA}"
    echo "üöÄ ==========================================="
    echo "   –ü–†–û–î–í–ò–ù–£–¢–´–ô –ú–ï–ù–ï–î–ñ–ï–† –°–ï–†–í–ò–°–û–í v2.0"
    echo "   $(date)"
    echo "   –ê–≤—Ç–æ—Ä: g1if"
    echo "==========================================="
    echo -e "${NC}"
}

print_section() {
    echo -e "${BLUE}üõ†Ô∏è  $1${NC}"
}

print_status() {
    local status=$1
    local message=$2
    case $status in
        "OK") echo -e "  ${GREEN}‚úÖ $message${NC}" ;;
        "WARN") echo -e "  ${YELLOW}‚ö†Ô∏è  $message${NC}" ;;
        "ERROR") echo -e "  ${RED}‚ùå $message${NC}" ;;
        "INFO") echo -e "  ${BLUE}‚ÑπÔ∏è  $message${NC}" ;;
        "CRITICAL") echo -e "  ${RED}üö® $message${NC}" ;;
    esac
}

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
create_config() {
    cat > "$MAIN_CONFIG" << 'EOF'
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ v2.0

# –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
CRITICAL_SERVICES=("ssh" "nginx" "mysql" "postgresql" "docker" "apache2" "systemd-journald" "dbus" "network-manager")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
MONITOR_REFRESH_RATE=5
MONITOR_TIMEOUT=30
MAX_RESTART_ATTEMPTS=3
RESTART_DELAY=5

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
ALERT_ENABLED=true
ALERT_METHODS=("console" "log")  # console, log, email, telegram
ALERT_EMAIL=""
TELEGRAM_BOT_TOKEN=""
TELEGRAM_CHAT_ID=""

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–æ–≤
REPORT_ENABLED=true
REPORT_RETENTION_DAYS=7
AUTO_GENERATE_REPORT=true

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
ENABLE_AUTO_RECOVERY=true
LOG_RETENTION_DAYS=30
CHECK_DEPENDENCIES=true
EOF
    print_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: $MAIN_CONFIG"
}

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_config() {
    if [ -f "$MAIN_CONFIG" ]; then
        source "$MAIN_CONFIG"
        log "INFO" "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ $MAIN_CONFIG"
    else
        log "WARN" "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."
        # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        CRITICAL_SERVICES=("ssh" "nginx" "mysql" "postgresql" "docker" "apache2")
        MONITOR_REFRESH_RATE=5
        MAX_RESTART_ATTEMPTS=3
        RESTART_DELAY=5
        ALERT_ENABLED=true
        ALERT_METHODS=("console" "log")
        ENABLE_AUTO_RECOVERY=true
    fi
}

# –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
send_alert() {
    local level=$1
    local message=$2
    local service=${3:-""}
    
    if [ "$ALERT_ENABLED" != "true" ]; then
        return
    fi
    
    local full_message="[$level] $message"
    if [ -n "$service" ]; then
        full_message="[$level] –°–µ—Ä–≤–∏—Å $service: $message"
    fi
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ–≥–¥–∞
    log "$level" "$message"
    
    # Console –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
    if [[ " ${ALERT_METHODS[@]} " =~ " console " ]]; then
        case $level in
            "CRITICAL") print_status "CRITICAL" "$message" ;;
            "ERROR") print_status "ERROR" "$message" ;;
            "WARN") print_status "WARN" "$message" ;;
            *) print_status "INFO" "$message" ;;
        esac
    fi
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å email –∏ telegram –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
    # –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ alert-system.sh
}

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É –∏ –º–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Ä–≤–∏—Å–æ–≤
detect_service_manager() {
    if command -v "systemctl" >/dev/null 2>&1; then
        echo "systemd"
        log "INFO" "–û–±–Ω–∞—Ä—É–∂–µ–Ω systemd"
    elif command -v "service" >/dev/null 2>&1; then
        echo "sysvinit"
        log "INFO" "–û–±–Ω–∞—Ä—É–∂–µ–Ω sysvinit"
    elif command -v "rc-status" >/dev/null 2>&1; then
        echo "openrc"
        log "INFO" "–û–±–Ω–∞—Ä—É–∂–µ–Ω OpenRC"
    else
        echo "unknown"
        log "ERROR" "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Ä–≤–∏—Å–æ–≤"
    fi
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞
get_service_status() {
    local service=$1
    local manager=$2
    
    case $manager in
        "systemd")
            if systemctl is-active --quiet "$service" 2>/dev/null; then
                echo "active"
            elif systemctl is-enabled --quiet "$service" 2>/dev/null; then
                echo "inactive"
            else
                echo "not-found"
            fi
            ;;
        "sysvinit")
            if service "$service" status >/dev/null 2>&1; then
                echo "active"
            else
                echo "inactive"
            fi
            ;;
        "openrc")
            if rc-status --servicelist | grep -q "$service" && rc-service "$service" status >/dev/null 2>&1; then
                echo "active"
            else
                echo "inactive"
            fi
            ;;
        *)
            echo "unknown"
            ;;
    esac
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–∏—Å–µ
get_service_details() {
    local service=$1
    local manager=$2
    
    case $manager in
        "systemd")
            local status=$(systemctl is-active "$service" 2>/dev/null || echo "unknown")
            local enabled=$(systemctl is-enabled "$service" 2>/dev/null || echo "unknown")
            local memory=$(systemctl show "$service" --property=MemoryCurrent | cut -d= -f2)
            local cpu_usage=$(ps -o pid,comm,%cpu --ppid 1 | grep "$service" | awk '{sum+=$3} END {print sum}')
            
            echo "Status: $status"
            echo "Enabled: $enabled"
            echo "Memory: ${memory:-0} bytes"
            echo "CPU: ${cpu_usage:-0}%"
            ;;
        *)
            echo "–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è systemd"
            ;;
    esac
}

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–º
manage_service() {
    local service=$1
    local action=$2
    local manager=$3
    local attempts=1
    
    case $manager in
        "systemd")
            case $action in
                "start") 
                    sudo systemctl start "$service"
                    ;;
                "stop") 
                    sudo systemctl stop "$service"
                    ;;
                "restart") 
                    sudo systemctl restart "$service"
                    ;;
                "enable") 
                    sudo systemctl enable "$service"
                    ;;
                "disable") 
                    sudo systemctl disable "$service"
                    ;;
                "reload") 
                    sudo systemctl reload "$service"
                    ;;
                "status") 
                    systemctl status "$service" --no-pager
                    ;;
            esac
            ;;
        "sysvinit")
            case $action in
                "start") sudo service "$service" start ;;
                "stop") sudo service "$service" stop ;;
                "restart") sudo service "$service" restart ;;
                "status") service "$service" status ;;
                *) echo "–î–µ–π—Å—Ç–≤–∏–µ $action –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ sysvinit" ;;
            esac
            ;;
        "openrc")
            case $action in
                "start") sudo rc-service "$service" start ;;
                "stop") sudo rc-service "$service" stop ;;
                "restart") sudo rc-service "$service" restart ;;
                "status") sudo rc-service "$service" status ;;
                *) echo "–î–µ–π—Å—Ç–≤–∏–µ $action –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ OpenRC" ;;
            esac
            ;;
    esac
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
list_services() {
    local manager=$1
    local filter=${2:-""}
    
    case $manager in
        "systemd")
            if [ -z "$filter" ]; then
                systemctl list-units --type=service --all --no-legend | awk '{print $1}' | sed 's/\.service$//'
            else
                systemctl list-units --type=service --all --no-legend | grep "$filter" | awk '{print $1}' | sed 's/\.service$//'
            fi
            ;;
        "sysvinit")
            service --status-all 2>/dev/null | grep -E "\[ \+ \]|\[ \- \]" | awk '{print $4}' || \
            ls /etc/init.d/ | grep -v README
            ;;
        "openrc")
            rc-status --servicelist 2>/dev/null || echo "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ OpenRC"
            ;;
    esac
}

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
monitor_services() {
    local manager=$1
    local refresh_rate=${2:-$MONITOR_REFRESH_RATE}
    local monitor_timeout=${3:-$MONITOR_TIMEOUT}
    
    export MONITOR_MODE="true"
    
    print_header
    echo -e "${CYAN}üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–∏—Å–æ–≤ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ ${refresh_rate} —Å–µ–∫)${NC}"
    echo -e "${CYAN}‚è∞ –¢–∞–π–º–∞—É—Ç: ${monitor_timeout} —Å–µ–∫ | –î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C${NC}"
    
    local start_time=$(date +%s)
    local counter=0
    
    while true; do
        local current_time=$(date +%s)
        local elapsed=$((current_time - start_time))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
        if [ $elapsed -ge $monitor_timeout ]; then
            echo -e "${YELLOW}‚è∞ –í—Ä–µ–º—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏—Å—Ç–µ–∫–ª–æ${NC}"
            break
        fi
        
        counter=$((counter + 1))
        clear
        print_header
        print_section "–ú–û–ù–ò–¢–û–†–ò–ù–ì –°–ï–†–í–ò–°–û–í - –¶–∏–∫–ª #$counter ($(date '+%H:%M:%S'))"
        echo -e "${CYAN}–ü—Ä–æ—à–ª–æ: ${elapsed} —Å–µ–∫ | –û—Å—Ç–∞–ª–æ—Å—å: $((monitor_timeout - elapsed)) —Å–µ–∫${NC}"
        echo ""
        
        # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        case $manager in
            "systemd")
                echo -e "${YELLOW}üîß –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã:${NC}"
                systemctl --no-pager --state=failed | head -5
                echo ""
                ;;
        esac
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã
        echo -e "${YELLOW}üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã:${NC}"
        local has_critical_issues=0
        
        for service in "${CRITICAL_SERVICES[@]}"; do
            local status=$(get_service_status "$service" "$manager")
            local status_icon="‚úÖ"
            local color="$GREEN"
            
            case $status in
                "active") 
                    status_icon="‚úÖ"
                    color="$GREEN"
                    ;;
                "inactive") 
                    status_icon="üü°" 
                    color="$YELLOW"
                    has_critical_issues=$((has_critical_issues + 1))
                    ;;
                "not-found") 
                    status_icon="üîµ"
                    color="$BLUE"
                    ;;
                *) 
                    status_icon="‚ùì"
                    color="$RED"
                    has_critical_issues=$((has_critical_issues + 1))
                    ;;
            esac
            
            echo -e "  ${color}${status_icon} $service: $status${NC}"
        done
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        echo ""
        echo -e "${CYAN}üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:${NC}"
        echo -e "  –í—Å–µ–≥–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤: ${#CRITICAL_SERVICES[@]}"
        echo -e "  –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤: $has_critical_issues"
        echo -e "  –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑: ${refresh_rate} —Å–µ–∫"
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        if [ "$ENABLE_AUTO_RECOVERY" = "true" ] && [ $has_critical_issues -gt 0 ]; then
            echo ""
            echo -e "${YELLOW}üîÑ –ê–≤—Ç–æ-–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ...${NC}"
            for service in "${CRITICAL_SERVICES[@]}"; do
                local status=$(get_service_status "$service" "$manager")
                if [ "$status" = "inactive" ]; then
                    echo -e "  –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è $service..."
                    manage_service "$service" "start" "$manager" >/dev/null 2>&1
                    sleep 2
                    local new_status=$(get_service_status "$service" "$manager")
                    if [ "$new_status" = "active" ]; then
                        echo -e "  ${GREEN}‚úÖ $service –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
                    else
                        echo -e "  ${RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å $service${NC}"
                    fi
                fi
            done
        fi
        
        sleep "$refresh_rate"
    done
    
    export MONITOR_MODE="false"
}

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ —Å–µ—Ä–≤–∏—Å–∞
analyze_service_logs() {
    local service=$1
    local lines=${2:-50}
    local time_filter=${3:-"1 hour ago"}
    
    print_section "–ê–ù–ê–õ–ò–ó –õ–û–ì–û–í –°–ï–†–í–ò–°–ê: $service"
    
    # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ —á–µ—Ä–µ–∑ journalctl
    if command -v journalctl >/dev/null 2>&1; then
        echo -e "${YELLOW}üìã –õ–æ–≥–∏ —á–µ—Ä–µ–∑ journalctl (–ø–æ—Å–ª–µ–¥–Ω–∏–µ $lines —Å—Ç—Ä–æ–∫):${NC}"
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ª–æ–≥–∏
        sudo journalctl -u "$service" -n "$lines" --no-pager 2>/dev/null && return 0
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –ø–æ –∏–º–µ–Ω–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
        sudo journalctl _COMM="$service" -n "$lines" --no-pager 2>/dev/null && return 0
    fi
    
    # –ü–æ–∏—Å–∫ –ª–æ–≥–æ–≤ –≤ /var/log
    echo -e "${YELLOW}üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤ –≤ /var/log:${NC}"
    local log_files=(
        "/var/log/${service}.log"
        "/var/log/${service}/error.log"
        "/var/log/${service}/access.log"
        "/var/log/syslog"
        "/var/log/messages"
        "/var/log/daemon.log"
    )
    
    for log_file in "${log_files[@]}"; do
        if [ -f "$log_file" ]; then
            echo -e "  üìÅ –§–∞–π–ª: $log_file"
            sudo tail -n "$lines" "$log_file" 2>/dev/null | while read -r line; do
                echo "    $line"
            done
            return 0
        fi
    done
    
    echo -e "  ${RED}‚ùå –§–∞–π–ª—ã –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã${NC}"
    return 1
}

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
auto_recover_service() {
    local service=$1
    local manager=$2
    local max_attempts=${3:-$MAX_RESTART_ATTEMPTS}
    
    print_section "–ê–í–¢–û-–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –°–ï–†–í–ò–°–ê: $service"
    
    local status=$(get_service_status "$service" "$manager")
    local attempt=1
    
    case $status in
        "failed"|"inactive")
            while [ $attempt -le $max_attempts ]; do
                echo -e "${YELLOW}üîÑ –ü–æ–ø—ã—Ç–∫–∞ $attempt –∏–∑ $max_attempts...${NC}"
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                if [ "$status" = "failed" ]; then
                    echo "  –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å..."
                    manage_service "$service" "stop" "$manager" >/dev/null 2>&1
                    sleep 2
                fi
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
                echo "  –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å..."
                manage_service "$service" "start" "$manager" >/dev/null 2>&1
                
                # –ñ–¥–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º
                sleep $RESTART_DELAY
                local new_status=$(get_service_status "$service" "$manager")
                
                if [ "$new_status" = "active" ]; then
                    send_alert "INFO" "–°–µ—Ä–≤–∏—Å $service —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ $attempt –ø–æ–ø—ã—Ç–æ–∫" "$service"
                    print_status "OK" "–°–µ—Ä–≤–∏—Å $service —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                    log "INFO" "–°–µ—Ä–≤–∏—Å $service –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ $attempt –ø–æ–ø—ã—Ç–æ–∫"
                    return 0
                else
                    echo -e "  ${RED}‚ùå –ü–æ–ø—ã—Ç–∫–∞ $attempt –Ω–µ —É–¥–∞–ª–∞—Å—å${NC}"
                    attempt=$((attempt + 1))
                    sleep $RESTART_DELAY
                fi
            done
            
            send_alert "ERROR" "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å $service –ø–æ—Å–ª–µ $max_attempts –ø–æ–ø—ã—Ç–æ–∫" "$service"
            print_status "ERROR" "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å $service"
            
            # –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            echo -e "${YELLOW}üìã –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã:${NC}"
            analyze_service_logs "$service" 20
            ;;
            
        "active")
            print_status "OK" "–°–µ—Ä–≤–∏—Å $service —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
            ;;
            
        "not-found")
            print_status "ERROR" "–°–µ—Ä–≤–∏—Å $service –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ"
            ;;
    esac
    
    return 1
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
generate_report() {
    local manager=$1
    local report_file="$REPORTS_DIR/service-report-$(date +%Y%m%d_%H%M%S).txt"
    
    print_section "–ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–ê"
    
    {
        echo "–û—Ç—á–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤"
        echo "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: $(date)"
        echo "–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Ä–≤–∏—Å–æ–≤: $manager"
        echo "==========================================="
        echo ""
        
        echo "–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –°–ï–†–í–ò–°–´:"
        echo "-------------------"
        for service in "${CRITICAL_SERVICES[@]}"; do
            local status=$(get_service_status "$service" "$manager")
            echo "$service: $status"
        done
        echo ""
        
        echo "–ù–ï–£–î–ê–ß–ù–´–ï –°–ï–†–í–ò–°–´:"
        echo "-----------------"
        case $manager in
            "systemd")
                systemctl --failed --no-legend | while read -r line; do
                    echo "$line"
                done
                ;;
        esac
        echo ""
        
        echo "–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´:"
        echo "-----------------"
        case $manager in
            "systemd")
                echo "–í—Å–µ–≥–æ —Å–µ—Ä–≤–∏—Å–æ–≤: $(systemctl list-units --type=service --all --no-legend | wc -l)"
                echo "–ê–∫—Ç–∏–≤–Ω—ã—Ö: $(systemctl list-units --type=service --state=active --no-legend | wc -l)"
                echo "–ù–µ—É–¥–∞—á–Ω—ã—Ö: $(systemctl list-units --type=service --state=failed --no-legend | wc -l)"
                ;;
        esac
        
    } > "$report_file"
    
    print_status "OK" "–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: $report_file"
    log "INFO" "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –æ—Ç—á–µ—Ç: $report_file"
    echo "$report_file"
}

# –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
validate_service() {
    local service=$1
    local manager=$2
    
    if [ -z "$service" ]; then
        echo -e "${RED}‚ùå –ò–º—è —Å–µ—Ä–≤–∏—Å–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ${NC}"
        return 1
    fi
    
    local status=$(get_service_status "$service" "$manager")
    
    if [ "$status" = "not-found" ]; then
        echo -e "${RED}‚ùå –°–µ—Ä–≤–∏—Å '$service' –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ—Ö–æ–∂–∏–µ —Å–µ—Ä–≤–∏—Å—ã
        local similar=$(list_services "$manager" | grep "$service" | head -5)
        if [ -n "$similar" ]; then
            echo -e "${YELLOW}üí° –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:${NC}"
            echo "$similar"
        fi
        return 1
    fi
    
    return 0
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    load_config
    
    if [ "$CHECK_DEPENDENCIES" = "true" ] && ! check_dependencies; then
        exit 1
    fi
    
    local service_manager=$(detect_service_manager)
    
    if [ "$service_manager" = "unknown" ]; then
        print_status "ERROR" "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Ä–≤–∏—Å–æ–≤"
        exit 1
    fi
    
    print_header
    log "INFO" "–ó–∞–ø—É—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ (–º–µ–Ω–µ–¥–∂–µ—Ä: $service_manager)"
    
    echo -e "${CYAN}üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Ä–≤–∏—Å–æ–≤: $service_manager${NC}"
    
    # –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ç—É—Å
    print_section "–ë–´–°–¢–†–´–ô –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´"
    
    case $service_manager in
        "systemd")
            local failed_count=$(systemctl --failed --no-legend | wc -l)
            if [ "$failed_count" -eq 0 ]; then
                print_status "OK" "–ù–µ—Ç –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
            else
                print_status "ERROR" "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ—É–¥–∞—á–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã: $failed_count"
                systemctl --failed --no-legend | while read -r line; do
                    echo "  ‚ùå $(echo $line | awk '{print $2}')"
                done
            fi
            ;;
    esac
    
    print_section "–°–¢–ê–¢–£–° –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –°–ï–†–í–ò–°–û–í"
    
    local problem_count=0
    for service in "${CRITICAL_SERVICES[@]}"; do
        local status=$(get_service_status "$service" "$service_manager")
        case $status in
            "active") 
                print_status "OK" "$service" 
                ;;
            "inactive") 
                print_status "ERROR" "$service - –û–°–¢–ê–ù–û–í–õ–ï–ù"
                problem_count=$((problem_count + 1))
                ;;
            "not-found") 
                print_status "WARN" "$service - –ù–ï –ù–ê–ô–î–ï–ù"
                ;;
            *) 
                print_status "ERROR" "$service - –ù–ï–ò–ó–í–ï–°–¢–ù–´–ô –°–¢–ê–¢–£–°"
                problem_count=$((problem_count + 1))
                ;;
        esac
    done
    
    echo ""
    if [ $problem_count -eq 0 ]; then
        print_status "OK" "–í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ"
    else
        print_status "ERROR" "–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: $problem_count"
    fi
    
    # –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    if [ "$AUTO_GENERATE_REPORT" = "true" ]; then
        echo ""
        generate_report "$service_manager" > /dev/null
    fi
    
    log "INFO" "–ê–Ω–∞–ª–∏–∑ —Å–µ—Ä–≤–∏—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω. –ü—Ä–æ–±–ª–µ–º: $problem_count"
}

# –ö–æ–º–∞–Ω–¥—ã
cmd_monitor() {
    local manager=$(detect_service_manager)
    local refresh_rate=${2:-$MONITOR_REFRESH_RATE}
    local timeout=${3:-$MONITOR_TIMEOUT}
    monitor_services "$manager" "$refresh_rate" "$timeout"
}

cmd_start() {
    local service="${2:-}"
    local manager=$(detect_service_manager)
    
    if ! validate_service "$service" "$manager"; then
        exit 1
    fi
    
    print_section "–ó–ê–ü–£–°–ö –°–ï–†–í–ò–°–ê: $service"
    manage_service "$service" "start" "$manager"
    log "INFO" "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞: $service"
}

cmd_stop() {
    local service="${2:-}"
    local manager=$(detect_service_manager)
    
    if ! validate_service "$service" "$manager"; then
        exit 1
    fi
    
    print_section "–û–°–¢–ê–ù–û–í–ö–ê –°–ï–†–í–ò–°–ê: $service"
    manage_service "$service" "stop" "$manager"
    log "INFO" "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: $service"
}

cmd_restart() {
    local service="${2:-}"
    local manager=$(detect_service_manager)
    
    if ! validate_service "$service" "$manager"; then
        exit 1
    fi
    
    print_section "–ü–ï–†–ï–ó–ê–ü–£–°–ö –°–ï–†–í–ò–°–ê: $service"
    manage_service "$service" "restart" "$manager"
    log "INFO" "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞: $service"
}

cmd_status() {
    local service="${2:-}"
    local manager=$(detect_service_manager)
    
    if ! validate_service "$service" "$manager"; then
        exit 1
    fi
    
    print_section "–°–¢–ê–¢–£–° –°–ï–†–í–ò–°–ê: $service"
    manage_service "$service" "status" "$manager"
}

cmd_logs() {
    local service="${2:-}"
    local lines="${3:-50}"
    local manager=$(detect_service_manager)
    
    if ! validate_service "$service" "$manager"; then
        exit 1
    fi
    
    analyze_service_logs "$service" "$lines"
}

cmd_recover() {
    local service="${2:-}"
    local manager=$(detect_service_manager)
    
    if ! validate_service "$service" "$manager"; then
        exit 1
    fi
    
    auto_recover_service "$service" "$manager"
}

cmd_list() {
    local manager=$(detect_service_manager)
    local filter="${2:-}"
    
    print_section "–°–ü–ò–°–û–ö –°–ï–†–í–ò–°–û–í"
    list_services "$manager" "$filter"
}

cmd_config() {
    create_config
}

cmd_report() {
    local manager=$(detect_service_manager)
    generate_report "$manager"
}

cmd_validate() {
    local service="${2:-}"
    local manager=$(detect_service_manager)
    
    if validate_service "$service" "$manager"; then
        print_status "OK" "–°–µ—Ä–≤–∏—Å $service –≤–∞–ª–∏–¥–µ–Ω"
        local status=$(get_service_status "$service" "$manager")
        local details=$(get_service_details "$service" "$manager")
        
        echo -e "${CYAN}üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:${NC}"
        echo "$details"
    fi
}

cmd_help() {
    print_header
    echo -e "${CYAN}üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Ä–≤–∏—Å–æ–≤ - –°–ø—Ä–∞–≤–∫–∞${NC}"
    echo ""
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–ö–û–ú–ê–ù–î–ê] [–°–ï–†–í–ò–°] [–ü–ê–†–ê–ú–ï–¢–†–´]"
    echo ""
    echo "–ö–æ–º–∞–Ω–¥—ã:"
    echo "  monitor [—Å–µ–∫—É–Ω–¥—ã] [—Ç–∞–π–º–∞—É—Ç] - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
    echo "  start <—Å–µ—Ä–≤–∏—Å>              - –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å"
    echo "  stop <—Å–µ—Ä–≤–∏—Å>               - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å"
    echo "  restart <—Å–µ—Ä–≤–∏—Å>            - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å"
    echo "  status <—Å–µ—Ä–≤–∏—Å>             - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞"
    echo "  logs <—Å–µ—Ä–≤–∏—Å> [—Å—Ç—Ä–æ–∫]       - –ø–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–∞"
    echo "  recover <—Å–µ—Ä–≤–∏—Å>            - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞"
    echo "  list [—Ñ–∏–ª—å—Ç—Ä]               - —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo "  config                      - —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª"
    echo "  report                      - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"
    echo "  validate <—Å–µ—Ä–≤–∏—Å>           - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"
    echo "  help                        - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0 monitor                  - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo "  $0 monitor 10 300           - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º 10 —Å–µ–∫, —Ç–∞–π–º–∞—É—Ç 5 –º–∏–Ω"
    echo "  $0 start nginx              - –∑–∞–ø—É—Å—Ç–∏—Ç—å nginx"
    echo "  $0 logs mysql 100           - –ø–æ–∫–∞–∑–∞—Ç—å 100 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤ mysql"
    echo "  $0 recover apache2          - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å apache2"
    echo "  $0 list docker              - –Ω–∞–π—Ç–∏ —Å–µ—Ä–≤–∏—Å—ã —Å docker –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏"
    echo "  $0 validate ssh             - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ä–≤–∏—Å ssh"
    echo "  $0 report                   - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
case "${1:-}" in
    "monitor") cmd_monitor "$@" ;;
    "start") cmd_start "$@" ;;
    "stop") cmd_stop "$@" ;;
    "restart") cmd_restart "$@" ;;
    "status") cmd_status "$@" ;;
    "logs") cmd_logs "$@" ;;
    "recover") cmd_recover "$@" ;;
    "list") cmd_list "$@" ;;
    "config") cmd_config ;;
    "report") cmd_report ;;
    "validate") cmd_validate "$@" ;;
    "help"|"--help"|"-h") cmd_help ;;
    *) main ;;
esac
