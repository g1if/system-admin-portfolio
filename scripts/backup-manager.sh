#!/bin/bash
# üíæ –£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º
# –ê–≤—Ç–æ—Ä: g1if
# –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: https://github.com/g1if/system-admin-portfolio

set -euo pipefail

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
LOG_DIR="$PROJECT_ROOT/logs"
BACKUP_DIR="$PROJECT_ROOT/backups"
CONFIG_DIR="$PROJECT_ROOT/configs"
LOG_FILE="$LOG_DIR/backup-manager.log"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
mkdir -p "$LOG_DIR" "$BACKUP_DIR" "$CONFIG_DIR"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
CONFIG_FILE="$CONFIG_DIR/backup.conf"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE"
}

print_header() {
    echo -e "${CYAN}"
    echo "üíæ ==========================================="
    echo "   –ú–ï–ù–ï–î–ñ–ï–† –†–ï–ó–ï–†–í–ù–û–ì–û –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø v1.1"
    echo "   $(date)"
    echo "   –ê–≤—Ç–æ—Ä: g1if"
    echo "==========================================="
    echo -e "${NC}"
}

print_section() {
    echo -e "${BLUE}üìä $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_config() {
    if [ -f "$CONFIG_FILE" ]; then
        source "$CONFIG_FILE"
        print_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: $CONFIG_FILE"
    else
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        BACKUP_SOURCES=("/etc" "$HOME/projects")
        BACKUP_RETENTION_DAYS=3
        BACKUP_COMPRESSION="gzip"
        BACKUP_PREFIX="backup"
        BACKUP_EXCLUDES=("*.tmp" "*.log" "cache/*" "node_modules/*" ".git/*")
        log "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
create_config() {
    cat > "$CONFIG_FILE" << 'CONFIG_EOF'
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–æ: $(date)

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è (–º–µ–Ω—å—à–∏–π —Ä–∞–∑–º–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
BACKUP_SOURCES=("/etc" "$HOME/projects")

# –°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è –±—ç–∫–∞–ø–æ–≤ (–≤ –¥–Ω—è—Ö)
BACKUP_RETENTION_DAYS=3

# –ú–µ—Ç–æ–¥ —Å–∂–∞—Ç–∏—è (gzip, bzip2, xz, none)
BACKUP_COMPRESSION="gzip"

# –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —Ñ–∞–π–ª–æ–≤ –±—ç–∫–∞–ø–æ–≤
BACKUP_PREFIX="system-backup"

# –ò—Å–∫–ª—é—á–µ–Ω–∏—è (—à–∞–±–ª–æ–Ω—ã –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –±—ç–∫–∞–ø–∞)
BACKUP_EXCLUDES=("*.tmp" "*.log" "cache/*" "node_modules/*" ".git/*" "*.iso" "*.ova" "*.vmdk")
CONFIG_EOF
    
    print_success "–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: $CONFIG_FILE"
}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª—É—á—à–µ–≥–æ –º–µ—Ç–æ–¥–∞ —Å–∂–∞—Ç–∏—è
detect_compression() {
    if command -v pigz >/dev/null 2>&1; then
        echo "pigz"
    elif command -v gzip >/dev/null 2>&1; then
        echo "gzip"
    elif command -v bzip2 >/dev/null 2>&1; then
        echo "bzip2"
    elif command -v xz >/dev/null 2>&1; then
        echo "xz"
    else
        echo "none"
    fi
}

# –ß–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º—ã–π —Ä–∞–∑–º–µ—Ä
human_size() {
    local bytes=$1
    if command -v bc >/dev/null 2>&1; then
        if [ $bytes -gt 1073741824 ]; then
            echo "$(echo "scale=2; $bytes/1073741824" | bc) GB"
        elif [ $bytes -gt 1048576 ]; then
            echo "$(echo "scale=2; $bytes/1048576" | bc) MB"
        elif [ $bytes -gt 1024 ]; then
            echo "$(echo "scale=2; $bytes/1024" | bc) KB"
        else
            echo "$bytes bytes"
        fi
    else
        # –ü—Ä–æ—Å—Ç–æ–π –≤—ã–≤–æ–¥ –µ—Å–ª–∏ bc –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        if [ $bytes -gt 1073741824 ]; then
            echo "$((bytes / 1073741824)) GB"
        elif [ $bytes -gt 1048576 ]; then
            echo "$((bytes / 1048576)) MB"
        elif [ $bytes -gt 1024 ]; then
            echo "$((bytes / 1024)) KB"
        else
            echo "$bytes bytes"
        fi
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞
create_backup() {
    local timestamp=$(date +%Y%m%d_%H%M%S)
    local backup_name="${BACKUP_PREFIX:-backup}_${timestamp}"
    local backup_file="$BACKUP_DIR/${backup_name}.tar"
    
    print_header
    log "–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: $backup_name"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    local valid_sources=()
    for source in "${BACKUP_SOURCES[@]}"; do
        # –†–∞–∑—Ä–µ—à–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –ø—É—Ç—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä $HOME)
        eval source_expanded="$source"
        if [ -e "$source_expanded" ]; then
            valid_sources+=("$source_expanded")
            echo "  üìÅ –î–æ–±–∞–≤–ª–µ–Ω–æ: $source_expanded"
        else
            print_warning "–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: $source_expanded"
        fi
    done
    
    if [ ${#valid_sources[@]} -eq 0 ]; then
        print_error "–ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –±—ç–∫–∞–ø–∞"
        return 1
    fi
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ —Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏
    echo "  üóúÔ∏è  –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞..."
    
    # –°—Ç—Ä–æ–∏–º –∫–æ–º–∞–Ω–¥—É tar —Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏
    local tar_cmd="tar -cf \"$backup_file\""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if [ ${#BACKUP_EXCLUDES[@]} -gt 0 ]; then
        for exclude in "${BACKUP_EXCLUDES[@]}"; do
            tar_cmd="$tar_cmd --exclude=\"$exclude\""
        done
    fi
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    tar_cmd="$tar_cmd ${valid_sources[@]}"
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
    if eval $tar_cmd 2>/dev/null; then
        local size=0
        if [ -f "$backup_file" ]; then
            size=$(stat -c%s "$backup_file" 2>/dev/null || echo 0)
        fi
        echo "  üì¶ –ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: $(human_size $size)"
        log "–ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: $backup_file ($(human_size $size))"
    else
        print_error "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞"
        log "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞: $backup_file"
        
        # –£–¥–∞–ª—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
        if [ -f "$backup_file" ]; then
            rm -f "$backup_file"
        fi
        return 1
    fi
    
    # –°–∂–∞—Ç–∏–µ
    local compression_tool=$(detect_compression)
    local final_file="$backup_file"
    
    case $compression_tool in
        "pigz")
            echo "  üîÑ –°–∂–∞—Ç–∏–µ —Å pigz (–º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–µ)..."
            if pigz "$backup_file" 2>/dev/null; then
                final_file="${backup_file}.gz"
            else
                print_warning "–û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è pigz, –æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–µ—Å–∂–∞—Ç—ã–º"
            fi
            ;;
        "gzip")
            echo "  üîÑ –°–∂–∞—Ç–∏–µ —Å gzip..."
            if gzip "$backup_file" 2>/dev/null; then
                final_file="${backup_file}.gz"
            else
                print_warning "–û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è gzip, –æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–µ—Å–∂–∞—Ç—ã–º"
            fi
            ;;
        "bzip2")
            echo "  üîÑ –°–∂–∞—Ç–∏–µ —Å bzip2..."
            if bzip2 "$backup_file" 2>/dev/null; then
                final_file="${backup_file}.bz2"
            else
                print_warning "–û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è bzip2, –æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–µ—Å–∂–∞—Ç—ã–º"
            fi
            ;;
        "xz")
            echo "  üîÑ –°–∂–∞—Ç–∏–µ —Å xz..."
            if xz "$backup_file" 2>/dev/null; then
                final_file="${backup_file}.xz"
            else
                print_warning "–û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è xz, –æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–µ—Å–∂–∞—Ç—ã–º"
            fi
            ;;
        *)
            echo "  ‚ÑπÔ∏è  –°–∂–∞—Ç–∏–µ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è"
            ;;
    esac
    
    local final_size=0
    if [ -f "$final_file" ]; then
        final_size=$(stat -c%s "$final_file" 2>/dev/null || echo 0)
    fi
    
    if [ $final_size -gt 0 ]; then
        print_success "–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: $(basename $final_file) ($(human_size $final_size))"
        log "–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: $final_file ($(human_size $final_size))"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—ç–∫–∞–ø–µ
        echo ""
        echo -e "${BLUE}üìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ë–≠–ö–ê–ü–ï:${NC}"
        echo "  –§–∞–π–ª: $(basename $final_file)"
        echo "  –†–∞–∑–º–µ—Ä: $(human_size $final_size)"
        echo "  –î–∞—Ç–∞: $(date)"
        echo "  –ò—Å—Ç–æ—á–Ω–∏–∫–∏: ${valid_sources[*]}"
        echo "  –°–∂–∞—Ç–∏–µ: $compression_tool"
    else
        print_error "–ë—ç–∫–∞–ø –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω"
        return 1
    fi
}

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤
clean_old_backups() {
    print_section "–û–ß–ò–°–¢–ö–ê –°–¢–ê–†–´–• –ë–≠–ö–ê–ü–û–í"
    
    local retention_days=${BACKUP_RETENTION_DAYS:-7}
    local deleted_count=0
    local freed_space=0
    
    echo "  üóëÔ∏è  –ü–æ–∏—Å–∫ –±—ç–∫–∞–ø–æ–≤ —Å—Ç–∞—Ä—à–µ $retention_days –¥–Ω–µ–π..."
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º while read –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
    find "$BACKUP_DIR" -name "${BACKUP_PREFIX:-backup}_*" -type f -mtime "+$retention_days" | while read -r backup; do
        if [ -f "$backup" ]; then
            local size=$(stat -c%s "$backup" 2>/dev/null || echo 0)
            echo "  –£–¥–∞–ª–µ–Ω–∏–µ: $(basename "$backup") ($(human_size $size))"
            freed_space=$((freed_space + size))
            deleted_count=$((deleted_count + 1))
            rm -f "$backup"
            log "–£–¥–∞–ª–µ–Ω –±—ç–∫–∞–ø: $backup ($(human_size $size))"
        fi
    done
    
    if [ $deleted_count -gt 0 ]; then
        print_success "–£–¥–∞–ª–µ–Ω–æ –±—ç–∫–∞–ø–æ–≤: $deleted_count"
        echo "  üìä –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç–∞: $(human_size $freed_space)"
        log "–û—á–∏—Å—Ç–∫–∞ –±—ç–∫–∞–ø–æ–≤: —É–¥–∞–ª–µ–Ω–æ $deleted_count —Ñ–∞–π–ª–æ–≤, –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ $(human_size $freed_space)"
    else
        echo "  ‚ÑπÔ∏è  –°—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    fi
}

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—ç–∫–∞–ø–æ–≤
show_stats() {
    print_section "–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–≠–ö–ê–ü–û–í"
    
    local total_size=0
    local total_files=0
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if [ "$(ls -A "$BACKUP_DIR" 2>/dev/null)" ]; then
        for backup in "$BACKUP_DIR"/*; do
            if [ -f "$backup" ] && [ "$(basename "$backup")" != ".gitkeep" ]; then
                local size=0
                size=$(stat -c%s "$backup" 2>/dev/null || echo 0)
                total_size=$((total_size + size))
                total_files=$((total_files + 1))
                echo "  üìÑ $(basename "$backup") - $(human_size $size)"
            fi
        done
    else
        echo "  ‚ÑπÔ∏è  –ë—ç–∫–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    fi
    
    echo ""
    echo -e "${BLUE}üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:${NC}"
    echo "  –í—Å–µ–≥–æ –±—ç–∫–∞–ø–æ–≤: $total_files"
    echo "  –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: $(human_size $total_size)"
    echo "  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $BACKUP_DIR"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–≤–æ–±–æ–¥–Ω–æ–º –º–µ—Å—Ç–µ
    if command -v df >/dev/null 2>&1; then
        local available_space=$(df "$BACKUP_DIR" 2>/dev/null | awk 'NR==2 {print $4 * 1024}' || echo 0)
        echo "  –°–≤–æ–±–æ–¥–Ω–æ –º–µ—Å—Ç–∞: $(human_size $available_space)"
    fi
}

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞
restore_backup() {
    local backup_file="$1"
    local restore_dir="${2:-./restored}"
    
    if [ ! -f "$backup_file" ]; then
        print_error "–§–∞–π–ª –±—ç–∫–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: $backup_file"
        return 1
    fi
    
    print_section "–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ò–ó –ë–≠–ö–ê–ü–ê"
    echo "  –§–∞–π–ª: $(basename "$backup_file")"
    echo "  –¶–µ–ª–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $restore_dir"
    
    mkdir -p "$restore_dir"
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∞—Ä—Ö–∏–≤–∞ –∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞
    local restore_cmd=""
    case "$backup_file" in
        *.tar.gz|*.tgz)
            echo "  üì¶ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ gzip –∞—Ä—Ö–∏–≤–∞..."
            restore_cmd="tar -xzf \"$backup_file\" -C \"$restore_dir\""
            ;;
        *.tar.bz2)
            echo "  üì¶ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ bzip2 –∞—Ä—Ö–∏–≤–∞..."
            restore_cmd="tar -xjf \"$backup_file\" -C \"$restore_dir\""
            ;;
        *.tar.xz)
            echo "  üì¶ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ xz –∞—Ä—Ö–∏–≤–∞..."
            restore_cmd="tar -xJf \"$backup_file\" -C \"$restore_dir\""
            ;;
        *.tar)
            echo "  üì¶ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ tar –∞—Ä—Ö–∏–≤–∞..."
            restore_cmd="tar -xf \"$backup_file\" -C \"$restore_dir\""
            ;;
        *)
            print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—Ä—Ö–∏–≤–∞: $backup_file"
            return 1
            ;;
    esac
    
    if eval $restore_cmd; then
        local restored_count=0
        if command -v find >/dev/null 2>&1; then
            restored_count=$(find "$restore_dir" -type f 2>/dev/null | wc -l)
        fi
        print_success "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
        echo "  üìÅ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: $restored_count"
        echo "  üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $restore_dir"
        log "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ $backup_file –≤ $restore_dir (—Ñ–∞–π–ª–æ–≤: $restored_count)"
    else
        print_error "–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –±—ç–∫–∞–ø–∞"
        return 1
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    load_config
    
    case "${1:-}" in
        "create")
            create_backup
            ;;
        "clean")
            clean_old_backups
            ;;
        "stats")
            show_stats
            ;;
        "restore")
            if [ -z "${2:-}" ]; then
                print_error "–£–∫–∞–∂–∏—Ç–µ —Ñ–∞–π–ª –±—ç–∫–∞–ø–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"
                echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 restore <backup-file> [restore-dir]"
                return 1
            fi
            restore_backup "$2" "${3:-}"
            ;;
        "config")
            create_config
            ;;
        "list")
            echo -e "${BLUE}üìÅ –î–û–°–¢–£–ü–ù–´–ï –ë–≠–ö–ê–ü–´:${NC}"
            ls -la "$BACKUP_DIR" 2>/dev/null | grep -v "total" | grep -v ".gitkeep" || echo "  ‚ÑπÔ∏è  –ë—ç–∫–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            ;;
        "help"|"")
            print_header
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 {create|clean|stats|restore|config|list|help}"
            echo ""
            echo "–ö–æ–º–∞–Ω–¥—ã:"
            echo "  create                   - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –±—ç–∫–∞–ø"
            echo "  clean                    - –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã"
            echo "  stats                    - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
            echo "  restore <file> [dir]     - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –±—ç–∫–∞–ø–∞"
            echo "  config                   - –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª"
            echo "  list                     - –°–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤"
            echo "  help                     - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
            echo ""
            echo "–ü—Ä–∏–º–µ—Ä—ã:"
            echo "  $0 create"
            echo "  $0 restore backups/backup_20231022.tar.gz ./restored"
            echo "  $0 stats"
            echo "  $0 config"
            ;;
        *)
            print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $1"
            echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: $0 help"
            return 1
            ;;
    esac
}

main "$@"
