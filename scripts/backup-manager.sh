#!/bin/bash
# üíæ –£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º
# –ê–≤—Ç–æ—Ä: g1if
# –í–µ—Ä—Å–∏—è: 2.0
# –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: https://github.com/g1if/system-admin-portfolio

set -e

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
LOG_DIR="$PROJECT_ROOT/logs"
BACKUP_DIR="$PROJECT_ROOT/backups"
CONFIG_DIR="$PROJECT_ROOT/configs"
PACKAGE_BACKUP_DIR="$BACKUP_DIR/package-backups"
LOG_FILE="$LOG_DIR/backup-manager.log"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
mkdir -p "$LOG_DIR" "$BACKUP_DIR" "$CONFIG_DIR" "$PACKAGE_BACKUP_DIR"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
CONFIG_FILE="$CONFIG_DIR/backup.conf"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
log() {
    local level=${2:-"INFO"}
    echo "$(date '+%Y-%m-%d %H:%M:%S') - [$level] $1" >> "$LOG_FILE"
}

print_header() {
    echo -e "${CYAN}"
    echo "üíæ ==========================================="
    echo "   –ú–ï–ù–ï–î–ñ–ï–† –†–ï–ó–ï–†–í–ù–û–ì–û –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø v2.0"
    echo "   $(date)"
    echo "   –ê–≤—Ç–æ—Ä: g1if"
    echo "==========================================="
    echo -e "${NC}"
}

print_section() {
    echo -e "${BLUE}üìä $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
    log "$1" "SUCCESS"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
    log "$1" "ERROR"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
    log "$1" "WARNING"
}

print_info() {
    echo -e "${PURPLE}‚ÑπÔ∏è  $1${NC}"
    log "$1" "INFO"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    local missing=()
    local optional_missing=()
    
    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    for cmd in tar; do
        if ! command -v "$cmd" &> /dev/null; then
            missing+=("$cmd")
        fi
    done
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —Å–∂–∞—Ç–∏—è
    if ! command -v gzip &> /dev/null; then
        optional_missing+=("gzip")
    fi
    
    if ! command -v pigz &> /dev/null; then
        optional_missing+=("pigz")
    fi
    
    if ! command -v bzip2 &> /dev/null; then
        optional_missing+=("bzip2")
    fi
    
    if ! command -v xz &> /dev/null; then
        optional_missing+=("xz")
    fi
    
    if [ ${#missing[@]} -gt 0 ]; then
        print_error "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã: ${missing[*]}"
        echo "üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt install ${missing[*]}"
        return 1
    fi
    
    if [ ${#optional_missing[@]} -gt 0 ]; then
        print_warning "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã —Å–∂–∞—Ç–∏—è: ${optional_missing[*]}"
        echo "üí° –î–ª—è –ª—É—á—à–µ–≥–æ —Å–∂–∞—Ç–∏—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt install ${optional_missing[*]}"
    fi
    
    return 0
}

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_config() {
    if [ -f "$CONFIG_FILE" ]; then
        source "$CONFIG_FILE"
        print_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: $CONFIG_FILE"
    else
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        BACKUP_SOURCES=("/etc" "$HOME/projects")
        BACKUP_RETENTION_DAYS=7
        BACKUP_COMPRESSION="auto"
        BACKUP_PREFIX="system-backup"
        BACKUP_EXCLUDES=("*.tmp" "*.log" "cache/*" "node_modules/*" ".git/*" "*.iso" "*.ova" "*.vmdk")
        ENABLE_INCREMENTAL=false
        INCREMENTAL_LEVEL=1
        ENABLE_PACKAGE_BACKUP=true
        NOTIFICATION_METHODS=("log" "console")
        LOG_RETENTION_DAYS=30
        
        print_warning "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
        log "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é" "WARNING"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
create_config() {
    cat > "$CONFIG_FILE" << 'CONFIG_EOF'
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è v2.0
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–æ: $(date)

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
BACKUP_SOURCES=("/etc" "$HOME/projects" "/var/www")

# –°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è –±—ç–∫–∞–ø–æ–≤ (–≤ –¥–Ω—è—Ö)
BACKUP_RETENTION_DAYS=7

# –ú–µ—Ç–æ–¥ —Å–∂–∞—Ç–∏—è (auto, gzip, bzip2, xz, pigz, none)
BACKUP_COMPRESSION="auto"

# –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —Ñ–∞–π–ª–æ–≤ –±—ç–∫–∞–ø–æ–≤
BACKUP_PREFIX="system-backup"

# –ò—Å–∫–ª—é—á–µ–Ω–∏—è (—à–∞–±–ª–æ–Ω—ã –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –±—ç–∫–∞–ø–∞)
BACKUP_EXCLUDES=("*.tmp" "*.log" "cache/*" "node_modules/*" ".git/*" "*.iso" "*.ova" "*.vmdk" "*.docker/*")

# –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –±—ç–∫–∞–ø—ã
ENABLE_INCREMENTAL=false
INCREMENTAL_LEVEL=1

# –ë—ç–∫–∞–ø —Å–ø–∏—Å–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
ENABLE_PACKAGE_BACKUP=true

# –ú–µ—Ç–æ–¥—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
NOTIFICATION_METHODS=("log" "console")

# –°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤ (–¥–Ω–∏)
LOG_RETENTION_DAYS=30
CONFIG_EOF
    
    print_success "–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: $CONFIG_FILE"
    log "–°–æ–∑–¥–∞–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª" "INFO"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
check_sources() {
    local valid_sources=()
    local need_sudo=0
    
    print_section "–ü–†–û–í–ï–†–ö–ê –ò–°–¢–û–ß–ù–ò–ö–û–í"
    
    for source in "${BACKUP_SOURCES[@]}"; do
        # –†–∞–∑—Ä–µ—à–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –ø—É—Ç—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä $HOME)
        eval source_expanded="$source"
        
        if [ -e "$source_expanded" ]; then
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            if [ -r "$source_expanded" ]; then
                valid_sources+=("$source_expanded")
                echo "  ‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω: $source_expanded"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω—ã –ª–∏ –ø—Ä–∞–≤–∞ sudo –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                if [[ "$source_expanded" == "/etc"* ]] || [[ "$source_expanded" == "/var"* ]] || [[ "$source_expanded" == "/root"* ]]; then
                    if [ ! -r "$source_expanded" ] || [ "$(stat -c %U "$source_expanded" 2>/dev/null)" != "$USER" ]; then
                        need_sudo=1
                    fi
                fi
            else
                print_warning "–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —á—Ç–µ–Ω–∏–µ: $source_expanded"
                # –î–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–±—É–µ–º —Å sudo
                if [[ "$source_expanded" == "/etc"* ]] || [[ "$source_expanded" == "/var"* ]]; then
                    if sudo test -r "$source_expanded"; then
                        valid_sources+=("$source_expanded")
                        need_sudo=1
                        echo "  ‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω (—Ç—Ä–µ–±—É–µ—Ç—Å—è sudo): $source_expanded"
                    else
                        print_warning "–ù–µ—Ç –ø—Ä–∞–≤ –¥–∞–∂–µ —Å sudo: $source_expanded"
                    fi
                fi
            fi
        else
            print_warning "–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: $source_expanded"
        fi
    done
    
    if [ ${#valid_sources[@]} -eq 0 ]; then
        print_error "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –±—ç–∫–∞–ø–∞"
        return 1
    fi
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Å–∏–≤ valid_sources –∏ —Ñ–ª–∞–≥ need_sudo
    echo "${valid_sources[@]}"
    return $need_sudo
}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª—É—á—à–µ–≥–æ –º–µ—Ç–æ–¥–∞ —Å–∂–∞—Ç–∏—è
detect_compression() {
    case "$BACKUP_COMPRESSION" in
        "auto")
            if command -v pigz >/dev/null 2>&1; then
                echo "pigz"
            elif command -v gzip >/dev/null 2>&1; then
                echo "gzip"
            elif command -v bzip2 >/dev/null 2>&1; then
                echo "bzip2"
            elif command -v xz >/dev/null 2>&1; then
                echo "xz"
            else
                echo "none"
            fi
            ;;
        "gzip"|"bzip2"|"xz"|"pigz"|"none")
            echo "$BACKUP_COMPRESSION"
            ;;
        *)
            print_warning "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥ —Å–∂–∞—Ç–∏—è: $BACKUP_COMPRESSION, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è auto"
            detect_compression "auto"
            ;;
    esac
}

# –ß–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º—ã–π —Ä–∞–∑–º–µ—Ä
human_size() {
    local bytes=$1
    if command -v numfmt >/dev/null 2>&1; then
        numfmt --to=iec --suffix=B "$bytes"
    elif command -v bc >/dev/null 2>&1; then
        if [ "$bytes" -gt 1073741824 ]; then
            echo "$(echo "scale=2; $bytes/1073741824" | bc) GB"
        elif [ "$bytes" -gt 1048576 ]; then
            echo "$(echo "scale=2; $bytes/1048576" | bc) MB"
        elif [ "$bytes" -gt 1024 ]; then
            echo "$(echo "scale=2; $bytes/1024" | bc) KB"
        else
            echo "$bytes bytes"
        fi
    else
        # –ü—Ä–æ—Å—Ç–æ–π –≤—ã–≤–æ–¥
        if [ "$bytes" -gt 1073741824 ]; then
            echo "$((bytes / 1073741824)) GB"
        elif [ "$bytes" -gt 1048576 ]; then
            echo "$((bytes / 1048576)) MB"
        elif [ "$bytes" -gt 1024 ]; then
            echo "$((bytes / 1024)) KB"
        else
            echo "$bytes bytes"
        fi
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞
check_disk_space() {
    local required_space=$1
    local backup_dir=$2
    
    if ! command -v df >/dev/null 2>&1; then
        print_warning "–ù–µ –º–æ–≥—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ (df –Ω–µ –Ω–∞–π–¥–µ–Ω)"
        return 0
    fi
    
    local available_space=$(df "$backup_dir" | awk 'NR==2 {print $4 * 1024}')
    local available_human=$(human_size "$available_space")
    local required_human=$(human_size "$required_space")
    
    echo "  üíæ –°–≤–æ–±–æ–¥–Ω–æ –º–µ—Å—Ç–∞: $available_human"
    echo "  üì¶ –¢—Ä–µ–±—É–µ—Ç—Å—è: $required_human"
    
    if [ "$available_space" -lt "$required_space" ]; then
        print_error "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞!"
        echo "  üí° –û—á–∏—Å—Ç–∏—Ç–µ –º–µ—Å—Ç–æ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –±—ç–∫–∞–ø–æ–≤"
        return 1
    fi
    
    return 0
}

# –û—Ü–µ–Ω–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –±—ç–∫–∞–ø–∞
estimate_backup_size() {
    local sources=("$@")
    local total_size=0
    
    for source in "${sources[@]}"; do
        if [ -e "$source" ]; then
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º du –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–∞–∑–º–µ—Ä–∞, –∏—Å–∫–ª—é—á–∞—è —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            local size_cmd=("du" "-sb" "$source")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            if command -v find >/dev/null 2>&1 && [ ${#BACKUP_EXCLUDES[@]} -gt 0 ]; then
                local exclude_args=()
                for exclude in "${BACKUP_EXCLUDES[@]}"; do
                    exclude_args+=(-name "$exclude" -o)
                done
                # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π -o
                unset 'exclude_args[${#exclude_args[@]}-1]'
                
                # –û—Ü–µ–Ω–∫–∞ —á–µ—Ä–µ–∑ find + du
                local source_size=$(find "$source" \( "${exclude_args[@]}" \) -prune -o -type f -print0 | du -sb --files0-from=- | awk '{total += $1} END {print total}')
                total_size=$((total_size + ${source_size:-0}))
            else
                # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ —á–µ—Ä–µ–∑ du
                local source_size=$(du -sb "$source" 2>/dev/null | awk '{print $1}')
                total_size=$((total_size + ${source_size:-0}))
            fi
        fi
    done
    
    echo "$total_size"
}

# –ë—ç–∫–∞–ø —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤
backup_packages() {
    if [ "$ENABLE_PACKAGE_BACKUP" != "true" ]; then
        return 0
    fi
    
    print_section "–ë–≠–ö–ê–ü –°–ü–ò–°–ö–ê –ü–ê–ö–ï–¢–û–í"
    
    local timestamp=$(date +%Y%m%d_%H%M%S)
    local package_file="$PACKAGE_BACKUP_DIR/packages_${timestamp}.list"
    
    # –î–ª—è Debian/Ubuntu
    if command -v dpkg >/dev/null 2>&1; then
        echo "  üêß –≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤ dpkg..."
        dpkg --get-selections > "$package_file"
        print_success "–°–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤ dpkg —Å–æ—Ö—Ä–∞–Ω–µ–Ω: $(basename "$package_file")"
    fi
    
    # –î–ª—è RedHat/CentOS
    if command -v rpm >/dev/null 2>&1; then
        echo "  üî¥ –≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤ rpm..."
        rpm -qa > "${package_file}.rpm"
        print_success "–°–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤ rpm —Å–æ—Ö—Ä–∞–Ω–µ–Ω: $(basename "${package_file}.rpm")"
    fi
    
    # –î–ª—è Arch Linux
    if command -v pacman >/dev/null 2>&1; then
        echo "  üéØ –≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤ pacman..."
        pacman -Qqe > "${package_file}.pacman"
        print_success "–°–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤ pacman —Å–æ—Ö—Ä–∞–Ω–µ–Ω: $(basename "${package_file}.pacman")"
    fi
    
    # –î–ª—è Snap
    if command -v snap >/dev/null 2>&1; then
        echo "  ‚≠ï –≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ snap –ø–∞–∫–µ—Ç–æ–≤..."
        snap list > "${package_file}.snap" 2>/dev/null || true
    fi
    
    # –î–ª—è Flatpak
    if command -v flatpak >/dev/null 2>&1; then
        echo "  üì¶ –≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ flatpak –ø–∞–∫–µ—Ç–æ–≤..."
        flatpak list > "${package_file}.flatpak" 2>/dev/null || true
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞
create_backup() {
    if ! check_dependencies; then
        print_error "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞"
        return 1
    fi
    
    local timestamp=$(date +%Y%m%d_%H%M%S)
    local backup_name="${BACKUP_PREFIX:-backup}_${timestamp}"
    local backup_file="$BACKUP_DIR/${backup_name}.tar"
    
    print_header
    log "–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: $backup_name" "INFO"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    local check_result
    check_result=$(check_sources)
    local need_sudo=$?
    IFS=' ' read -r -a valid_sources <<< "$check_result"
    
    if [ ${#valid_sources[@]} -eq 0 ]; then
        print_error "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –±—ç–∫–∞–ø–∞"
        echo "  üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤: $CONFIG_FILE"
        return 1
    fi
    
    # –û—Ü–µ–Ω–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
    print_section "–û–¶–ï–ù–ö–ê –†–ê–ó–ú–ï–†–ê"
    local estimated_size=$(estimate_backup_size "${valid_sources[@]}")
    local estimated_size_human=$(human_size "$estimated_size")
    echo "  üìê –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±—ç–∫–∞–ø–∞: $estimated_size_human"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ (—Å –∑–∞–ø–∞—Å–æ–º 20%)
    local required_space=$((estimated_size * 120 / 100))
    if ! check_disk_space "$required_space" "$BACKUP_DIR"; then
        return 1
    fi
    
    # –ë—ç–∫–∞–ø –ø–∞–∫–µ—Ç–æ–≤
    backup_packages
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
    print_section "–°–û–ó–î–ê–ù–ò–ï –ê–†–•–ò–í–ê"
    echo "  üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞: $(basename "$backup_file")"
    
    # –°—Ç—Ä–æ–∏–º –∫–æ–º–∞–Ω–¥—É tar
    local tar_cmd=("tar" "-cf" "$backup_file" "--ignore-failed-read")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    if [ ${#BACKUP_EXCLUDES[@]} -gt 0 ]; then
        for exclude in "${BACKUP_EXCLUDES[@]}"; do
            tar_cmd+=("--exclude=$exclude")
        done
        echo "  üö´ –ò—Å–∫–ª—é—á–µ–Ω–∏—è: ${BACKUP_EXCLUDES[*]}"
    fi
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    for source in "${valid_sources[@]}"; do
        tar_cmd+=("$source")
    done
    
    echo "  üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: tar -cf ... (–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: ${#valid_sources[@]})"
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É —Å sudo –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    local tar_success=0
    if [ $need_sudo -eq 1 ]; then
        echo "  üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º sudo –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–Ω—ã–º —Ñ–∞–π–ª–∞–º..."
        if sudo "${tar_cmd[@]}" 2>> "$LOG_FILE"; then
            tar_success=1
        else
            print_error "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞ —Å sudo"
            log "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞ —Å sudo. –ö–æ–º–∞–Ω–¥–∞: ${tar_cmd[*]}" "ERROR"
        fi
    else
        if "${tar_cmd[@]}" 2>> "$LOG_FILE"; then
            tar_success=1
        else
            print_error "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞"
            log "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞. –ö–æ–º–∞–Ω–¥–∞: ${tar_cmd[*]}" "ERROR"
        fi
    fi
    
    if [ $tar_success -eq 0 ]; then
        # –£–¥–∞–ª—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
        if [ -f "$backup_file" ]; then
            rm -f "$backup_file"
        fi
        return 1
    fi
    
    local size=0
    if [ -f "$backup_file" ]; then
        size=$(stat -c%s "$backup_file" 2>/dev/null || echo 0)
    fi
    echo "  ‚úÖ –ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: $(human_size $size)"
    log "–ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: $backup_file ($(human_size $size))" "INFO"
    
    # –°–∂–∞—Ç–∏–µ
    local compression_tool=$(detect_compression)
    local final_file="$backup_file"
    
    print_section "–°–ñ–ê–¢–ò–ï"
    case $compression_tool in
        "pigz")
            echo "  üîÑ –°–∂–∞—Ç–∏–µ —Å pigz (–º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–µ)..."
            if pigz "$backup_file" 2>/dev/null; then
                final_file="${backup_file}.gz"
                echo "  ‚úÖ –°–∂–∞—Ç–∏–µ pigz –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
            else
                print_warning "–û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è pigz, –æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–µ—Å–∂–∞—Ç—ã–º"
            fi
            ;;
        "gzip")
            echo "  üîÑ –°–∂–∞—Ç–∏–µ —Å gzip..."
            if gzip "$backup_file" 2>/dev/null; then
                final_file="${backup_file}.gz"
                echo "  ‚úÖ –°–∂–∞—Ç–∏–µ gzip –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
            else
                print_warning "–û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è gzip, –æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–µ—Å–∂–∞—Ç—ã–º"
            fi
            ;;
        "bzip2")
            echo "  üîÑ –°–∂–∞—Ç–∏–µ —Å bzip2..."
            if bzip2 "$backup_file" 2>/dev/null; then
                final_file="${backup_file}.bz2"
                echo "  ‚úÖ –°–∂–∞—Ç–∏–µ bzip2 –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
            else
                print_warning "–û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è bzip2, –æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–µ—Å–∂–∞—Ç—ã–º"
            fi
            ;;
        "xz")
            echo "  üîÑ –°–∂–∞—Ç–∏–µ —Å xz..."
            if xz "$backup_file" 2>/dev/null; then
                final_file="${backup_file}.xz"
                echo "  ‚úÖ –°–∂–∞—Ç–∏–µ xz –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
            else
                print_warning "–û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è xz, –æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–µ—Å–∂–∞—Ç—ã–º"
            fi
            ;;
        *)
            echo "  ‚ÑπÔ∏è  –°–∂–∞—Ç–∏–µ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è"
            ;;
    esac
    
    local final_size=0
    if [ -f "$final_file" ]; then
        final_size=$(stat -c%s "$final_file" 2>/dev/null || echo 0)
    fi
    
    if [ $final_size -gt 0 ]; then
        local compression_ratio="N/A"
        if [ $size -gt 0 ]; then
            compression_ratio=$(echo "scale=2; $size / $final_size" | bc 2>/dev/null || echo "N/A")
        fi
        
        print_success "–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: $(basename $final_file) ($(human_size $final_size))"
        if [ "$compression_ratio" != "N/A" ]; then
            echo "  üìà –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∂–∞—Ç–∏—è: ${compression_ratio}x"
        fi
        
        log "–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: $final_file ($(human_size $final_size)), —Å–∂–∞—Ç–∏–µ: $compression_tool" "SUCCESS"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—ç–∫–∞–ø–µ
        echo ""
        echo -e "${BLUE}üìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ë–≠–ö–ê–ü–ï:${NC}"
        echo "  –§–∞–π–ª: $(basename $final_file)"
        echo "  –†–∞–∑–º–µ—Ä: $(human_size $final_size)"
        echo "  –î–∞—Ç–∞: $(date)"
        echo "  –ò—Å—Ç–æ—á–Ω–∏–∫–∏: ${valid_sources[*]}"
        echo "  –°–∂–∞—Ç–∏–µ: $compression_tool"
        if [ "$compression_ratio" != "N/A" ]; then
            echo "  –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∂–∞—Ç–∏—è: ${compression_ratio}x"
        fi
        echo "  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $BACKUP_DIR"
    else
        print_error "–ë—ç–∫–∞–ø –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω"
        return 1
    fi
}

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤
clean_old_backups() {
    print_section "–û–ß–ò–°–¢–ö–ê –°–¢–ê–†–´–• –ë–≠–ö–ê–ü–û–í"
    
    local retention_days=${BACKUP_RETENTION_DAYS:-7}
    local deleted_count=0
    local freed_space=0
    
    echo "  üóëÔ∏è  –ü–æ–∏—Å–∫ –±—ç–∫–∞–ø–æ–≤ —Å—Ç–∞—Ä—à–µ $retention_days –¥–Ω–µ–π..."
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º while read –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
    while IFS= read -r -d '' backup; do
        if [ -f "$backup" ] && [[ "$(basename "$backup")" =~ ^${BACKUP_PREFIX}.*$ ]]; then
            local size=$(stat -c%s "$backup" 2>/dev/null || echo 0)
            echo "  –£–¥–∞–ª–µ–Ω–∏–µ: $(basename "$backup") ($(human_size $size))"
            freed_space=$((freed_space + size))
            deleted_count=$((deleted_count + 1))
            rm -f "$backup"
            log "–£–¥–∞–ª–µ–Ω –±—ç–∫–∞–ø: $backup ($(human_size $size))" "INFO"
        fi
    done < <(find "$BACKUP_DIR" -name "${BACKUP_PREFIX}_*" -type f -mtime "+$retention_days" -print0 2>/dev/null)
    
    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤
    local log_retention_days=${LOG_RETENTION_DAYS:-30}
    if [ -f "$LOG_FILE" ]; then
        echo "  üßπ –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ —Å—Ç–∞—Ä—à–µ $log_retention_days –¥–Ω–µ–π..."
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –ª–æ–≥–∞–º–∏
        local temp_log=$(mktemp)
        local cutoff_date=$(date -d "$log_retention_days days ago" +%Y-%m-%d)
        
        while IFS= read -r line; do
            local log_date=$(echo "$line" | grep -oE '[0-9]{4}-[0-9]{2}-[0-9]{2}' | head -1)
            if [[ "$log_date" > "$cutoff_date" ]] || [[ "$log_date" == "$cutoff_date" ]]; then
                echo "$line" >> "$temp_log"
            fi
        done < "$LOG_FILE"
        
        mv "$temp_log" "$LOG_FILE"
        echo "  ‚úÖ –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã"
    fi
    
    if [ $deleted_count -gt 0 ]; then
        print_success "–£–¥–∞–ª–µ–Ω–æ –±—ç–∫–∞–ø–æ–≤: $deleted_count"
        echo "  üìä –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç–∞: $(human_size $freed_space)"
        log "–û—á–∏—Å—Ç–∫–∞ –±—ç–∫–∞–ø–æ–≤: —É–¥–∞–ª–µ–Ω–æ $deleted_count —Ñ–∞–π–ª–æ–≤, –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ $(human_size $freed_space)" "INFO"
    else
        echo "  ‚ÑπÔ∏è  –°—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    fi
}

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—ç–∫–∞–ø–æ–≤
show_stats() {
    print_section "–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–≠–ö–ê–ü–û–í"
    
    local total_size=0
    local total_files=0
    local latest_backup=""
    local latest_date=""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if [ "$(ls -A "$BACKUP_DIR" 2>/dev/null)" ]; then
        for backup in "$BACKUP_DIR"/*; do
            if [ -f "$backup" ] && [[ "$(basename "$backup")" =~ ^${BACKUP_PREFIX}.*$ ]]; then
                local size=0
                size=$(stat -c%s "$backup" 2>/dev/null || echo 0)
                total_size=$((total_size + size))
                total_files=$((total_files + 1))
                
                # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π –±—ç–∫–∞–ø
                local backup_date=$(stat -c %Y "$backup" 2>/dev/null || echo 0)
                if [ -z "$latest_date" ] || [ "$backup_date" -gt "$latest_date" ]; then
                    latest_date=$backup_date
                    latest_backup=$(basename "$backup")
                fi
                
                echo "  üìÑ $(basename "$backup") - $(human_size $size)"
            fi
        done
    else
        echo "  ‚ÑπÔ∏è  –ë—ç–∫–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    fi
    
    echo ""
    echo -e "${BLUE}üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:${NC}"
    echo "  –í—Å–µ–≥–æ –±—ç–∫–∞–ø–æ–≤: $total_files"
    echo "  –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: $(human_size $total_size)"
    
    if [ -n "$latest_backup" ]; then
        echo "  –ü–æ—Å–ª–µ–¥–Ω–∏–π –±—ç–∫–∞–ø: $latest_backup"
        echo "  –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—ç–∫–∞–ø–∞: $(date -d "@$latest_date" '+%Y-%m-%d %H:%M:%S')"
    fi
    
    echo "  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $BACKUP_DIR"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–≤–æ–±–æ–¥–Ω–æ–º –º–µ—Å—Ç–µ
    if command -v df >/dev/null 2>&1; then
        local available_space=$(df "$BACKUP_DIR" 2>/dev/null | awk 'NR==2 {print $4 * 1024}' || echo 0)
        echo "  –°–≤–æ–±–æ–¥–Ω–æ –º–µ—Å—Ç–∞: $(human_size $available_space)"
    fi
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–∫–µ—Ç–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤
    if [ "$ENABLE_PACKAGE_BACKUP" = "true" ] && [ -d "$PACKAGE_BACKUP_DIR" ]; then
        local package_files=0
        local package_size=0
        
        for pkg_file in "$PACKAGE_BACKUP_DIR"/*; do
            if [ -f "$pkg_file" ]; then
                package_files=$((package_files + 1))
                package_size=$((package_size + $(stat -c%s "$pkg_file" 2>/dev/null || echo 0)))
            fi
        done
        
        if [ $package_files -gt 0 ]; then
            echo ""
            echo -e "${GREEN}üì¶ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–ê–ö–ï–¢–ù–´–• –ë–≠–ö–ê–ü–û–í:${NC}"
            echo "  –§–∞–π–ª–æ–≤ –ø–∞–∫–µ—Ç–æ–≤: $package_files"
            echo "  –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: $(human_size $package_size)"
            echo "  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $PACKAGE_BACKUP_DIR"
        fi
    fi
}

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞
restore_backup() {
    local backup_file="$1"
    local restore_dir="${2:-./restored}"
    
    if [ ! -f "$backup_file" ]; then
        print_error "–§–∞–π–ª –±—ç–∫–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: $backup_file"
        return 1
    fi
    
    print_section "–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ò–ó –ë–≠–ö–ê–ü–ê"
    echo "  –§–∞–π–ª: $(basename "$backup_file")"
    echo "  –¶–µ–ª–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $restore_dir"
    
    mkdir -p "$restore_dir"
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∞—Ä—Ö–∏–≤–∞ –∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞
    local restore_cmd=""
    case "$backup_file" in
        *.tar.gz|*.tgz)
            echo "  üì¶ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ gzip –∞—Ä—Ö–∏–≤–∞..."
            restore_cmd="tar -xzf \"$backup_file\" -C \"$restore_dir\""
            ;;
        *.tar.bz2)
            echo "  üì¶ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ bzip2 –∞—Ä—Ö–∏–≤–∞..."
            restore_cmd="tar -xjf \"$backup_file\" -C \"$restore_dir\""
            ;;
        *.tar.xz)
            echo "  üì¶ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ xz –∞—Ä—Ö–∏–≤–∞..."
            restore_cmd="tar -xJf \"$backup_file\" -C \"$restore_dir\""
            ;;
        *.tar)
            echo "  üì¶ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ tar –∞—Ä—Ö–∏–≤–∞..."
            restore_cmd="tar -xf \"$backup_file\" -C \"$restore_dir\""
            ;;
        *)
            print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—Ä—Ö–∏–≤–∞: $backup_file"
            return 1
            ;;
    esac
    
    if eval $restore_cmd; then
        local restored_count=0
        if command -v find >/dev/null 2>&1; then
            restored_count=$(find "$restore_dir" -type f 2>/dev/null | wc -l)
        fi
        print_success "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
        echo "  üìÅ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: $restored_count"
        echo "  üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $restore_dir"
        log "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ $backup_file –≤ $restore_dir (—Ñ–∞–π–ª–æ–≤: $restored_count)" "SUCCESS"
    else
        print_error "–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –±—ç–∫–∞–ø–∞"
        return 1
    fi
}

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤
restore_packages() {
    local package_file="$1"
    
    if [ ! -f "$package_file" ]; then
        print_error "–§–∞–π–ª –ø–∞–∫–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: $package_file"
        return 1
    fi
    
    print_section "–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ü–ê–ö–ï–¢–û–í"
    echo "  –§–∞–π–ª: $(basename "$package_file")"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–∞–∫–µ—Ç–æ–≤
    case "$package_file" in
        *.list)
            if command -v dpkg >/dev/null 2>&1; then
                echo "  üêß –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤ dpkg..."
                sudo dpkg --set-selections < "$package_file"
                sudo apt-get dselect-upgrade -y
                print_success "–ü–∞–∫–µ—Ç—ã dpkg –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
            fi
            ;;
        *.rpm)
            if command -v rpm >/dev/null 2>&1; then
                echo "  üî¥ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤ rpm..."
                # –î–ª—è rpm –æ–±—ã—á–Ω–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É
                print_warning "RPM –ø–∞–∫–µ—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã, –Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"
                echo "  üí° –§–∞–π–ª –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: $package_file"
            fi
            ;;
        *.pacman)
            if command -v pacman >/dev/null 2>&1; then
                echo "  üéØ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤ pacman..."
                sudo pacman -S --needed - < "$package_file"
                print_success "–ü–∞–∫–µ—Ç—ã pacman –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
            fi
            ;;
        *)
            print_warning "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –ø–∞–∫–µ—Ç–æ–≤: $package_file"
            ;;
    esac
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    load_config
    
    case "${1:-}" in
        "create")
            create_backup
            ;;
        "clean")
            clean_old_backups
            ;;
        "stats")
            show_stats
            ;;
        "restore")
            if [ -z "${2:-}" ]; then
                print_error "–£–∫–∞–∂–∏—Ç–µ —Ñ–∞–π–ª –±—ç–∫–∞–ø–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"
                echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 restore <backup-file> [restore-dir]"
                return 1
            fi
            restore_backup "$2" "${3:-}"
            ;;
        "restore-packages")
            if [ -z "${2:-}" ]; then
                print_error "–£–∫–∞–∂–∏—Ç–µ —Ñ–∞–π–ª –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"
                echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 restore-packages <package-file>"
                return 1
            fi
            restore_packages "$2"
            ;;
        "config")
            create_config
            ;;
        "list")
            echo -e "${BLUE}üìÅ –î–û–°–¢–£–ü–ù–´–ï –ë–≠–ö–ê–ü–´:${NC}"
            ls -la "$BACKUP_DIR" 2>/dev/null | grep -v "total" | grep -v ".gitkeep" || echo "  ‚ÑπÔ∏è  –ë—ç–∫–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            ;;
        "list-packages")
            echo -e "${BLUE}üì¶ –î–û–°–¢–£–ü–ù–´–ï –ë–≠–ö–ê–ü–´ –ü–ê–ö–ï–¢–û–í:${NC}"
            ls -la "$PACKAGE_BACKUP_DIR" 2>/dev/null | grep -v "total" || echo "  ‚ÑπÔ∏è  –ë—ç–∫–∞–ø—ã –ø–∞–∫–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            ;;
        "help"|"--help"|"-h"|"")
            print_header
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 {create|clean|stats|restore|restore-packages|config|list|list-packages|help}"
            echo ""
            echo "–ö–æ–º–∞–Ω–¥—ã:"
            echo "  create                   - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –±—ç–∫–∞–ø"
            echo "  clean                    - –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã"
            echo "  stats                    - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
            echo "  restore <file> [dir]     - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –±—ç–∫–∞–ø–∞"
            echo "  restore-packages <file>  - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞–∫–µ—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞"
            echo "  config                   - –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª"
            echo "  list                     - –°–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤"
            echo "  list-packages            - –°–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤ –ø–∞–∫–µ—Ç–æ–≤"
            echo "  help                     - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
            echo ""
            echo "–ü—Ä–∏–º–µ—Ä—ã:"
            echo "  $0 create"
            echo "  $0 restore backups/backup_20231022.tar.gz ./restored"
            echo "  $0 restore-packages backups/package-backups/packages_20231022.list"
            echo "  $0 stats"
            echo "  $0 config"
            ;;
        *)
            print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $1"
            echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: $0 help"
            return 1
            ;;
    esac
}

main "$@"
