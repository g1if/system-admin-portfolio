#!/bin/bash
# üö® –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
# –ê–≤—Ç–æ—Ä: g1if
# –í–µ—Ä—Å–∏—è: 2.0

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
LOG_DIR="$PROJECT_ROOT/logs"
CONFIG_DIR="$PROJECT_ROOT/configs"
ALERT_DIR="$PROJECT_ROOT/alerts"

mkdir -p "$LOG_DIR" "$CONFIG_DIR" "$ALERT_DIR"

# –¶–≤–µ—Ç–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
PURPLE='\033[0;35m'
NC='\033[0m'

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
ALERT_CONFIG="$CONFIG_DIR/alert.conf"
ALERT_LOG="$ALERT_DIR/alert-history.log"
MAIN_LOG="$LOG_DIR/alert-system.log"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    local missing=()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
    for cmd in top free df grep awk sed; do
        if ! command -v "$cmd" &> /dev/null; then
            missing+=("$cmd")
        fi
    done
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    if [[ " ${ALERT_METHODS[@]} " =~ " email " ]] && ! command -v mail &> /dev/null; then
        echo "‚ö†Ô∏è  –£—Ç–∏–ª–∏—Ç–∞ 'mail' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. Email –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã."
        ALERT_METHODS=(${ALERT_METHODS[@]/email})
    fi
    
    if [[ " ${ALERT_METHODS[@]} " =~ " telegram " ]] && ! command -v curl &> /dev/null; then
        echo "‚ö†Ô∏è  –£—Ç–∏–ª–∏—Ç–∞ 'curl' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. Telegram –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã."
        ALERT_METHODS=(${ALERT_METHODS[@]/telegram})
    fi
    
    if [ ${#missing[@]} -gt 0 ]; then
        echo "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã: ${missing[*]}"
        echo "üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt install ${missing[*]}"
        return 1
    fi
    
    return 0
}

# –§—É–Ω–∫—Ü–∏–∏ –≤—ã–≤–æ–¥–∞
print_header() {
    echo -e "${CYAN}"
    echo "üö® ==========================================="
    echo "   –°–ò–°–¢–ï–ú–ê –û–ü–û–í–ï–©–ï–ù–ò–ô v2.0"
    echo "   $(date)"
    echo "   –ê–≤—Ç–æ—Ä: g1if"
    echo "==========================================="
    echo -e "${NC}"
}

print_section() {
    echo -e "${BLUE}üìä $1${NC}"
}

print_alert() {
    echo -e "${RED}üö® $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_info() {
    echo -e "${PURPLE}‚ÑπÔ∏è  $1${NC}"
}

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥
log_message() {
    local level=$1
    local message=$2
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    echo "[$timestamp] [$level] $message" >> "$MAIN_LOG"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
create_config() {
    cat > "$ALERT_CONFIG" << 'EOF'
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–ø–æ–≤–µ—â–µ–Ω–∏–π v2.0

# –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π

# –ó–∞–≥—Ä—É–∑–∫–∞ CPU (%)
CPU_CRITICAL=90
CPU_WARNING=80

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ (%)
MEMORY_CRITICAL=90
MEMORY_WARNING=80

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞ (%) - –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–¥–µ–ª–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª
DISK_PARTITIONS="/ /home /var"
DISK_CRITICAL=90
DISK_WARNING=80

# –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ CPU (¬∞C)
TEMP_CRITICAL=80
TEMP_WARNING=70

# –°–µ—Ç–µ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ (KB/s) - —Å—É–º–º–∞—Ä–Ω–∞—è –Ω–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
NETWORK_INTERFACE="eth0"
NETWORK_CRITICAL=100000  # ~100 MB/s
NETWORK_WARNING=50000    # ~50 MB/s

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–∏—Å–æ–≤ (–Ω–∞–∑–≤–∞–Ω–∏—è systemd —Å–µ—Ä–≤–∏—Å–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)
MONITOR_SERVICES="nginx mysql ssh docker"

# –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ (—Å–µ–∫—É–Ω–¥)
CHECK_INTERVAL=60

# –ú–µ—Ç–æ–¥—ã –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
ALERT_METHODS=("log" "console")  # log, console, email, telegram

# Email –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
ALERT_EMAIL=""
SMTP_SERVER="localhost"
SMTP_PORT="25"

# Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_BOT_TOKEN=""
TELEGRAM_CHAT_ID=""

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
ENABLE_NETWORK_MONITORING=true
ENABLE_SERVICE_MONITORING=true
LOG_RETENTION_DAYS=30
EOF
    print_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: $ALERT_CONFIG"
}

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_config() {
    if [ -f "$ALERT_CONFIG" ]; then
        source "$ALERT_CONFIG"
        print_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞"
    else
        print_warning "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."
        # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        CPU_CRITICAL=90
        CPU_WARNING=80
        MEMORY_CRITICAL=90
        MEMORY_WARNING=80
        DISK_PARTITIONS="/"
        DISK_CRITICAL=90
        DISK_WARNING=80
        TEMP_CRITICAL=80
        TEMP_WARNING=70
        NETWORK_INTERFACE="eth0"
        NETWORK_CRITICAL=100000
        NETWORK_WARNING=50000
        MONITOR_SERVICES=""
        CHECK_INTERVAL=60
        ALERT_METHODS=("log" "console")
        ENABLE_NETWORK_MONITORING=false
        ENABLE_SERVICE_MONITORING=false
    fi
}

# –§—É–Ω–∫—Ü–∏–∏ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫
get_cpu_usage() {
    if ! command -v top &> /dev/null; then
        echo "0"
        return
    fi
    
    local cpu_usage=$(top -bn1 | grep "Cpu(s)" | sed "s/.*, *\([0-9.]*\)%* id.*/\1/" | awk '{print 100 - $1}')
    echo "${cpu_usage%.*}"
}

get_memory_usage() {
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º /proc/meminfo –∫–∞–∫ –Ω–∞–∏–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π –º–µ—Ç–æ–¥
    local total_mem=$(grep MemTotal /proc/meminfo | awk '{print $2}')
    local available_mem=$(grep MemAvailable /proc/meminfo | awk '{print $2}')
    
    if [ -z "$total_mem" ] || [ -z "$available_mem" ] || [ "$total_mem" -eq 0 ]; then
        echo "0"
        return
    fi
    
    local used_mem=$((total_mem - available_mem))
    local usage_percent=$((used_mem * 100 / total_mem))
    echo "$usage_percent"
}

get_disk_usage() {
    local partition=$1
    if [ -z "$partition" ]; then
        partition="/"
    fi
    
    if ! df "$partition" &> /dev/null; then
        echo "N/A"
        return
    fi
    
    local disk_usage=$(df "$partition" | awk 'NR==2 {print $5}' | sed 's/%//')
    echo "$disk_usage"
}

get_temperature() {
    local temp_files=(
        "/sys/class/thermal/thermal_zone0/temp"
        "/sys/class/hwmon/hwmon0/temp1_input"
        "/sys/class/hwmon/hwmon1/temp1_input"
    )
    
    for temp_file in "${temp_files[@]}"; do
        if [ -f "$temp_file" ]; then
            local temp=$(cat "$temp_file")
            # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ 1000, –∑–Ω–∞—á–∏—Ç –≤ –º–∏–ª–ª–∏–≥—Ä–∞–¥—É—Å–∞—Ö
            if [ "$temp" -gt 1000 ]; then
                temp=$((temp / 1000))
            fi
            echo "$temp"
            return
        fi
    done
    echo "N/A"
}

get_network_usage() {
    local interface=$1
    if [ -z "$interface" ] || [ ! -d "/sys/class/net/$interface" ]; then
        echo "N/A"
        return
    fi
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ç–∏
    local rx_bytes=$(cat "/sys/class/net/$interface/statistics/rx_bytes")
    local tx_bytes=$(cat "/sys/class/net/$interface/statistics/tx_bytes")
    
    # –ñ–¥–µ–º —Å–µ–∫—É–Ω–¥—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏
    sleep 1
    
    local rx_bytes_new=$(cat "/sys/class/net/$interface/statistics/rx_bytes")
    local tx_bytes_new=$(cat "/sys/class/net/$interface/statistics/tx_bytes")
    
    local rx_speed=$(( (rx_bytes_new - rx_bytes) / 1024 ))
    local tx_speed=$(( (tx_bytes_new - tx_bytes) / 1024 ))
    local total_speed=$((rx_speed + tx_speed))
    
    echo "$total_speed"
}

check_service_status() {
    local service=$1
    if ! command -v systemctl &> /dev/null; then
        echo "unknown"
        return
    fi
    
    if systemctl is-active --quiet "$service"; then
        echo "active"
    else
        echo "inactive"
    fi
}

# –ú–µ—Ç–æ–¥—ã –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
send_alert() {
    local level=$1
    local message=$2
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    local full_message="[$timestamp] [$level] $message"
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ–≥–¥–∞
    echo "$full_message" >> "$ALERT_LOG"
    log_message "$level" "$message"
    
    # Console –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
    if [[ " ${ALERT_METHODS[@]} " =~ " console " ]]; then
        case $level in
            "CRITICAL")
                print_alert "$message"
                ;;
            "WARNING")
                print_warning "$message"
                ;;
            *)
                print_info "$message"
                ;;
        esac
    fi
    
    # Email –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
    if [[ " ${ALERT_METHODS[@]} " =~ " email " ]] && [ -n "$ALERT_EMAIL" ]; then
        send_email_alert "$level" "$message" &
    fi
    
    # Telegram –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
    if [[ " ${ALERT_METHODS[@]} " =~ " telegram " ]] && [ -n "$TELEGRAM_BOT_TOKEN" ] && [ -n "$TELEGRAM_CHAT_ID" ]; then
        send_telegram_alert "$level" "$message" &
    fi
}

send_email_alert() {
    local level=$1
    local message=$2
    local subject="üö® –°–∏—Å—Ç–µ–º–Ω–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ: $level"
    local body="–í—Ä–µ–º—è: $(date)\n–£—Ä–æ–≤–µ–Ω—å: $level\n–°–æ–æ–±—â–µ–Ω–∏–µ: $message\n\n–°–∏—Å—Ç–µ–º–∞: $(hostname)"
    
    echo -e "$body" | mail -s "$subject" -r "alert-system@$(hostname)" "$ALERT_EMAIL" 2>/dev/null || \
    log_message "ERROR" "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ"
}

send_telegram_alert() {
    local level=$1
    local message=$2
    local text="*üö® –°–∏—Å—Ç–µ–º–Ω–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ*\n*–£—Ä–æ–≤–µ–Ω—å:* $level\n*–í—Ä–µ–º—è:* $(date)\n*–°–æ–æ–±—â–µ–Ω–∏–µ:* $message\n*–°–∏—Å—Ç–µ–º–∞:* $(hostname)"
    
    local url="https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage"
    local payload="{\"chat_id\": \"${TELEGRAM_CHAT_ID}\", \"text\": \"${text}\", \"parse_mode\": \"Markdown\"}"
    
    curl -s -X POST -H "Content-Type: application/json" -d "$payload" "$url" > /dev/null || \
    log_message "ERROR" "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å Telegram –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫
check_metrics() {
    local cpu_usage=$(get_cpu_usage)
    local mem_usage=$(get_memory_usage)
    local temp=$(get_temperature)
    
    local has_alerts=0
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ CPU
    if [ "$cpu_usage" -ge "$CPU_CRITICAL" ] 2>/dev/null; then
        send_alert "CRITICAL" "–í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU: ${cpu_usage}% (–ø–æ—Ä–æ–≥: ${CPU_CRITICAL}%)"
        has_alerts=1
    elif [ "$cpu_usage" -ge "$CPU_WARNING" ] 2>/dev/null; then
        send_alert "WARNING" "–ó–∞–≥—Ä—É–∑–∫–∞ CPU –ø–æ–≤—ã—à–µ–Ω–∞: ${cpu_usage}% (–ø–æ—Ä–æ–≥: ${CPU_WARNING}%)"
        has_alerts=1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
    if [ "$mem_usage" -ge "$MEMORY_CRITICAL" ] 2>/dev/null; then
        send_alert "CRITICAL" "–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${mem_usage}% (–ø–æ—Ä–æ–≥: ${MEMORY_CRITICAL}%)"
        has_alerts=1
    elif [ "$mem_usage" -ge "$MEMORY_WARNING" ] 2>/dev/null; then
        send_alert "WARNING" "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø–æ–≤—ã—à–µ–Ω–æ: ${mem_usage}% (–ø–æ—Ä–æ–≥: ${MEMORY_WARNING}%)"
        has_alerts=1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–æ–≤
    for partition in $DISK_PARTITIONS; do
        local disk_usage=$(get_disk_usage "$partition")
        if [ "$disk_usage" != "N/A" ]; then
            if [ "$disk_usage" -ge "$DISK_CRITICAL" ] 2>/dev/null; then
                send_alert "CRITICAL" "–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞ ${partition}: ${disk_usage}% (–ø–æ—Ä–æ–≥: ${DISK_CRITICAL}%)"
                has_alerts=1
            elif [ "$disk_usage" -ge "$DISK_WARNING" ] 2>/dev/null; then
                send_alert "WARNING" "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞ ${partition} –ø–æ–≤—ã—à–µ–Ω–æ: ${disk_usage}% (–ø–æ—Ä–æ–≥: ${DISK_WARNING}%)"
                has_alerts=1
            fi
        fi
    done
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    if [ "$temp" != "N/A" ] && [ "$temp" -ge "$TEMP_CRITICAL" ] 2>/dev/null; then
        send_alert "CRITICAL" "–í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ CPU: ${temp}¬∞C (–ø–æ—Ä–æ–≥: ${TEMP_CRITICAL}¬∞C)"
        has_alerts=1
    elif [ "$temp" != "N/A" ] && [ "$temp" -ge "$TEMP_WARNING" ] 2>/dev/null; then
        send_alert "WARNING" "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ CPU –ø–æ–≤—ã—à–µ–Ω–∞: ${temp}¬∞C (–ø–æ—Ä–æ–≥: ${TEMP_WARNING}¬∞C)"
        has_alerts=1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏
    if [ "$ENABLE_NETWORK_MONITORING" = "true" ]; then
        local network_usage=$(get_network_usage "$NETWORK_INTERFACE")
        if [ "$network_usage" != "N/A" ]; then
            if [ "$network_usage" -ge "$NETWORK_CRITICAL" ] 2>/dev/null; then
                send_alert "CRITICAL" "–í—ã—Å–æ–∫–∞—è —Å–µ—Ç–µ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ ${NETWORK_INTERFACE}: ${network_usage} KB/s (–ø–æ—Ä–æ–≥: ${NETWORK_CRITICAL} KB/s)"
                has_alerts=1
            elif [ "$network_usage" -ge "$NETWORK_WARNING" ] 2>/dev/null; then
                send_alert "WARNING" "–°–µ—Ç–µ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –ø–æ–≤—ã—à–µ–Ω–∞ –Ω–∞ ${NETWORK_INTERFACE}: ${network_usage} KB/s (–ø–æ—Ä–æ–≥: ${NETWORK_WARNING} KB/s)"
                has_alerts=1
            fi
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
    if [ "$ENABLE_SERVICE_MONITORING" = "true" ] && [ -n "$MONITOR_SERVICES" ]; then
        for service in $MONITOR_SERVICES; do
            local status=$(check_service_status "$service")
            if [ "$status" = "inactive" ]; then
                send_alert "CRITICAL" "–°–µ—Ä–≤–∏—Å $service –Ω–µ –∑–∞–ø—É—â–µ–Ω"
                has_alerts=1
            fi
        done
    fi
    
    if [ $has_alerts -eq 0 ]; then
        echo "  ‚úÖ –í—Å–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ –Ω–æ—Ä–º–µ"
    fi
    
    return $has_alerts
}

# –†–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
monitor_mode() {
    if ! check_dependencies; then
        print_alert "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞"
        exit 1
    fi
    
    print_header
    echo "  üîç –ù–∞—á–∞–ª–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã..."
    echo "  ‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: ${CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥"
    echo "  üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –º–µ—Ç—Ä–∏–∫–∏:"
    echo "    üíª CPU: > ${CPU_WARNING}% (–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ), > ${CPU_CRITICAL}% (–∫—Ä–∏—Ç–∏—á–Ω–æ)"
    echo "    üß† –ü–∞–º—è—Ç—å: > ${MEMORY_WARNING}% (–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ), > ${MEMORY_CRITICAL}% (–∫—Ä–∏—Ç–∏—á–Ω–æ)"
    echo "    üíæ –î–∏—Å–∫–∏: ${DISK_PARTITIONS}"
    echo "    üå°Ô∏è  –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: > ${TEMP_WARNING}¬∞C (–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ), > ${TEMP_CRITICAL}¬∞C (–∫—Ä–∏—Ç–∏—á–Ω–æ)"
    
    if [ "$ENABLE_NETWORK_MONITORING" = "true" ]; then
        echo "    üåê –°–µ—Ç—å (${NETWORK_INTERFACE}): > ${NETWORK_WARNING} KB/s (–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ), > ${NETWORK_CRITICAL} KB/s (–∫—Ä–∏—Ç–∏—á–Ω–æ)"
    fi
    
    if [ "$ENABLE_SERVICE_MONITORING" = "true" ] && [ -n "$MONITOR_SERVICES" ]; then
        echo "    üîß –°–µ—Ä–≤–∏—Å—ã: ${MONITOR_SERVICES}"
    fi
    
    echo "  üì® –ú–µ—Ç–æ–¥—ã –æ–ø–æ–≤–µ—â–µ–Ω–∏—è: ${ALERT_METHODS[*]}"
    echo ""
    echo "  –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"
    echo ""
    
    local counter=0
    while true; do
        counter=$((counter + 1))
        echo "======= –ü—Ä–æ–≤–µ—Ä–∫–∞ #$counter ($(date '+%H:%M:%S')) ======="
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        show_current_metrics
        
        echo ""
        echo "  üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:"
        check_metrics
        echo "======================================"
        echo ""
        sleep "$CHECK_INTERVAL"
    done
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
show_current_metrics() {
    local cpu_usage=$(get_cpu_usage)
    local mem_usage=$(get_memory_usage)
    local temp=$(get_temperature)
    
    echo "  üìä –¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:"
    echo "    üíª CPU: ${cpu_usage}%"
    echo "    üß† –ü–∞–º—è—Ç—å: ${mem_usage}%"
    
    for partition in $DISK_PARTITIONS; do
        local disk_usage=$(get_disk_usage "$partition")
        echo "    üíæ –î–∏—Å–∫ $partition: ${disk_usage}%"
    done
    
    echo "    üå°Ô∏è  –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${temp}¬∞C"
    
    if [ "$ENABLE_NETWORK_MONITORING" = "true" ]; then
        local network_usage=$(get_network_usage "$NETWORK_INTERFACE")
        echo "    üåê –°–µ—Ç—å ${NETWORK_INTERFACE}: ${network_usage} KB/s"
    fi
    
    if [ "$ENABLE_SERVICE_MONITORING" = "true" ] && [ -n "$MONITOR_SERVICES" ]; then
        echo "    üîß –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
        for service in $MONITOR_SERVICES; do
            local status=$(check_service_status "$service")
            local status_icon="‚úÖ"
            if [ "$status" = "inactive" ]; then
                status_icon="‚ùå"
            elif [ "$status" = "unknown" ]; then
                status_icon="‚ö†Ô∏è "
            fi
            echo "      $status_icon $service: $status"
        done
    fi
}

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
show_history() {
    print_section "–ò–°–¢–û–†–ò–Ø –û–ü–û–í–ï–©–ï–ù–ò–ô"
    
    if [ -f "$ALERT_LOG" ]; then
        if [ -s "$ALERT_LOG" ]; then
            tail -20 "$ALERT_LOG"
            echo ""
            echo "üìÅ –ü–æ–ª–Ω—ã–π –ª–æ–≥: $ALERT_LOG"
        else
            echo "  ‚ÑπÔ∏è  –û–ø–æ–≤–µ—â–µ–Ω–∏–π –Ω–µ –±—ã–ª–æ"
        fi
    else
        echo "  ‚ÑπÔ∏è  –§–∞–π–ª –ª–æ–≥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    fi
}

# –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
show_status() {
    print_section "–¢–ï–ö–£–©–ò–ô –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´"
    show_current_metrics
}

# –¢–µ—Å—Ç –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
test_all() {
    print_header
    echo "  üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –§–£–ù–ö–¶–ò–ô"
    echo ""
    
    echo "=== –¢–µ—Å—Ç –º–µ—Ç—Ä–∏–∫ ==="
    echo "CPU: $(get_cpu_usage)%"
    echo "–ü–∞–º—è—Ç—å: $(get_memory_usage)%"
    echo "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: $(get_temperature)¬∞C"
    
    for partition in $DISK_PARTITIONS; do
        echo "–î–∏—Å–∫ $partition: $(get_disk_usage "$partition")%"
    done
    
    if [ "$ENABLE_NETWORK_MONITORING" = "true" ]; then
        echo "–°–µ—Ç—å: $(get_network_usage "$NETWORK_INTERFACE") KB/s"
    fi
    
    echo ""
    echo "=== –¢–µ—Å—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–π ==="
    send_alert "INFO" "–¢–µ—Å—Ç–æ–≤–æ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    send_alert "WARNING" "–¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"
    send_alert "CRITICAL" "–¢–µ—Å—Ç–æ–≤–æ–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    
    echo ""
    echo "=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ ==="
    if [ "$ENABLE_SERVICE_MONITORING" = "true" ] && [ -n "$MONITOR_SERVICES" ]; then
        for service in $MONITOR_SERVICES; do
            echo "$service: $(check_service_status "$service")"
        done
    fi
    
    print_success "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
}

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤
clean_logs() {
    local retention_days=${LOG_RETENTION_DAYS:-30}
    local cutoff_date=$(date -d "$retention_days days ago" +%Y-%m-%d)
    
    print_section "–û–ß–ò–°–¢–ö–ê –õ–û–ì–û–í"
    
    if [ -f "$ALERT_LOG" ]; then
        local temp_file=$(mktemp)
        while IFS= read -r line; do
            local log_date=$(echo "$line" | grep -oE '[0-9]{4}-[0-9]{2}-[0-9]{2}' | head -1)
            if [[ "$log_date" > "$cutoff_date" ]] || [[ "$log_date" == "$cutoff_date" ]]; then
                echo "$line" >> "$temp_file"
            fi
        done < "$ALERT_LOG"
        
        mv "$temp_file" "$ALERT_LOG"
        print_success "–õ–æ–≥–∏ —Å—Ç–∞—Ä—à–µ $retention_days –¥–Ω–µ–π –æ—á–∏—â–µ–Ω—ã"
    else
        print_info "–§–∞–π–ª –ª–æ–≥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    load_config
    
    case "${1:-}" in
        "monitor")
            monitor_mode
            ;;
        "status")
            print_header
            show_status
            ;;
        "history")
            print_header
            show_history
            ;;
        "config")
            create_config
            ;;
        "test")
            test_all
            ;;
        "clean")
            clean_logs
            ;;
        "help"|"--help"|"-h"|"")
            print_header
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–ö–û–ú–ê–ù–î–ê]"
            echo ""
            echo "–ö–æ–º–∞–Ω–¥—ã:"
            echo "  monitor  - –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã"
            echo "  status   - –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"
            echo "  history  - –ò—Å—Ç–æ—Ä–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π"
            echo "  config   - –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª"
            echo "  test     - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π"
            echo "  clean    - –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤"
            echo "  help     - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
            echo ""
            echo "–ü—Ä–∏–º–µ—Ä—ã:"
            echo "  $0 monitor    # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
            echo "  $0 status     # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞"
            echo "  $0 test       # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π"
            echo "  $0 clean      # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤"
            ;;
        *)
            print_alert "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $1"
            echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: $0 help"
            exit 1
            ;;
    esac
}

main "$@"
