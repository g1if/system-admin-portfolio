#!/bin/bash
# üîÑ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
# –ê–≤—Ç–æ—Ä: g1if
# –í–µ—Ä—Å–∏—è: 2.0

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
LOG_DIR="$PROJECT_ROOT/logs"
CONFIG_DIR="$PROJECT_ROOT/configs"
REPORTS_DIR="$PROJECT_ROOT/reports"
CACHE_DIR="$PROJECT_ROOT/cache"

mkdir -p "$LOG_DIR" "$CONFIG_DIR" "$REPORTS_DIR" "$CACHE_DIR"

# –¶–≤–µ—Ç–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
PURPLE='\033[0;35m'
ORANGE='\033[0;33m'
NC='\033[0m'

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CONFIG_FILE="$CONFIG_DIR/process-monitor.conf"
MAIN_LOG="$LOG_DIR/process-monitor.log"
CACHE_FILE="$CACHE_DIR/process-cache.db"
ALERT_THRESHOLDS="$CONFIG_DIR/process-thresholds.conf"

# –§—É–Ω–∫—Ü–∏–∏ –≤—ã–≤–æ–¥–∞
print_header() {
    echo -e "${CYAN}"
    echo "üîÑ ==========================================="
    echo "   –ü–†–û–î–í–ò–ù–£–¢–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–†–û–¶–ï–°–°–û–í v2.0"
    echo "   $(date)"
    echo "   –ê–≤—Ç–æ—Ä: g1if"
    echo "==========================================="
    echo -e "${NC}"
}

print_section() {
    echo -e "${BLUE}üìä $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_info() {
    echo -e "${PURPLE}‚ÑπÔ∏è  $1${NC}"
}

print_debug() {
    echo -e "${ORANGE}üêõ $1${NC}"
}

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
log_message() {
    local level=$1
    local message=$2
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] [$level] $message" >> "$MAIN_LOG"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
create_config() {
    cat > "$CONFIG_FILE" << 'EOF'
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ v2.0

# –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
MONITOR_INTERVAL=3
REFRESH_RATE=2
ENABLE_COLORS=true
SAVE_REPORTS=true
REPORT_RETENTION_DAYS=7

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
ENABLE_PROCESS_TREE=true
ENABLE_RESOURCE_MONITOR=true
ENABLE_SERVICE_MONITOR=true
ENABLE_CONTAINER_MONITOR=true
SHOW_PROCESS_DETAILS=true

# –ü–æ—Ä–æ–≥–∏ –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
CPU_CRITICAL=90
CPU_WARNING=80
MEMORY_CRITICAL=90
MEMORY_WARNING=80
PROCESS_COUNT_WARNING=500
ZOMBIE_PROCESS_WARNING=1

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
SHOW_SYSTEM_PROCESSES=false
SHOW_USER_PROCESSES=true
FILTER_BY_USER=""
EXCLUDE_PATTERNS=("kworker/*" "ksoftirqd/*" "migration/*")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
MONITOR_SUDO_PROCESSES=true
DETECT_SUSPICIOUS_PROCESSES=true
ALERT_ON_NEW_PROCESSES=false
CHECK_PROCESS_INTEGRITY=false

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
ENABLE_CACHING=true
CACHE_TTL=10
MAX_PROCESS_DISPLAY=20
COMPACT_DISPLAY=false

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
ENABLE_PROCESS_CONTROL=true
REQUIRE_CONFIRMATION=true
LOG_PROCESS_CHANGES=true

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
TRACK_PROCESS_HISTORY=true
ANALYZE_PROCESS_BEHAVIOR=true
DETECT_ANOMALIES=true
GENERATE_STATISTICS=true
EOF

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –ø–æ—Ä–æ–≥–∞–º–∏
    cat > "$ALERT_THRESHOLDS" << 'EOF'
# –ü–æ—Ä–æ–≥–∏ –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö

# –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã (–≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å)
CRITICAL_PROCESSES=(
    "init"
    "systemd"
    "sshd"
    "nginx"
    "apache"
    "mysql"
    "postgres"
    "docker"
    "kubelet"
)

# –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (–≤—ã–∑—ã–≤–∞—é—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è)
SUSPICIOUS_PATTERNS=(
    "miner"
    "cryptocurrency"
    "malware"
    "backdoor"
    "rootkit"
    ".*sh -c"
    "wget.*http"
    "curl.*http"
)

# –ü—Ä–æ—Ü–µ—Å—Å—ã —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
HIGH_PRIORITY_PROCESSES=(
    "kernel"
    "system"
    "dbus"
    "network"
)

# –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã (–Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è—Ö)
IGNORED_PROCESSES=(
    "ps"
    "top"
    "htop"
    "grep"
    "awk"
    "sed"
)
EOF

    print_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã:"
    print_success "  $CONFIG_FILE"
    print_success "  $ALERT_THRESHOLDS"
}

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_config() {
    if [ -f "$CONFIG_FILE" ]; then
        source "$CONFIG_FILE"
        print_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞"
    else
        print_warning "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."
        MONITOR_INTERVAL=3
        REFRESH_RATE=2
        ENABLE_PROCESS_TREE=true
        ENABLE_RESOURCE_MONITOR=true
        CPU_CRITICAL=90
        CPU_WARNING=80
        MEMORY_CRITICAL=90
        MEMORY_WARNING=80
        ENABLE_CACHING=true
        CACHE_TTL=10
    fi

    if [ -f "$ALERT_THRESHOLDS" ]; then
        source "$ALERT_THRESHOLDS"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    local missing=()
    local optional_missing=()
    
    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
    for cmd in ps grep awk sort head tail; do
        if ! command -v "$cmd" &> /dev/null; then
            missing+=("$cmd")
        fi
    done
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
    if ! command -v pstree &> /dev/null; then
        optional_missing+=("pstree")
    fi
    
    if ! command -v lsof &> /dev/null; then
        optional_missing+=("lsof")
    fi
    
    if ! command -v htop &> /dev/null; then
        optional_missing+=("htop")
    fi
    
    if [ ${#missing[@]} -gt 0 ]; then
        print_error "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã: ${missing[*]}"
        echo "üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt install ${missing[*]}"
        return 1
    fi
    
    if [ ${#optional_missing[@]} -gt 0 ]; then
        print_warning "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã: ${optional_missing[*]}"
        echo "üí° –î–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt install ${optional_missing[*]}"
    fi
    
    return 0
}

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
cache_set() {
    local key=$1
    local value=$2
    local ttl=${3:-$CACHE_TTL}
    local expire=$(( $(date +%s) + ttl ))
    
    if [ "$ENABLE_CACHING" = "true" ]; then
        echo "$key|$value|$expire" >> "$CACHE_FILE"
    fi
}

cache_get() {
    local key=$1
    local current_time=$(date +%s)
    local temp_file=$(mktemp)
    
    if [ ! -f "$CACHE_FILE" ] || [ "$ENABLE_CACHING" != "true" ]; then
        return 1
    fi
    
    local found=0
    while IFS='|' read -r cache_key value expire; do
        if [ "$current_time" -lt "$expire" ]; then
            if [ "$cache_key" = "$key" ]; then
                echo "$value"
                found=1
            fi
            echo "$cache_key|$value|$expire" >> "$temp_file"
        fi
    done < "$CACHE_FILE"
    
    if [ -f "$temp_file" ]; then
        mv "$temp_file" "$CACHE_FILE"
    fi
    
    [ "$found" -eq 1 ] && return 0 || return 1
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
get_system_stats() {
    print_section "–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´"
    
    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    local total_processes=$(ps -e --no-headers | wc -l)
    local user_processes=$(ps -u $(whoami) --no-headers 2>/dev/null | wc -l || echo "0")
    local zombie_processes=$(ps -e -o stat --no-headers | grep -c Z)
    
    echo "  üìà –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: $total_processes"
    echo "  üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: $user_processes"
    
    if [ "$zombie_processes" -gt 0 ]; then
        print_warning "  üßü Zombie –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: $zombie_processes"
    else
        echo "  üßü Zombie –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: 0"
    fi
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    local load_avg=$(cat /proc/loadavg | awk '{print $1, $2, $3}')
    echo "  üìä –ù–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã: $load_avg"
    
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
    local total_memory=$(free -m | grep Mem: | awk '{print $2}')
    local used_memory=$(free -m | grep Mem: | awk '{print $3}')
    local memory_percent=$((used_memory * 100 / total_memory))
    
    echo -n "  üß† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${memory_percent}%"
    if [ "$memory_percent" -ge "$MEMORY_CRITICAL" ]; then
        print_error " üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô"
    elif [ "$memory_percent" -ge "$MEMORY_WARNING" ]; then
        print_warning " ‚ö†Ô∏è  –í–´–°–û–ö–ò–ô"
    else
        print_success " ‚úÖ –ù–û–†–ú–ê"
    fi
}

# –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ CPU
analyze_cpu_processes() {
    print_section "–¢–û–ü –ü–†–û–¶–ï–°–°–û–í –ü–û CPU"
    
    local top_cpu_processes=$(ps aux --sort=-%cpu | head -$((MAX_PROCESS_DISPLAY + 1)) | tail -n +2)
    local counter=0
    
    echo "  üèÜ –¢–æ–ø-$MAX_PROCESS_DISPLAY –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é CPU:"
    echo ""
    echo "    PID     USER      CPU%    MEM%    COMMAND"
    echo "    ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
    
    while IFS= read -r process; do
        counter=$((counter + 1))
        local pid=$(echo "$process" | awk '{print $2}')
        local user=$(echo "$process" | awk '{print $1}')
        local cpu=$(echo "$process" | awk '{print $3}')
        local mem=$(echo "$process" | awk '{print $4}')
        local command=$(echo "$process" | awk '{for(i=11;i<=NF;i++) printf $i" "; print ""}')
        
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        if [ ${#command} -gt 50 ]; then
            command="${command:0:47}..."
        fi
        
        echo -n "    $pid     $user     $cpu%     $mem%    $command"
        
        # –¶–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è CPU
        if (( $(echo "$cpu >= $CPU_CRITICAL" | bc -l 2>/dev/null || echo "0") )); then
            print_error " üö®"
        elif (( $(echo "$cpu >= $CPU_WARNING" | bc -l 2>/dev/null || echo "0") )); then
            print_warning " ‚ö†Ô∏è"
        else
            echo ""
        fi
    done <<< "$top_cpu_processes"
}

# –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ –ø–∞–º—è—Ç–∏
analyze_memory_processes() {
    print_section "–¢–û–ü –ü–†–û–¶–ï–°–°–û–í –ü–û –ü–ê–ú–Ø–¢–ò"
    
    local top_mem_processes=$(ps aux --sort=-%mem | head -$((MAX_PROCESS_DISPLAY + 1)) | tail -n +2)
    local counter=0
    
    echo "  üèÜ –¢–æ–ø-$MAX_PROCESS_DISPLAY –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –ø–∞–º—è—Ç–∏:"
    echo ""
    echo "    PID     USER      MEM%    CPU%    COMMAND"
    echo "    ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
    
    while IFS= read -r process; do
        counter=$((counter + 1))
        local pid=$(echo "$process" | awk '{print $2}')
        local user=$(echo "$process" | awk '{print $1}')
        local mem=$(echo "$process" | awk '{print $4}')
        local cpu=$(echo "$process" | awk '{print $3}')
        local command=$(echo "$process" | awk '{for(i=11;i<=NF;i++) printf $i" "; print ""}')
        
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        if [ ${#command} -gt 50 ]; then
            command="${command:0:47}..."
        fi
        
        echo -n "    $pid     $user     $mem%     $cpu%    $command"
        
        # –¶–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
        if (( $(echo "$mem >= $MEMORY_CRITICAL" | bc -l 2>/dev/null || echo "0") )); then
            print_error " üö®"
        elif (( $(echo "$mem >= $MEMORY_WARNING" | bc -l 2>/dev/null || echo "0") )); then
            print_warning " ‚ö†Ô∏è"
        else
            echo ""
        fi
    done <<< "$top_mem_processes"
}

# –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
get_process_details() {
    local pid=$1
    
    if [ -z "$pid" ]; then
        print_error "–£–∫–∞–∂–∏—Ç–µ PID –ø—Ä–æ—Ü–µ—Å—Å–∞"
        return 1
    fi
    
    if ! ps -p "$pid" > /dev/null 2>&1; then
        print_error "–ü—Ä–æ—Ü–µ—Å—Å —Å PID $pid –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        return 1
    fi
    
    print_section "–î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–†–û–¶–ï–°–°–ï: $pid"
    
    # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    echo "  üìã –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:"
    ps -p "$pid" -o pid,user,pcpu,pmem,vsz,rss,tty,stat,start,time,comm --no-headers 2>/dev/null | while read -r line; do
        echo "    üÜî $line"
    done
    
    # –ö–æ–º–∞–Ω–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    echo "  üíª –ö–æ–º–∞–Ω–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞:"
    local cmdline=$(cat /proc/"$pid"/cmdline 2>/dev/null | tr '\0' ' ' || echo "–Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ")
    echo "    $cmdline"
    
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
    echo "  üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:"
    local cpu_usage=$(ps -p "$pid" -o %cpu --no-headers 2>/dev/null | awk '{print $1}')
    local mem_usage=$(ps -p "$pid" -o %mem --no-headers 2>/dev/null | awk '{print $1}')
    local vsz=$(ps -p "$pid" -o vsz --no-headers 2>/dev/null | awk '{print $1}')
    local rss=$(ps -p "$pid" -o rss --no-headers 2>/dev/null | awk '{print $1}')
    
    echo "    üíª CPU: ${cpu_usage:-0}%"
    echo "    üß† –ü–∞–º—è—Ç—å: ${mem_usage:-0}%"
    echo "    üíæ –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å: ${vsz:-0} KB"
    echo "    üìù –§–∏–∑–∏—á–µ—Å–∫–∞—è –ø–∞–º—è—Ç—å: ${rss:-0} KB"
    
    # –û—Ç–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
    if command -v lsof &> /dev/null; then
        echo "  üìÅ –û—Ç–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã (–ø–µ—Ä–≤—ã–µ 5):"
        lsof -p "$pid" 2>/dev/null | head -6 | tail -n +2 | while read -r line; do
            echo "    üìÑ $line"
        done
    fi
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ /proc
    if [ -d "/proc/$pid" ]; then
        echo "  üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ /proc:"
        local environ_count=$(cat /proc/"$pid"/environ 2>/dev/null | tr '\0' '\n' | wc -l)
        local fd_count=$(ls /proc/"$pid"/fd 2>/dev/null | wc -l)
        
        echo "    üåç –ü–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: $environ_count"
        echo "    üîó –û—Ç–∫—Ä—ã—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤—ã—Ö –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤: $fd_count"
    fi
}

# –ü–æ–∏—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
find_processes() {
    local pattern=$1
    local user=$2
    
    if [ -z "$pattern" ]; then
        print_error "–£–∫–∞–∂–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞"
        return 1
    fi
    
    print_section "–ü–û–ò–°–ö –ü–†–û–¶–ï–°–°–û–í: $pattern"
    
    local search_cmd="ps aux"
    
    if [ -n "$user" ]; then
        search_cmd="$search_cmd -u $user"
    fi
    
    local results=$(eval "$search_cmd" | grep -i "$pattern" | grep -v grep)
    
    if [ -z "$results" ]; then
        print_info "–ü—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        return 0
    fi
    
    echo "  üîç –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: $(echo "$results" | wc -l)"
    echo ""
    echo "    PID     USER      CPU%    MEM%    COMMAND"
    echo "    ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
    
    while IFS= read -r process; do
        local pid=$(echo "$process" | awk '{print $2}')
        local user=$(echo "$process" | awk '{print $1}')
        local cpu=$(echo "$process" | awk '{print $3}')
        local mem=$(echo "$process" | awk '{print $4}')
        local command=$(echo "$process" | awk '{for(i=11;i<=NF;i++) printf $i" "; print ""}')
        
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        if [ ${#command} -gt 60 ]; then
            command="${command:0:57}..."
        fi
        
        echo "    $pid     $user     $cpu%     $mem%    $command"
    done <<< "$results"
}

# –î–µ—Ä–µ–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
show_process_tree() {
    if [ "$ENABLE_PROCESS_TREE" != "true" ]; then
        return
    fi
    
    print_section "–î–ï–†–ï–í–û –ü–†–û–¶–ï–°–°–û–í"
    
    if command -v pstree >/dev/null 2>&1; then
        pstree -p -u -a -A
    else
        print_warning "–£—Ç–∏–ª–∏—Ç–∞ pstree –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        echo "üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt install psmisc"
        echo ""
        echo "üìù –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤—ã–≤–æ–¥:"
        ps -ejH | head -30
    fi
}

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
monitor_realtime() {
    if ! check_dependencies; then
        print_error "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞"
        exit 1
    fi
    
    print_section "–ú–û–ù–ò–¢–û–†–ò–ù–ì –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò"
    echo "  –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"
    echo "  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ $REFRESH_RATE —Å–µ–∫—É–Ω–¥..."
    echo ""
    
    local counter=0
    while true; do
        counter=$((counter + 1))
        clear
        print_header
        echo "  üîÑ –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: $counter"
        echo "  ‚è∞ –í—Ä–µ–º—è: $(date '+%H:%M:%S')"
        echo "  ==================================="
        
        get_system_stats
        echo ""
        analyze_cpu_processes
        echo ""
        analyze_memory_processes
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 10 —Ü–∏–∫–ª–æ–≤
        if [ $((counter % 10)) -eq 0 ]; then
            echo ""
            check_process_warnings
        fi
        
        echo ""
        echo "  ‚åõ –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ $REFRESH_RATE —Å–µ–∫—É–Ω–¥..."
        sleep "$REFRESH_RATE"
    done
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
check_process_warnings() {
    print_section "–ü–†–û–í–ï–†–ö–ê –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ô"
    
    local warnings=0
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ zombie –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    local zombie_count=$(ps -e -o stat --no-headers | grep -c Z)
    if [ "$zombie_count" -gt 0 ]; then
        print_warning "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã zombie –ø—Ä–æ—Ü–µ—Å—Å—ã: $zombie_count"
        warnings=$((warnings + 1))
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º CPU
    local high_cpu_count=$(ps aux --sort=-%cpu | awk '{if($3>='"$CPU_WARNING"') print $0}' | wc -l)
    if [ "$high_cpu_count" -gt 1 ]; then  # -1 –ø–æ—Ç–æ–º—É —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        print_warning "–ü—Ä–æ—Ü–µ—Å—Å—ã —Å –≤—ã—Å–æ–∫–∏–º CPU: $((high_cpu_count - 1))"
        warnings=$((warnings + 1))
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º RAM
    local high_mem_count=$(ps aux --sort=-%mem | awk '{if($4>='"$MEMORY_WARNING"') print $0}' | wc -l)
    if [ "$high_mem_count" -gt 1 ]; then
        print_warning "–ü—Ä–æ—Ü–µ—Å—Å—ã —Å –≤—ã—Å–æ–∫–∏–º RAM: $((high_mem_count - 1))"
        warnings=$((warnings + 1))
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    if [ "$DETECT_SUSPICIOUS_PROCESSES" = "true" ]; then
        for pattern in "${SUSPICIOUS_PATTERNS[@]}"; do
            local suspicious_count=$(ps aux | grep -c "$pattern" | grep -v grep || true)
            if [ "$suspicious_count" -gt 0 ]; then
                print_warning "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã: $suspicious_count (–ø–∞—Ç—Ç–µ—Ä–Ω: $pattern)"
                warnings=$((warnings + 1))
            fi
        done
    fi
    
    if [ "$warnings" -eq 0 ]; then
        print_success "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
    fi
}

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
manage_process() {
    local action=$1
    local pid=$2
    
    if [ -z "$pid" ]; then
        print_error "–£–∫–∞–∂–∏—Ç–µ PID –ø—Ä–æ—Ü–µ—Å—Å–∞"
        return 1
    fi
    
    if ! ps -p "$pid" > /dev/null 2>&1; then
        print_error "–ü—Ä–æ—Ü–µ—Å—Å —Å PID $pid –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        return 1
    fi
    
    local process_info=$(ps -p "$pid" -o user,comm --no-headers 2>/dev/null)
    
    case $action in
        "kill")
            if [ "$REQUIRE_CONFIRMATION" = "true" ]; then
                echo -e "${YELLOW}‚ö†Ô∏è  –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å $pid ($process_info)? [y/N]${NC}"
                read -r confirmation
                if [[ ! "$confirmation" =~ ^[Yy]$ ]]; then
                    print_info "–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
                    return 0
                fi
            fi
            
            if kill "$pid"; then
                print_success "–ü—Ä–æ—Ü–µ—Å—Å $pid –∑–∞–≤–µ—Ä—à–µ–Ω"
                log_message "INFO" "–ü—Ä–æ—Ü–µ—Å—Å $pid ($process_info) –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
            else
                print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å $pid"
            fi
            ;;
        
        "stop")
            if kill -STOP "$pid"; then
                print_success "–ü—Ä–æ—Ü–µ—Å—Å $pid –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                log_message "INFO" "–ü—Ä–æ—Ü–µ—Å—Å $pid ($process_info) –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            else
                print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å $pid"
            fi
            ;;
        
        "continue")
            if kill -CONT "$pid"; then
                print_success "–ü—Ä–æ—Ü–µ—Å—Å $pid –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω"
                log_message "INFO" "–ü—Ä–æ—Ü–µ—Å—Å $pid ($process_info) –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω"
            else
                print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å $pid"
            fi
            ;;
        
        "priority")
            local priority=$3
            if [ -z "$priority" ]; then
                print_error "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (–æ—Ç -20 –¥–æ 19)"
                return 1
            fi
            
            if renice "$priority" "$pid"; then
                print_success "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞ $pid –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ $priority"
                log_message "INFO" "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞ $pid ($process_info) –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ $priority"
            else
                print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞ $pid"
            fi
            ;;
        
        *)
            print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: $action"
            return 1
            ;;
    esac
}

# –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
analyze_resource_usage() {
    print_section "–ê–ù–ê–õ–ò–ó –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –†–ï–°–£–†–°–û–í"
    
    # –û–±—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
    local total_cpu=$(ps -eo pcpu --no-headers | awk '{sum+=$1} END {print sum}')
    echo "  üíª –û–±—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏: ${total_cpu:-0}%"
    
    # –û–±—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
    local total_mem=$(ps -eo pmem --no-headers | awk '{sum+=$1} END {print sum}')
    echo "  üß† –û–±—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏: ${total_mem:-0}%"
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    echo "  üë• –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:"
    ps -eo user --no-headers | sort | uniq -c | sort -nr | head -5 | while read -r count user; do
        echo "    üë§ $user: $count –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"
    done
    
    # –°–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    echo "  üïê –°–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã:"
    ps -eo pid,user,etime,comm --sort=etime --no-headers | head -5 | while read -r pid user etime comm; do
        echo "    ‚è≥ $pid ($user): $comm - $etime"
    done
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
generate_report() {
    local report_file="$REPORTS_DIR/process-report-$(date +%Y%m%d_%H%M%S).txt"
    
    print_section "–ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–ê"
    
    print_header > "$report_file"
    echo "üìÖ –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: $(date)" >> "$report_file"
    echo "" >> "$report_file"
    
    get_system_stats >> "$report_file" 2>&1
    echo "" >> "$report_file"
    analyze_cpu_processes >> "$report_file" 2>&1
    echo "" >> "$report_file"
    analyze_memory_processes >> "$report_file" 2>&1
    echo "" >> "$report_file"
    analyze_resource_usage >> "$report_file" 2>&1
    echo "" >> "$report_file"
    check_process_warnings >> "$report_file" 2>&1
    
    print_success "–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: $report_file"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    load_config
    
    case "${1:-}" in
        "monitor")
            print_header
            monitor_realtime
            ;;
        "top")
            print_header
            get_system_stats
            analyze_cpu_processes
            analyze_memory_processes
            ;;
        "find")
            print_header
            find_processes "${2:-}" "${3:-}"
            ;;
        "info")
            print_header
            get_process_details "${2:-}"
            ;;
        "tree")
            print_header
            show_process_tree
            ;;
        "kill")
            manage_process "kill" "${2:-}"
            ;;
        "stop")
            manage_process "stop" "${2:-}"
            ;;
        "continue")
            manage_process "continue" "${2:-}"
            ;;
        "priority")
            manage_process "priority" "${2:-}" "${3:-}"
            ;;
        "analyze")
            print_header
            analyze_resource_usage
            check_process_warnings
            ;;
        "report")
            print_header
            generate_report
            ;;
        "config")
            create_config
            ;;
        "help"|"--help"|"-h"|"")
            print_header
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–ö–û–ú–ê–ù–î–ê] [–ü–ê–†–ê–ú–ï–¢–†–´]"
            echo ""
            echo "–ö–æ–º–∞–Ω–¥—ã:"
            echo "  monitor               - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
            echo "  top                   - –°—Ç–∞—Ç–∏—á–Ω—ã–π —Ç–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"
            echo "  find <—à–∞–±–ª–æ–Ω> [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] - –ü–æ–∏—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"
            echo "  info <PID>            - –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ"
            echo "  tree                  - –î–µ—Ä–µ–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"
            echo "  kill <PID>            - –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å"
            echo "  stop <PID>            - –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å"
            echo "  continue <PID>        - –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å"
            echo "  priority <PID> <—É—Ä–æ–≤–µ–Ω—å> - –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç"
            echo "  analyze               - –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤"
            echo "  report                - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"
            echo "  config                - –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
            echo "  help                  - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
            echo ""
            echo "–ü—Ä–∏–º–µ—Ä—ã:"
            echo "  $0 monitor"
            echo "  $0 top"
            echo "  $0 find nginx"
            echo "  $0 info 1234"
            echo "  $0 kill 5678"
            echo "  $0 priority 1234 5"
            echo "  $0 analyze"
            echo "  $0 report"
            ;;
        *)
            print_header
            get_system_stats
            analyze_cpu_processes
            analyze_memory_processes
            analyze_resource_usage
            ;;
    esac
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
log_message "INFO" "–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"
main "$@"
log_message "INFO" "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"
