#!/bin/bash
# üê≥ –ú–µ–Ω–µ–¥–∂–µ—Ä Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏ –æ–±—Ä–∞–∑–æ–≤
# –ê–≤—Ç–æ—Ä: g1if

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
LOG_DIR="$PROJECT_ROOT/logs"
CONFIG_DIR="$PROJECT_ROOT/configs"
DOCKER_DIR="$PROJECT_ROOT/docker-backups"

mkdir -p "$LOG_DIR" "$CONFIG_DIR" "$DOCKER_DIR"

# –¶–≤–µ—Ç–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
PURPLE='\033[0;35m'
NC='\033[0m'

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DOCKER_CONFIG="$CONFIG_DIR/docker-manager.conf"
DOCKER_LOG="$LOG_DIR/docker-manager.log"

# –§—É–Ω–∫—Ü–∏–∏ –≤—ã–≤–æ–¥–∞
print_header() {
    echo -e "${CYAN}"
    echo "üê≥ ==========================================="
    echo "   –ú–ï–ù–ï–î–ñ–ï–† DOCKER –ö–û–ù–¢–ï–ô–ù–ï–†–û–í v1.0"
    echo "   $(date)"
    echo "   –ê–≤—Ç–æ—Ä: g1if"
    echo "==========================================="
    echo -e "${NC}"
}

print_section() {
    echo -e "${BLUE}üìä $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

show_help() {
    print_header
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–ö–û–ú–ê–ù–î–ê] [–û–ü–¶–ò–ò]"
    echo ""
    echo "–ö–æ–º–∞–Ω–¥—ã:"
    echo "  ps         - –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    echo "  images     - –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–∑–æ–≤"
    echo "  stats      - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    echo "  logs       - –õ–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
    echo "  start      - –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"
    echo "  stop       - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"
    echo "  restart    - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"
    echo "  remove     - –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"
    echo "  cleanup    - –û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã"
    echo "  backup     - –ë—ç–∫–∞–ø –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
    echo "  monitor    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
    echo "  compose    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Docker Compose"
    echo "  config     - –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
    echo "  help       - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0 ps                      # –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    echo "  $0 logs nginx              # –õ–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ nginx"
    echo "  $0 stop container_name     # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"
    echo "  $0 cleanup                 # –û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã"
    echo "  $0 backup nginx            # –ë—ç–∫–∞–ø –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ nginx"
    echo "  $0 monitor                 # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
create_config() {
    cat > "$DOCKER_CONFIG" << 'EOF'
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Docker –º–µ–Ω–µ–¥–∂–µ—Ä–∞

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ?
AUTO_REMOVE_CONTAINERS=false

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—Ç—å –æ–±—Ä–∞–∑—ã –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ?
AUTO_REMOVE_IMAGES=false

# –ü—É—Ç—å –¥–ª—è –±—ç–∫–∞–ø–æ–≤
BACKUP_PATH="/home/defo/projects/system-admin/docker-backups"

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ - –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Å–µ–∫—É–Ω–¥—ã)
MONITOR_INTERVAL=5

# –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –æ–ø–µ—Ä–∞—Ü–∏–π (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)
EXCLUDE_CONTAINERS=""

# Docker Compose –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
COMPOSE_PROJECTS=(
    "/path/to/your/docker-compose.yml"
)
EOF
    print_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: $DOCKER_CONFIG"
}

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_config() {
    if [ -f "$DOCKER_CONFIG" ]; then
        source "$DOCKER_CONFIG"
    else
        print_warning "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."
        AUTO_REMOVE_CONTAINERS=false
        AUTO_REMOVE_IMAGES=false
        BACKUP_PATH="$DOCKER_DIR"
        MONITOR_INTERVAL=5
        EXCLUDE_CONTAINERS=""
        COMPOSE_PROJECTS=()
    fi
}

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
log_action() {
    local action=$1
    local message=$2
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    echo "[$timestamp] [$action] $message" >> "$DOCKER_LOG"
    echo "  üìù –õ–æ–≥: $message"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker
check_docker() {
    if ! command -v docker >/dev/null 2>&1; then
        print_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        echo "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker: https://docs.docker.com/engine/install/"
        return 1
    fi
    
    if ! docker info >/dev/null 2>&1; then
        print_error "Docker –¥–µ–º–æ–Ω –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"
        echo "–î–æ–±–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É docker: sudo usermod -aG docker \$USER"
        echo "–ò –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Å—Å–∏—é –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –¥–µ–º–æ–Ω: sudo systemctl start docker"
        return 1
    fi
    
    return 0
}

# –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
list_containers() {
    print_section "DOCKER –ö–û–ù–¢–ï–ô–ù–ï–†–´"
    
    echo "üü¢ –ó–∞–ø—É—â–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:"
    docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}" 2>/dev/null || \
    docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Status}}"
    
    echo ""
    echo "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:"
    docker ps -a --format "table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}" --filter "status=exited" 2>/dev/null || \
    docker ps -a --format "table {{.Names}}\t{{.Image}}\t{{.Status}}" --filter "status=exited"
    
    local total=$(docker ps -aq | wc -l 2>/dev/null || echo "0")
    local running=$(docker ps -q | wc -l 2>/dev/null || echo "0")
    
    echo ""
    echo "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"
    echo "  –í—Å–µ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: $total"
    echo "  –ó–∞–ø—É—â–µ–Ω–æ: $running"
    echo "  –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: $((total - running))"
}

# –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–∑–æ–≤
list_images() {
    print_section "DOCKER –û–ë–†–ê–ó–´"
    
    docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}\t{{.CreatedSince}}" 2>/dev/null || \
    docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"
    
    local total=$(docker images -q | wc -l 2>/dev/null || echo "0")
    local size=$(docker system df --format "{{.ImagesSize}}" 2>/dev/null || echo "0")
    
    echo ""
    echo "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–∑–æ–≤:"
    echo "  –í—Å–µ–≥–æ –æ–±—Ä–∞–∑–æ–≤: $total"
    echo "  –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: $size"
}

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
show_stats() {
    print_section "–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–ù–¢–ï–ô–ù–ï–†–û–í"
    
    echo "üìà –†–µ–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:"
    docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.MemPerc}}\t{{.NetIO}}\t{{.BlockIO}}" 2>/dev/null || \
    docker stats --no-stream
    
    echo ""
    echo "üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞ Docker:"
    docker system df --verbose 2>/dev/null || docker system df
}

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
show_logs() {
    local container=$1
    
    if [ -z "$container" ]; then
        print_error "–£–∫–∞–∂–∏—Ç–µ –∏–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 logs <container_name>"
        return 1
    fi
    
    if ! docker ps -a --format "{{.Names}}" | grep -q "^$container$"; then
        print_error "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä '$container' –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    fi
    
    print_section "–õ–û–ì–ò –ö–û–ù–¢–ï–ô–ù–ï–†–ê: $container"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤
    docker logs --tail 50 "$container" 2>&1 || {
        print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ $container"
        return 1
    }
}

# –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
start_container() {
    local container=$1
    
    if [ -z "$container" ]; then
        print_error "–£–∫–∞–∂–∏—Ç–µ –∏–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 start <container_name>"
        return 1
    fi
    
    if docker ps --format "{{.Names}}" | grep -q "^$container$"; then
        print_warning "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä '$container' —É–∂–µ –∑–∞–ø—É—â–µ–Ω"
        return 0
    fi
    
    print_section "–ó–ê–ü–£–°–ö –ö–û–ù–¢–ï–ô–ù–ï–†–ê: $container"
    
    if docker start "$container" 2>/dev/null; then
        print_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä '$container' —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω"
        log_action "START" "–ó–∞–ø—É—â–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: $container"
    else
        print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä '$container'"
        return 1
    fi
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
stop_container() {
    local container=$1
    
    if [ -z "$container" ]; then
        print_error "–£–∫–∞–∂–∏—Ç–µ –∏–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 stop <container_name>"
        return 1
    fi
    
    if ! docker ps --format "{{.Names}}" | grep -q "^$container$"; then
        print_warning "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä '$container' –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        return 0
    fi
    
    print_section "–û–°–¢–ê–ù–û–í–ö–ê –ö–û–ù–¢–ï–ô–ù–ï–†–ê: $container"
    
    if docker stop "$container" 2>/dev/null; then
        print_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä '$container' —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        log_action "STOP" "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: $container"
    else
        print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä '$container'"
        return 1
    fi
}

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
restart_container() {
    local container=$1
    
    if [ -z "$container" ]; then
        print_error "–£–∫–∞–∂–∏—Ç–µ –∏–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 restart <container_name>"
        return 1
    fi
    
    print_section "–ü–ï–†–ï–ó–ê–ü–£–°–ö –ö–û–ù–¢–ï–ô–ù–ï–†–ê: $container"
    
    if docker restart "$container" 2>/dev/null; then
        print_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä '$container' —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"
        log_action "RESTART" "–ü–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: $container"
    else
        print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä '$container'"
        return 1
    fi
}

# –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
remove_container() {
    local container=$1
    
    if [ -z "$container" ]; then
        print_error "–£–∫–∞–∂–∏—Ç–µ –∏–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 remove <container_name>"
        return 1
    fi
    
    print_section "–£–î–ê–õ–ï–ù–ò–ï –ö–û–ù–¢–ï–ô–ù–ï–†–ê: $container"
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω
    if docker ps --format "{{.Names}}" | grep -q "^$container$"; then
        print_warning "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º..."
        docker stop "$container" 2>/dev/null || true
    fi
    
    if docker rm "$container" 2>/dev/null; then
        print_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä '$container' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"
        log_action "REMOVE" "–£–¥–∞–ª–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: $container"
    else
        print_error "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä '$container'"
        return 1
    fi
}

# –û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã Docker
cleanup_system() {
    print_section "–û–ß–ò–°–¢–ö–ê DOCKER –°–ò–°–¢–ï–ú–´"
    
    echo "üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É..."
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    local running_containers=$(docker ps -q 2>/dev/null | wc -l)
    if [ "$running_containers" -gt 0 ]; then
        echo "üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
        docker stop $(docker ps -q) 2>/dev/null || true
    fi
    
    # –£–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    local stopped_containers=$(docker ps -aq -f status=exited 2>/dev/null | wc -l)
    if [ "$stopped_containers" -gt 0 ]; then
        echo "üóëÔ∏è –£–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
        docker rm $(docker ps -aq -f status=exited) 2>/dev/null || true
    fi
    
    # –£–¥–∞–ª—è–µ–º dangling –æ–±—Ä–∞–∑—ã
    echo "üñºÔ∏è –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –æ–±—Ä–∞–∑—ã..."
    docker image prune -f 2>/dev/null || true
    
    # –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ volumes
    echo "üíæ –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ volumes..."
    docker volume prune -f 2>/dev/null || true
    
    # –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å–µ—Ç–∏
    echo "üåê –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å–µ—Ç–∏..."
    docker network prune -f 2>/dev/null || true
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    echo ""
    echo "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—Å—Ç–∫–∏:"
    docker system df
    
    log_action "CLEANUP" "–í—ã–ø–æ–ª–Ω–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ Docker —Å–∏—Å—Ç–µ–º—ã"
}

# –ë—ç–∫–∞–ø –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
backup_container() {
    local container=$1
    local backup_name=${2:-"${container}_backup_$(date +%Y%m%d_%H%M%S)"}
    
    if [ -z "$container" ]; then
        print_error "–£–∫–∞–∂–∏—Ç–µ –∏–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 backup <container_name> [backup_name]"
        return 1
    fi
    
    if ! docker ps -a --format "{{.Names}}" | grep -q "^$container$"; then
        print_error "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä '$container' –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    fi
    
    print_section "–ë–≠–ö–ê–ü –ö–û–ù–¢–ï–ô–ù–ï–†–ê: $container"
    
    local backup_file="$BACKUP_PATH/${backup_name}.tar"
    
    echo "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
    
    # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
    if docker export "$container" > "$backup_file" 2>/dev/null; then
        local size=$(du -h "$backup_file" | cut -f1)
        print_success "–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: $backup_file ($size)"
        log_action "BACKUP" "–°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ $container: $backup_file"
        
        # –°–∂–∏–º–∞–µ–º –±—ç–∫–∞–ø
        echo "üóúÔ∏è –°–∂–∏–º–∞–µ–º –±—ç–∫–∞–ø..."
        if command -v gzip >/dev/null 2>&1; then
            gzip "$backup_file"
            backup_file="${backup_file}.gz"
            local compressed_size=$(du -h "$backup_file" | cut -f1)
            echo "‚úÖ –°–∂–∞—Ç—ã–π –±—ç–∫–∞–ø: $backup_file ($compressed_size)"
        fi
    else
        print_error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ '$container'"
        return 1
    fi
}

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
monitor_containers() {
    print_section "–ú–û–ù–ò–¢–û–†–ò–ù–ì DOCKER –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò"
    echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ $MONITOR_INTERVAL —Å–µ–∫—É–Ω–¥"
    echo "‚èπÔ∏è –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"
    echo ""
    
    local counter=0
    while true; do
        counter=$((counter + 1))
        clear
        print_header
        echo "üîÅ –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: $counter"
        echo "=========================================="
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        show_stats
        
        echo ""
        echo "‚è≥ –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ $MONITOR_INTERVAL —Å–µ–∫—É–Ω–¥..."
        sleep "$MONITOR_INTERVAL"
    done
}

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Docker Compose
manage_compose() {
    local project_path=$1
    local action=${2:-"ps"}
    
    if [ -z "$project_path" ]; then
        print_error "–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ docker-compose.yml"
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 compose <path> [action]"
        echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: ps, up, down, restart, logs"
        return 1
    fi
    
    if [ ! -f "$project_path" ]; then
        print_error "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $project_path"
        return 1
    fi
    
    print_section "DOCKER COMPOSE: $(basename $(dirname "$project_path"))"
    
    case "$action" in
        "ps")
            docker-compose -f "$project_path" ps
            ;;
        "up")
            docker-compose -f "$project_path" up -d
            ;;
        "down")
            docker-compose -f "$project_path" down
            ;;
        "restart")
            docker-compose -f "$project_path" restart
            ;;
        "logs")
            docker-compose -f "$project_path" logs -f
            ;;
        *)
            print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: $action"
            echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: ps, up, down, restart, logs"
            return 1
            ;;
    esac
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    load_config
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker
    if ! check_docker; then
        exit 1
    fi
    
    case "${1:-}" in
        "ps")
            print_header
            list_containers
            ;;
        "images")
            print_header
            list_images
            ;;
        "stats")
            print_header
            show_stats
            ;;
        "logs")
            print_header
            show_logs "$2"
            ;;
        "start")
            print_header
            start_container "$2"
            ;;
        "stop")
            print_header
            stop_container "$2"
            ;;
        "restart")
            print_header
            restart_container "$2"
            ;;
        "remove")
            print_header
            remove_container "$2"
            ;;
        "cleanup")
            print_header
            cleanup_system
            ;;
        "backup")
            print_header
            backup_container "$2" "$3"
            ;;
        "monitor")
            print_header
            monitor_containers
            ;;
        "compose")
            print_header
            manage_compose "$2" "$3"
            ;;
        "config")
            create_config
            ;;
        "help"|"--help"|"-h"|"")
            show_help
            ;;
        *)
            print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $1"
            show_help
            exit 1
            ;;
    esac
}

main "$@"
